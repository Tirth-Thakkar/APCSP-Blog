{
  
    
        "post0": {
            "title": "Strings - 3.4",
            "content": "Strings . What is a string? . A string is a collection of charecters. What is a charector as charector can be anything from numbers, letters, spaces, special symbols, etc. | Certain procedures may be used with strings and they vary from progaramming language to language Python examples | len() to find the length of a string | lower() to converte to lowercase | etc. Psuedocode examples | len() returns the lengh of a string | concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 | substring() returns the charectors from the string beginning at the at the first position to the last so an example of this would be substring(&quot;abcdefghijk&quot;, 2, 5) would print bcde (puesdocode starts at 1) | . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string | concat() in pusedocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster | . Substings . What is a substring? . A substring is a part of and already existing string. | In psuedocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pusedocode starts at 1) | . Hacks . Complete the following examples by either filling in the blanks or giving the result | . Example 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = subtring(Noun, 1, 7) yoda = concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) DISPLAY {yoda} . Example 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = &quot;cookie/2&quot; len2 = &quot;cookie2*45&quot; vote1 = (&quot;cookie&quot;, &quot;vote&quot;, &quot;len2&quot;) vote2 = (&quot;cookie2&quot;, &quot;vote&quot;, &quot;len1&quot;) votes = (concat(vote1, &quot; &quot;, vote2)) display {votes} . Disclaimer . Work in progress more hack problems for practice will be available on presentation day .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/strings/3.4/2022/11/18/Strings.html",
            "relUrl": "/strings/3.4/2022/11/18/Strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Binary Logic and Abstraction",
            "content": "Notes . Abstraction hiding aspects of a program to make it more user friendly | Octal, Hexadecimal, decimal, binary, etc., talking about the number of symbols per digit | Have to approach things in a scientific manner - do research | Toggling binary digits of bits to represent different numbers | Does so through transistors that can get turned on and off in patterns can allow for a computer to count in patterns | Binary patterns came to be 20, 21, etc. similar to binary which is base 10 | To count higher the number of bits increases, the highest number that can be stored in three bits is 7 and it can increase to store more, usually 8 bits | Letters can also be stored as different values allowing other functions to be possible with a computer | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/binary/2022/11/18/Binary.html",
            "relUrl": "/binary/2022/11/18/Binary.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Test Corrections",
            "content": "Score . . Questions + Corrections . . I had missed the until portion of the code as the function repeated till count was greater than the max not that the function printed the odd integers that were greater than the max. This was due to not reading the problem correctly. . . I had mistakenly used the value for after the function had executed getting 6, I had not taken into acount the sum of the value of all the integers between 0-5 which would set the value. The major reason for this issue was misunderstanding the question and not finding the value for result which was what the question had asked for. The best way to solve this issue would be to re-read the problem and to pay attention to all aspects not just what would be the first answer that would come to mind when looking at the problem. . . When solving the problem I had not taken into account that the &gt; while excluding 0 in the first portion of the conditional statement, however the else condition would be applicable to 0 making the value for count2 to not be 2 but 3 indicated in the correct answer. Pay more attention and be more careful when solving as there may be portions of problems that may require greater focus. . Reflection . Through taking the final assessment was that I wasn&#39;t the most dillgent when solving the problems resulting in missing portions or misreading them or all together misunderstanding mostly likely a result of trying to finish the test with haste. However, I also faced difficulty with problems such as those involving bis, and other data, along with binary questions requiring the most time and attention this was due to not properly studying these materials and thus resulting in unneeded confustion and time wastage, a solution would be to better prepare and to focus and take notes on collegeboard provided resources and content. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/Final",
            "relUrl": "/Final",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Night @ the Museum",
            "content": "API Final Projects . Throughout this Trimester many groups of students have worked hard to display the full course of their understading via there Night at the Museum Project, however, we as group throughout the development process may have focused on our project, we gained the ability to reflect based on the outstanding work that many groups have down also showcasing their learning. These are my personal notes on the that they presented at Night at the Museum. . Api Notes . Alan, Steven, Ederick, Noor, Liav - calendar that shows date and weather, can put in an event on any day and it saves, can search for any city weather . Luke - Has a variety of quizzes to choose from to use them to generate random questions, geography, math, and sat questions. About pages linkes to eveyone fastpages. . Paaras, Samarth, AJ, Haoxuan - An api that grabs some of the best of best motivational qoutes from the internet, and allows users to vote on the quality of the votes through hosting a number counter. Also are able to pulled to get a random qoutes. . Peacock Justin, James, Shruti, Joslyn - recreation of the classic game tetris, and through the use of astronomy api to create table based on the city name and gives location details longitude latitude and moon traits. . Advay, Krishiv, Shivansh, Dhruva, Prasith - Motivational qputes api to curate qoutes accross the internet, and heleaps pepple calculate goals and calories, BMI calculator, and fitness goals. . Jonathan, Martin, Abdulla, Leonard - Basketball stats of each NBA team, used an api to get the stats fpr each team and through thier website made it accesable to the user with ease. . Lyntax Aniket, Soham, Ryan, Lucas - One api with a dictionary hosted on a flask server that has words and definitions so users can imput it against a word. Which serves to play a hangman game. Which also eliminates letters and dynamically renders the charector. . Ananya, Sreeja, Aliya, Clair - Wordle game that uses thier custom api that imports and uses it randomly uses it to generate a game. Also checks if words are valid are not and informs the user if they are incorrect or not. . Raunak, Tanay, Yuri, Sachit, Harsha - Clock alarm and stopwatch, using a custom api to request data from a variety of time of timezones to display times. . Lily, Ekam, Ishi, Shreyas - Uses a custom dictionary api of different words and thier definitions to allow users to find them and a word of the day that changes. Along with a feedback to adapt the user experience. . Aiden ahad dash sabine - Innovative api that has games such as tetris, blackjack, cookie clicker, and a pokemon game with custom to log losses wins, correct answers wrong and other game data. . The fream team we make code with varalu azeem chubmag and colin, we made and acedemic organizer, with a custom api that fetches information predominantly wikipedia and stores the data to make an acedmic organizer . Devon, trent, drew, jager - Made custom api to conpare likes to dislikes to pull it as an alarm for a stopwatch is able to manage your workflow through several options, such as notifications, that can keep you on track, and set break intervals, and tasks . Keira, Zeen, Ellie, Giannina - Made custom custmoer survey along with a quiz that has three different quizzes for calculus, physics, and satstics, with soultion with randomized questions from a database. Along with a quiz summary and a customer service api that prompts users woth questions saving them to a data base. Along with an explanation to show how the problems you missed could be solved. . Reflections . In my opinion this showcases the vast strides many students inclusing myself have made this trimester, with coming from barely understanding any CS concepts prior to this class have been able to grow and develop to make a large variety of projects based apon their understanding of APIs, CSS, HTML, Fastpages, and Python. From creating projcts like ours via games, from Pokemon, Tetris, to other educational tools like quizzes on wide variety of topics or other tools like health trackers, and calanders everyone showcased an amount of growth one may not think possible in just one trimester. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/Night@TheMuseum",
            "relUrl": "/Night@TheMuseum",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Agile Methodology",
            "content": ".",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/collegeboard/apcsp/2022/10/14/Agile.html",
            "relUrl": "/collegeboard/apcsp/2022/10/14/Agile.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "API",
            "content": "Go Back | Code Corrections | API Usage | . . API Usage . Through using the currency conversion API I can implement an ability for travelers to have a useful utility which is a big market for our game which will allow them to gain added functionality from our program. It may also server as an aid to the upcoming microtransaction and paid DLC we may wish to add to expand the project profitablity such as the possiblity of Minesweeper skins and a Minesweeper Battle Pass. However, this may not be implemented. . import requests url = &quot;https://exchangerate-api.p.rapidapi.com/rapid/latest/USD&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;ec6edae9b8msh021a4b906297b9bp13ff74jsn1b271e386f87&quot;, &quot;X-RapidAPI-Host&quot;: &quot;exchangerate-api.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;result&#34;:&#34;success&#34;,&#34;provider&#34;:&#34;https://www.exchangerate-api.com&#34;,&#34;documentation&#34;:&#34;https://www.exchangerate-api.com/docs/free&#34;,&#34;terms_of_use&#34;:&#34;https://www.exchangerate-api.com/terms&#34;,&#34;time_last_update_unix&#34;:1665619351,&#34;time_last_update_utc&#34;:&#34;Thu, 13 Oct 2022 00:02:31 +0000&#34;,&#34;time_next_update_unix&#34;:1665706301,&#34;time_next_update_utc&#34;:&#34;Fri, 14 Oct 2022 00:11:41 +0000&#34;,&#34;time_eol_unix&#34;:0,&#34;base_code&#34;:&#34;USD&#34;,&#34;rates&#34;:{&#34;USD&#34;:1,&#34;AED&#34;:3.6725,&#34;AFN&#34;:85.988912,&#34;ALL&#34;:120.058634,&#34;AMD&#34;:403.107789,&#34;ANG&#34;:1.79,&#34;AOA&#34;:440.197733,&#34;ARS&#34;:150.489451,&#34;AUD&#34;:1.594569,&#34;AWG&#34;:1.79,&#34;AZN&#34;:1.697347,&#34;BAM&#34;:2.016097,&#34;BBD&#34;:2,&#34;BDT&#34;:100.989353,&#34;BGN&#34;:2.015961,&#34;BHD&#34;:0.376,&#34;BIF&#34;:2052.598939,&#34;BMD&#34;:1,&#34;BND&#34;:1.435897,&#34;BOB&#34;:6.933153,&#34;BRL&#34;:5.295171,&#34;BSD&#34;:1,&#34;BTN&#34;:82.153286,&#34;BWP&#34;:13.473801,&#34;BYN&#34;:2.96985,&#34;BZD&#34;:2,&#34;CAD&#34;:1.380175,&#34;CDF&#34;:2044.903813,&#34;CHF&#34;:0.997287,&#34;CLP&#34;:927.579778,&#34;CNY&#34;:7.167708,&#34;COP&#34;:4604.069073,&#34;CRC&#34;:629.971394,&#34;CUP&#34;:24,&#34;CVE&#34;:113.662694,&#34;CZK&#34;:25.34595,&#34;DJF&#34;:177.721,&#34;DKK&#34;:7.690263,&#34;DOP&#34;:53.656444,&#34;DZD&#34;:140.592874,&#34;EGP&#34;:19.659645,&#34;ERN&#34;:15,&#34;ETB&#34;:52.861447,&#34;EUR&#34;:1.030819,&#34;FJD&#34;:2.320164,&#34;FKP&#34;:0.902492,&#34;FOK&#34;:7.690263,&#34;GBP&#34;:0.902498,&#34;GEL&#34;:2.78066,&#34;GGP&#34;:0.902492,&#34;GHS&#34;:10.894116,&#34;GIP&#34;:0.902492,&#34;GMD&#34;:57.931071,&#34;GNF&#34;:8624.625766,&#34;GTQ&#34;:7.874647,&#34;GYD&#34;:208.974653,&#34;HKD&#34;:7.852897,&#34;HNL&#34;:24.682595,&#34;HRK&#34;:7.766667,&#34;HTG&#34;:123.776187,&#34;HUF&#34;:444.407767,&#34;IDR&#34;:15301.349145,&#34;ILS&#34;:3.575309,&#34;IMP&#34;:0.902492,&#34;INR&#34;:82.154667,&#34;IQD&#34;:1457.576859,&#34;IRR&#34;:42004.32988,&#34;ISK&#34;:144.726377,&#34;JEP&#34;:0.902492,&#34;JMD&#34;:152.864278,&#34;JOD&#34;:0.709,&#34;JPY&#34;:146.624825,&#34;KES&#34;:121.217761,&#34;KGS&#34;:82.126786,&#34;KHR&#34;:4123.582427,&#34;KID&#34;:1.594565,&#34;KMF&#34;:507.127191,&#34;KRW&#34;:1425.625309,&#34;KWD&#34;:0.29963,&#34;KYD&#34;:0.833333,&#34;KZT&#34;:478.066864,&#34;LAK&#34;:16836.123653,&#34;LBP&#34;:1507.5,&#34;LKR&#34;:360.983813,&#34;LRD&#34;:153.639615,&#34;LSL&#34;:18.262263,&#34;LYD&#34;:5.035453,&#34;MAD&#34;:11.014855,&#34;MDL&#34;:19.423608,&#34;MGA&#34;:4224.776029,&#34;MKD&#34;:63.401293,&#34;MMK&#34;:2427.744572,&#34;MNT&#34;:3322.460624,&#34;MOP&#34;:8.088464,&#34;MRU&#34;:37.859426,&#34;MUR&#34;:43.645361,&#34;MVR&#34;:15.416106,&#34;MWK&#34;:1029.34203,&#34;MXN&#34;:20.014913,&#34;MYR&#34;:4.66801,&#34;MZN&#34;:64.230714,&#34;NAD&#34;:18.262263,&#34;NGN&#34;:434.043554,&#34;NIO&#34;:35.949001,&#34;NOK&#34;:10.763445,&#34;NPR&#34;:131.445258,&#34;NZD&#34;:1.78519,&#34;OMR&#34;:0.384497,&#34;PAB&#34;:1,&#34;PEN&#34;:3.97664,&#34;PGK&#34;:3.519378,&#34;PHP&#34;:58.871982,&#34;PKR&#34;:217.296861,&#34;PLN&#34;:4.989568,&#34;PYG&#34;:7114.571496,&#34;QAR&#34;:3.64,&#34;RON&#34;:5.088638,&#34;RSD&#34;:120.830365,&#34;RUB&#34;:63.883235,&#34;RWF&#34;:1070.436103,&#34;SAR&#34;:3.75,&#34;SBD&#34;:8.071319,&#34;SCR&#34;:13.296746,&#34;SDG&#34;:566.446626,&#34;SEK&#34;:11.340528,&#34;SGD&#34;:1.435905,&#34;SHP&#34;:0.902492,&#34;SLE&#34;:16.927655,&#34;SLL&#34;:16927.65531,&#34;SOS&#34;:567.848342,&#34;SRD&#34;:28.340853,&#34;SSP&#34;:619.602752,&#34;STN&#34;:25.25494,&#34;SYP&#34;:2501.187332,&#34;SZL&#34;:18.262263,&#34;THB&#34;:37.985137,&#34;TJS&#34;:10.232623,&#34;TMT&#34;:3.49717,&#34;TND&#34;:3.112674,&#34;TOP&#34;:2.437326,&#34;TRY&#34;:18.568816,&#34;TTD&#34;:6.764787,&#34;TVD&#34;:1.594565,&#34;TWD&#34;:31.759167,&#34;TZS&#34;:2326.298373,&#34;UAH&#34;:37.95754,&#34;UGX&#34;:3833.56489,&#34;UYU&#34;:41.056318,&#34;UZS&#34;:11120.341341,&#34;VES&#34;:8.2681,&#34;VND&#34;:23928.509049,&#34;VUV&#34;:121.950741,&#34;WST&#34;:2.808059,&#34;XAF&#34;:676.169587,&#34;XCD&#34;:2.7,&#34;XDR&#34;:0.784263,&#34;XOF&#34;:676.169587,&#34;XPF&#34;:123.009083,&#34;YER&#34;:249.984599,&#34;ZAR&#34;:18.262363,&#34;ZMW&#34;:15.871555,&#34;ZWL&#34;:625.954806}} .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/API",
            "relUrl": "/API",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "College Board Quizzes",
            "content": ". Difficulties . Issues with understanding the College Board Pseudocode and interpreting into a valid answer | Also had difficulty with understanding the word problems and being able to understand what they required | Had the main issues with understand the program purpose assignment and the problems with understand the question mostly stemming from the misunderstanding or misreading of the problem mostly when the entire question wasn&#39;t read multiple times due to aforementioned issues with understanding the college board Pseudocode | I also struggled with interpreting the questions in Program Design and Developments due to the strange wording present within the problems. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week%206/collegeboard/2022/10/03/College-Board-Quiz.html",
            "relUrl": "/week%206/collegeboard/2022/10/03/College-Board-Quiz.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Code Corrections",
            "content": "Go Back | Code Corrections | API | . &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Part 1: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for letter in alphabet: alphabetList.append(letter) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 2 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 3 print(odds) . [0, 3, 6, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 3 == 0): odds.append(numbers[i]) print(odds) . [0, 3, 6, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Part 2 . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Total Order&quot;) runs = 0 desired_runs = int(input(&quot;# of Items&quot;)) while runs &lt; desired_runs: item = input(&quot;Please select an item from the menu&quot;) try: total += menu[item] print(item + &quot; $&quot; + str(menu[item])) runs+=1 except: print(&quot;Invalid&quot;) #code should add the price of the menu items selected by the user print(&quot;Your total order is $&quot;+str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Total Order burger $3.99 drink $0.99 drink $0.99 drink $0.99 fries $1.99 Your total order is $8.950000000000001 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | . &lt;/div&gt; .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/code-corrections",
            "relUrl": "/code-corrections",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Ideas for Final Project",
            "content": "Ideas . Make a page that creates a quiz based on all the content we have learned for the trimester. | Make a quiz that also shows incorrect answers that functions in the same way as the current implementation in a way that is not affected by prior runs. | Add images that are interactive and can be manipulated for easter eggs or questions. | Add a system that shows a live score for incorrect and correct questions answered as they progress along the quiz. | Create a page that show cases images an text in a visually appealing format. | . Purpose And Function . To be able to showcase the understanding of the content learned in APCSP and to allow others to practice the same. And to be able to do so in a manner that is interactive and appealing to use as a study tool. | . Data Abstraction . Through creating a variable that measures the incorrect attempts and one that measures the correct events that are integers to be able to store the score the player gets and change based on answers given. | . Managing Complexity . To prevent the quiz from becoming too complicated I would reduce the amount of functions it would perform as in not becoming too sidetracked on adding flash cards. Or adding extra features that would be useless to accomplishing the final task or distracting. | . Procedural Abstraction . The code would make use of function to be able to run quizzes allowing operation such as starting to be done only once saving repeatedly used code. | Creating functions that would remove repeated events such as switching pages or other similar functions. | . Algorithm Implementation . Would use an algorithm for printing scores of correct and incorrect answers or pages visited through concatenation of strings from the data stored in the variables. | . Testing . Would run through the quiz will recording myself to showcase fixing issues that may develop from scoring to formatting, and being able to loop with in a way that the scores don&#39;t stack. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week3/app-lab/quiz/python/2022/09/11/Ideas_Final.html",
            "relUrl": "/week3/app-lab/quiz/python/2022/09/11/Ideas_Final.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "App Lab Quiz",
            "content": "Design . To create a quiz with a unified visual aesthetic with colors that look appealing when used in unison. | To create a quiz that can have a combination of both free response and multiple choice questions. | To create a quiz that can be replayed indefinitely and still have scoring function. | To create a quiz that can be added to have multiple modes. | . . Successes . Was able to make a quiz that could be looped through the use of functions to restart the quiz using functions to rerun the quiz to remove previous runs when replayed. | Was able to create an appealing visual design. | Was able to create multiple modes without losing functionality of any aspect. (Second Quiz is only present to show case the capability of running multiple quizzes in one project.) | Was able to have both free response questions and multiple choice, by using if else statements to check the answer of a free response question. | Was able to use functions to remove frequently used code (Data Abstraction). | . Discoveries/Challenges . Had issues with the first implementation of looping with the functions not working correctly on the first implementation. Allowed me to discover to make a function to allow for ending as the ending procedure wasn&#39;t present on all endings for the question both right and incorrect answer. | Had issues with creating a scoring system that was consistently functional, simplified the scoring mechanism by using a single variable as a way to measure the correctly answered questions. | Had issues with starting the quizzes the quiz looped around. Which allowed me to to discover a solution to run all quiz functions as soon as mouse movement was detected on starting page allowing all functionalities of all quizzes present to work. | . Link To Quiz . https://studio.code.org/projects/applab/aTaquZIk5sKMfBZVcUUP8UvuTu6kamc1SIQgFcscyRE .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week4/app-lab/quiz/python/2022/09/11/App_Lab_Quiz.html",
            "relUrl": "/week4/app-lab/quiz/python/2022/09/11/App_Lab_Quiz.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Theme Change",
            "content": ". Analysis . After changing to an unsupported theme from Jekyl, there seems to be a lack of options to toggle to tags and other features present to allow switching between pages. There also seems to be a difference in the formatting of images as the appear to be no longer the similar size. Along with further issues with titles not being correctly spaced and ordered in a way that correlated well with their title-card images. Along with the favicon being missing as well, however all other functions such as the post appear to be functioning. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/themes/2022/09/05/Theme_Change.html",
            "relUrl": "/themes/2022/09/05/Theme_Change.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Information",
            "content": "Peers_Info = [] Peers_Info.append({ &quot;First_Name&quot;: &quot;Tirth&quot;, &quot;Middle_Name/Initial&quot;:&quot;S.&quot;, &quot;Last_Name&quot;: &quot;Thakkar&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;DOB&quot;: &quot;December 26, 2005&quot;, &quot;Grade&quot;: &quot;11th&quot;, &quot;Email&quot;: &quot;tirth1226@gmail.com&quot;, }) Peers_Info.append({ &quot;First_Name&quot;: &quot;Mirza&quot;, &quot;Middle_Name/Initial&quot;: &quot;Haseeb&quot;, &quot;Last_Name&quot;: &quot;Beg&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;DOB&quot;: &quot;December 6th, 2007&quot;, &quot;Grade&quot;: &quot;10th&quot;, &quot;Email&quot;: &quot;mirzahbeg123@gmail.com&quot;, }) print(Peers_Info) . [{&#39;First_Name&#39;: &#39;Tirth&#39;, &#39;Middle_Name/Initial&#39;: &#39;S.&#39;, &#39;Last_Name&#39;: &#39;Thakkar&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;DOB&#39;: &#39;December 26, 2005&#39;, &#39;Grade&#39;: &#39;11th&#39;, &#39;Email&#39;: &#39;tirth1226@gmail.com&#39;}, {&#39;First_Name&#39;: &#39;Mirza&#39;, &#39;Middle_Name/Initial&#39;: &#39;Haseeb&#39;, &#39;Last_Name&#39;: &#39;Beg&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;DOB&#39;: &#39;December 6th, 2007&#39;, &#39;Grade&#39;: &#39;10th&#39;, &#39;Email&#39;: &#39;mirzahbeg123@gmail.com&#39;}] . Formatting . Way to organize and format the data. . def formatting(d_rec): print(&quot; 033[1m&quot;, d_rec[&quot;First_Name&quot;], d_rec[&quot;Middle_Name/Initial&quot;], d_rec[&quot;Last_Name&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Grade:&quot;, d_rec[&quot;Grade&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;], &quot; x1b[0m&quot;) print() def printing(): for index in Peers_Info: formatting(index) printing() . Tirth S. Thakkar Residence: San Diego Birth Day: December 26, 2005 Grade: 11th Email: tirth1226@gmail.com Mirza Haseeb Beg Residence: San Diego Birth Day: December 6th, 2007 Grade: 10th Email: mirzahbeg123@gmail.com . Reversal . Way to reverse the data. . Peers_Info.reverse() printing() . Mirza Haseeb Beg Residence: San Diego Birth Day: December 6th, 2007 Grade: 10th Email: mirzahbeg123@gmail.com Tirth S. Thakkar Residence: San Diego Birth Day: December 26, 2005 Grade: 11th Email: tirth1226@gmail.com .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/python/2022/09/02/Python_Dictionaries_&_Lists.html",
            "relUrl": "/python/2022/09/02/Python_Dictionaries_&_Lists.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Python Quiz With Dictionary",
            "content": "Quiz . Dictionary being used to run the quiz. . Q_Bank = { &quot;Dynamic code is code that has inputs and outputs that can change?&quot;: [&quot;true&quot;], &quot;What is the keyword for defining a function in Python?&quot;: [&quot;def()&quot;], &quot;In Jupyter Notebooks the Input is in line with the Output&quot;: [&quot;false&quot;], &quot;What is grouping often used commands called?&quot;: [&quot;procedural abstraction&quot;], } for Q, ans in Q_Bank.items(): print(Q) rsp = input(Q) if rsp.lower() == ans[0]: print(&quot;Your answer &quot; + str(rsp)+&quot; is the correct correct&quot;) else: print(&quot;Your answer &quot; + str(rsp) + &quot; doesn&#39;t equal the correct answer/s which is &quot; + str(ans)) . Dynamic code is code that has inputs and outputs that can change? Your answer doesn&#39;t equal the correct answer/s which is [&#39;true&#39;] What is the keyword for defining a function in Python? Your answer doesn&#39;t equal the correct answer/s which is [&#39;def()&#39;] In Jupyter Notebooks the Input is in line with the Output Your answer doesn&#39;t equal the correct answer/s which is [&#39;false&#39;] What is grouping often used commands called? Your answer doesn&#39;t equal the correct answer/s which is [&#39;procedural abstraction&#39;] .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/python/2022/09/02/Dictionary_Quiz.html",
            "relUrl": "/python/2022/09/02/Dictionary_Quiz.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Tirth Thakkar Measurements And Graphical Analysis Lab",
            "content": "Procedure: All 5 disks will be labeled, then have thier radius measured using a meter stick, after which they will be weighed on a digtal scale to collect data regarding their mass. Then their thickness was measured by using a meter stick. After the data regarding the radius and mass was put into a table, which was used to create graph 1 through sheets. After which the graph was linearlized by using r2 as the x value as it is the only value that isn’t constant to create graph2 after imputing it into sheets and creating a graph. . Purpose Statement: . Given “disks” of different radii, determine the relationship between the mass and radius of the disks through graphical method. . In using graphical method, we will learn about linearization and the use of it to create a mathematical model. . Equations: . p=m/v . | m=p*v . | V=a*h . | m=p*a*h . | m=p*pi*r^2*h . | Data Table: .   Height Radius (cm) Mass(g)   Radius^2 (cm^2) . Disk 1 | 0.14 mm | 2.38 | 0.08 |   | 5.66 | . Disk 2 |   | 3.15 | 0.14 |   | 9.92 | . Disk 3 |   | 3.80 | 0.24 |   | 14.44 | . Disk 4 |   | 5.40 | 0.38 |   | 29.16 | . Disk 5 |   | 6.85 | 0.71 |   | 46.92 | . Graph 1 . Graph 2 . . y = 0.0148x - 3.1*10-3 . Analysis Questions: . 1) What is the independent variable in your y = mx +b formula? The independent variable on the formula would be r2 it is the only constant variable across all the formulas. . As the density is equal to ⍴ = m/v and as density is constant m can be m = ⍴v, and as v = a*h, and expanded it would be v = π*r2*h, so when substituted into the equation for mass m = ⍴*π*r2*h, and as all three values density (all discs are aluminum), π (constant), h (all are the same thickness) are constant it would make r2 the only value that changes between all 5 discs making it the independent variable. . -——————————————————————————————————————– . 2) What does the slope represent in your y = mx +b formula? Show dimensionally that indeed that is what your slope represents and that the formula is valid dimensionally. . The slope represents ⍴πh. As the equation for density is ⍴ = m/v and as ⍴ is constant it allows for m = πv, which allows for it to be rewritten as m = ⍴*π*h*r2 and as m is the y value and r2 is the x value it can be further rewritten as y = ⍴*π*h*x making ⍴πh the slope. And the formula is m = ⍴*π*h*r2 is demensionally valid as . m = (m(πr2h)-1)(h)(r2) which is M = (M(L2L)-1)(L)(L2), M = M (L-3)(L3), M = M . -——————————————————————————————————————– . 3) Should the “b” in your y = mx + b formula be zero? Explain your answer. . Yes as the independent variable is r2 and as a disc with the radius of 0 should also have a mass of 0 (dependent variable). . -——————————————————————————————————————– . 4) Measure/estimate the “thickness” of your cylinders. Use that value to find the experimental density of your cylinders. Find a percent difference between your found density and the actual density. The actual material is aluminum. . The thickness value of the cylinders was 0.14 mm (0.014 cm), with a slope of 0.0148 (⍴*π*h), ⍴ = 0.0148/π*(0.014 cm), ⍴ = 0.336 g/cm3, compared to the real density of aluminum which is 2.3/cm3. | 0.336-2.3 | /2.3 *100, 85.39% error. | . -——————————————————————————————————————– . 5) errors. Make sure you explain why your number is bigger or smaller than (if positive or negative difference.) . My number is substantially smaller as when using the line of best fit the value for the y-intercept is not 0 i.e. when r2 = 0 the value for mass is not 0 which is not possible in real life meaning that that decrepency coupled with the fact that the measuring techniques through using a meter stick to estimate the thickness and radius of the disks would also be less accurate than proper electronic measurements in a lab. . -——————————————————————————————————————– . Synthesis Questions: . 1) In this experiment, if we had used disks with a greater thickness, would the slope . of your best fit line have been different? Would your experimental value for density be . the same? Explain. . If disks of greater thickness was used the value for slope would be different as previously mentioned when the expanded equation for mass which is m = ⍴*π*h*r2 . is rewritten would be y = ⍴*π*h(x), and which would make ⍴*π*h the slope and as h is a part of the slope value and if it were greater it would make the slope greater. However, the density would stay the same as the material would remain unchanged as if the height was greater it would also cause the mass to increase and it would cancel out when solving for the density. . -——————————————————————————————————————– . 2) How would your graph of m versus r2 be different if you had used disks of the same . thickness, but made out of steel? Draw a second line on your m versus r2 plot that . represents disks made of steel. . If you had used disks made of steel but of the same thickness, you would have disks of a greater density than that of the aluminum graph. Which would cause the graph mass vs r2 to be above that of the one made of aluminum. . . -——————————————————————————————————————– . 3) Another group of students has acquired data for the exact same experiment; . however, their disks are made of an unknown material that they are trying to . determine. The group’s m versus r2 data produced a line of best fit with slope equal to . 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the . density of the unknown material and use the table below to help determine what . material their disks are made of. . m = ⍴*π*h*r2, y = ⍴*π*h(x), 122kg/m2 = ⍴*π*0.005, 122/0.005π = ⍴, ⍴ = 7,766.76 kg/m3, 7,766.761kg/m3 * 1000g/kg = 7,766,761g/m3 * 1*106 cm3/m3 = 7,766,761g/1*106, 7.766761g/cm3 approx 7.8 = Iron . -——————————————————————————————————————– . Multiple Choice: . 1) &gt; - E . 1. &gt; m = ⍴ *π *h *r&lt;sup&gt;2&lt;/sup&gt;, C = 2πr, C/2π = r, m = ⍴ *π *h *(C/2π)&lt;sup&gt;2&lt;/sup&gt;, m = ⍴ *π *h *C&lt;sup&gt;2&lt;/sup&gt;/4π&lt;sup&gt;2&lt;/sup&gt;, ⍴ *h *C&lt;sup&gt;2&lt;/sup&gt;/4π, ⍴h/4π(x), . 2) &gt; - C . 1. &gt; ⍴ = m/v and as density is constant m can be m = ⍴v, and as v = 4/3πr&lt;sup&gt;3&lt;/sup&gt;, so when substituted into the equation for mass m = ⍴ *π *4/3πr&lt;sup&gt;3&lt;/sup&gt; and the only non constant is r&lt;sup&gt;3&lt;/sup&gt; making it the only value that would lineralize the graph . Graphs: Lab 1 Graphs .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/2022/08/28/Tirth-Thakkar-Measurements-and-Graphical-Analysis-Lab.html",
            "relUrl": "/2022/08/28/Tirth-Thakkar-Measurements-and-Graphical-Analysis-Lab.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python Quiz",
            "content": "class question: def __init__(self, base, answer): self.base = base self.answer = answer question_base = [ &quot;Dynamic code is code that has inputs and outputs that can change? n (t) True n (f) False n n&quot;, &quot;What is the keyword for defining a function in Python? n (a) def() n (b) fun() n (c) proc() n n&quot;, &quot;In Jupyter Notebooks the Input is in line with the Output? n (t) True n (f) False n n&quot;, &quot;What is grouping often used commands called? n (a) Bundle n (b) Procedural Abstraction (c) Group n n&quot;, ] question_bank = [ question(question_base[0], &quot;t&quot;), question(question_base[1], &quot;a&quot;), question(question_base[2], &quot;f&quot;), question(question_base[3], &quot;b&quot;), ] def run_test(question_bank): score = 0 for question in question_bank: rsp = input(question.base) if rsp.lower().strip() == question.answer: score += 1 print(&quot;You got &quot; + str(score)+&quot; out of &quot; + str(len(question_bank)) + &quot; questions correct.&quot;) run_test(question_bank) . You got 4 out of 4 questions correct. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/quiz/2022/08/28/Quiz.html",
            "relUrl": "/quiz/2022/08/28/Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Tool Check",
            "content": "Jupyter . %%bash jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/tirth/.local/share/jupyter/kernels/bash javascript /home/tirth/.local/share/jupyter/kernels/javascript python3 /home/tirth/anaconda3/share/jupyter/kernels/python3 . Python . %%bash python2 --version python --version . Python 2.7.18 . Python 3.9.12 . Conda . %%bash conda list . # packages in environment at /home/tirth/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . %%bash echo Conda test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not located&quot; fi . Conda jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/tools/2022/08/28/Bash_Check.html",
            "relUrl": "/tools/2022/08/28/Bash_Check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Printing Hello Jupyter Notebook Demo",
            "content": "print(&quot;hello&quot;) . hello .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/collegeboard/apcsp/2022/08/26/Notebook1.html",
            "relUrl": "/collegeboard/apcsp/2022/08/26/Notebook1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Markdown Post",
            "content": "Hello First Markdown Blog Post . This is my first markdown post for APCSP. Which will improve in the future. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/markdown/2022/08/26/MarkdownPostV1.html",
            "relUrl": "/markdown/2022/08/26/MarkdownPostV1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "API Submenu",
          "content": "Go Back | Code Corrections | API Usage | . .",
          "url": "https://tirth-thakkar.github.io/APCSP-Blog/submenu/",
          "relUrl": "/submenu/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "Tirth Thakkar APCSP student at DNHS. This is the blog assignment for all future assignments. Tirth-Thakkar [^1]. . [^1] Github .",
          "url": "https://tirth-thakkar.github.io/APCSP-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tirth-thakkar.github.io/APCSP-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}