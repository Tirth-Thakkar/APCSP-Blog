{
  
    
        "post0": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # That a set is a collection of unique elements and cannot have duplicate values # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # They both have to have unique values and cannot have duplicate values. # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # The datastructures that we see in this dictionary are lists, and dictionaries. We see a list for genre and a dictionary for tracks. # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . # lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] lover_album[&#39;producer&#39;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # lover_album[&quot;producer&quot;] = {&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;} # What can you change to make sure there are no duplicate producers? # We can use a set to make sure that there are no duplicate producers as a set must have unique values. # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # If we were to add an additional genre to the dictionary like electropop we would have to have to append electropop to the list of genres. # lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # Printing the dictionary print(lover_album[&quot;genre&quot;]) . [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;] . # for k,v in lover_album.items(): # iterate using a for loop for key and value # print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # More readable version of the code above for k,v in lover_album.items(): if k == &quot;tracks&quot;: for k,v in v.items(): print(str(k) + &quot;: &quot; + str(v)) else: print(str(k) + &quot;: &quot; + str(v)) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;] 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week28/2023/03/29/DS-hashmaps.html",
            "relUrl": "/week28/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Big Idea 2 Quiz Corrections",
            "content": "Score . I had scored a score 25/25 or 100% on the quiz however there were still some questions that I had some difficulty with. | . Reflection Questions . The first question I had some difficulty with was problem one as binary values can be tricky at times however as I realized that as binary is base 2 I was able to plug in 2^value to be able to whittle down the options. | . . Another question I had some difficulty with was question 25 as again I have difficulties with binary values as when remembering that binary is base 2 and 2^3 power is eight three more digits in binary would increase the value by a power of 8. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week27/2023/03/27/BigIdea2Quiz.html",
            "relUrl": "/week27/2023/03/27/BigIdea2Quiz.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . ? | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): # baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 # baseWidth = 5000 # see the effect of doubling or halfing the baseWidth # baseWidth = 10000 baseWidth = 20000 # baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) pixels: 5,846,448 Scaled size: (20000, 15000) pixels: 300,000,000 -- original image -- . Do you think this is a time complexity or space complexity or both problem? . ? | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . 178 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] [999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851, 850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794, 793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 746, 745, 744, 743, 742, 741, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 713, 712, 711, 710, 709, 708, 707, 706, 705, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 681, 680, 679, 678, 677, 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 662, 661, 660, 659, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 634, 633, 632, 631, 630, 629, 628, 627, 626, 625, 624, 623, 622, 621, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 606, 605, 604, 603, 602, 601, 600, 599, 598, 597, 596, 595, 594, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574, 573, 572, 571, 570, 569, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . Example of Matrix Multiplication . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) #print(fibonacci(30)) print(fibonacci(40)) . 102334155 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets numbers1k = list(range(1000)) print(generate_subsets([1,2,3])) print (generate_subsets([numbers1k])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999]], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(40)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 1.3453621864318848 seconds 102334155 Time taken: 23.74188256263733 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? Time and space complexity is important when choosing an algorithm is if the time an algorithm takes to run it too long for the amount to data that is needed to be processed it would make the algorithm unfit for that task and similarly is the space complexity is too large it would make the algorithm take up too much memory and make it unfit for the task. So based on the needs of the task the time and space complexity should be altered accordingly as if for instance if an algorithm that takes up less time but more memory when there is a surplus of memory and time is key would lead to a better fit for a specific use case. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? No, as there are many different use cases where constant time algorithms are impossible to solve a specific problem and thus make them not abel to solve a specific problem. The use of an exponential time complexity algorithm may be useful when it is the only solution to a problem or that there are other trade offs involved between a less time intensive solution such as accuracy or memory usage. So when factoring the exact needs of a problem the specific algorithm should be chosen based on the needs of the problem and what trade offs are acceptable. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? Some general patterns that I noticed to determine each algorithm&#39;s space and time complexity is that for instance when there are nested for loops there would mostly like a quadratic time complexity and when there are recursive functions there would most likely be a exponential time complexity. Also when there are multiple nested for loops there would most likely be a exponential time complexity. Using these patterns a programs time complexity can be determined and similarly we can look at how variables are assigned and how they are altered to be able to determine the space complexity of an algorithm. | . | . Complete the Time and Space Complexity analysis questions linked below. Practice . Notes . Big O is a notation for time complexity. Known as Big O notation | O(n) is one for loop where you change everything such as the grayscale algorithm | O(1) no matter how large the algorithm is, it will always take the same amount of time to run | O(n^2) is a nested for nested loops, doing the same thing twice ### Space | Space requires creating space for a new value. | The first binary exponent that is greater than 263 is is 512 which is 2^9 power the maximum amount needed to try that in a binary algorithm is 9. | . Question 1 . from random import random a = 0 b = 0 for i in range(N): a = a + random() for i in range(M): b= b + random() . The answer is option 3 O(N + M) time, O(1) space, as the program with the two different values are independent of each other so the time complexity has to be O(N+M) and the space complexity is 0(1) as the size of the variables doesn&#39;t change based on the size of the input. . Question 2 . a = 0; for i in range(N): for j in reversed(range(i,N)): a = a + i + j; . The answer is option 4 as the time complexity is O(N^2) as due to the nested for loop as the second operation has to be run for every value of N. . Question 3 . k = 0; for i in range(n//2,n): for j in range(2,n,pow(2,j)): k = k + n / 2; . The time complexity is O(nLogn) as the value for J doubles till it is equal to or less than N and it be halved till it is the same value as N making option 2 the correct answer. . Question 4 . What does it mean when we say that an algorithm X is asymptotically more efficient than Y? Options: X will always be a better choice for small inputs X will always be a better choice for large inputs Y will always be a better choice for small inputs X will always be a better choice for all inputs . X will always be a better choice for small inputs as it will perform with less time when dealing with more data. . Question 5 . a = 0 i = N while (i &gt; 0): a += i i //= 2 . The loop in the code runs until i becomes zero. In each iteration of the loop, the value of a is incremented by the value of i, and the value of i is halved using integer division (i //= 2). Since i is divided by 2 in each iteration, the loop will execute log N times before i becomes zero. Thus making the time complexity O(log N) for this algorithm. . Question 6 . Which of the following best describes the useful criterion for comparing the efficiency of algorithms? 1. Time 2. Memory 3. Both of the above 4. None of the above . The Answer is both as space and time complexity need to be considered when choosing an algorithm and thus determining the efficiency of the algorithm. . Question 7 . How is time complexity measured? By counting the number of algorithms in an algorithm. By counting the number of primitive operations performed by the algorithm on a given input size. By counting the size of data input to the algorithm. None of the above . The answer to the problem is option 2 as the way to find time complexity is by determining the operations an algorithm performs and thus find the time complexity. . Question 8 . for i in range(n): i=i*k . The program has a time complexity of O(logk(n)) (option 3) as the loop runs for k^n-1 times due to the range and then raising that value to the value for i. . Question 9 . value = 0; for i in range(n): for j in range(i): value=value+1 . The answer is option 3 as the time complexity is O(n-1) as the for loop inside the outer loop only runs for n-1 times while the outer one runs for n times making the complexity have to bee O(n-1). . Question 10 . Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A. 1. True 2. False . The answer is False as that algorithm with O(n) time coplexity may perform better than the O(logn) algorithm for values that are less than n^0. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week27/2023/03/22/DS-space_time_complexity.html",
            "relUrl": "/week27/2023/03/22/DS-space_time_complexity.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - A database schema is a blueprint or a plan for the database. It defines how the data is organized and how the relations among them are associated. It also defines the constraints on the data, the functions and operations that can be applied to the data. . What is the purpose of identity Column in SQL database? The identity column is a column that is automatically incremented by 1 for each new row added to the table. It is used to uniquely identify each row in the table. | . | What is the purpose of a primary key in SQL database? The Purpose of a primary key in SQL database is to uniquely identify each row in a table. A primary key must contain unique values, and cannot contain NULL values. | . | What are the Data Types in SQL table? The datatypes in an SQL table are: Integer: Integer is a data type that stores whole numbers. | Real: Real is a data type that stores floating point numbers. | Text: Text is a collection of characters stored as a single entity in a database management system. | Blob: Binary Large Object (BLOB) is a collection of binary data stored as a single entity in a database management system. | Null: A null value is a special value that indicates that a value is missing or unknown. | . | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? A connection object is an object that is used to create a unique session that connects to a database. Which contains all the methods needed to alter, view, and change the data within the database and it is used to create a cursor object that is used to execute SQL statements. | . | Same for cursor object? A cursor object is an object that is used to execute SQL statements. It is used to fetch data from a table within a database along with other operations. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? The attributes of the conn object are the methods that are used to connect to the database. The attributes of the cursor object are the methods that are used to execute SQL statements. | . | Is &quot;results&quot; an object? How do you know? Yes, results is an object. It contains data and functions that is related to the object. | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$oaO7LlrKnCQ4oYQS$8e5cda4490dfc9b8bc0d5444c219e3a0e2b6da2a2f603d40872090f73b709687&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$sLpv3nJlSCHNgXAt$c771c34e2ccde377c49f78a4979fd5cef4fcfc0002aed013debf4e3a6b308dbf&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$ZIvTO96vIwLgxPCA$71928b9d17d43d1e94541581f0586590b29ea09e68326e990e3ba4c434a28e82&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$Jpr2YeMTQiiSLqQZ$795ef584b38771ad4d5e60bb1a4d774774c2572c29f10a74ef12f0ca4c4fde80&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$Oa8VvLeSss17Um0k$d6c373c4ae390ced4d742fba0d105cbde90be4acd1a1ed2352479d31d6f251fa&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$pPCmYxzfpVzGYBw7$edbf4e97434f7fffa20655b0563224c7261b6a56ca9883192bda1553b28904f8&#39;, &#39;1921-10-21&#39;) (7, &#39;69&#39;, &#39;gamer&#39;, &#39;sha256$2OpadBnF8RJJpiMe$698fd3b7f8efb64c885ae5c0d0cfdebc8f707e911e256019418caa16a1eaa2e7&#39;, &#39;2023-03-15&#39;) (8, &#39;Berry&#39;, &#39;Duumple&#39;, &#39;Truffles&#39;, &#39;20017-07-06&#39;) (9, &#39;Cookie&#39;, &#39;Doggo&#39;, &#39;Tasty&#39;, &#39;1980-02-13&#39;) (10, &#39;Shmumples&#39;, &#39;President&#39;, &#39;Official&#39;, &#39;1976-06-13&#39;) (11, &#39;Petta&#39;, &#39;Chef&#39;, &#39;password&#39;, &#39;1400-01-13&#39;) (12, &#39;Mint&#39;, &#39;Banker&#39;, &#39;CompletlyLegal&#39;, &#39;1000-12-11&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? The implementation in the imperative method is simpler to implement and understand because it is more straightforward. The implementation in the object-oriented method is more complex because it is more abstract however requires less code to implement. Due to more complex operations being abstracted away it requires less knowledge of the underlying implementation. | . | Explain purpose of SQL INSERT. Is this the same as User init? The purpose of SQL INSERT is to add a new row to a table. It is the same as User init because it is used to create the equivalent of a new user object. | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . Error while executing the INSERT: UNIQUE constraint failed: users._uid . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? The hacked part is if a user&#39;s password is less than 2 letters a it seen as a hack and new password is assigned to the user. | . | Explain try/except, when would except occur? The try/except is used to catch errors that occur in the try block. The except block is executed when an error occurs in the try block. | . | What code seems to be repeated in each of these examples to point, why is it repeated? The code conn.cursor() is repeated in each of these examples to point because it is used to create a cursor object that is used to execute SQL statements. Along with cursor.execute() which is used to execute SQL statements and conn.commit() which is used to commit the changes to the database. | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes, delete is a dangerous operations because the deleted data cannot be restored | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? Id the password is less than 2 letters then it is seen as a hack and the password is reset to a new password. | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? The menu repeats as it uses recursion to call itself. So that once the function has finished executing it will call itself again. | . | Could you refactor this menu? Make it work with a List? | . def listMenu(): while True: operations = [&quot;c&quot;,&quot;r&quot;,&quot;u&quot;,&quot;d&quot;,&quot;s&quot;] inputs = input(&quot;Enter operation to perform (c)reate, (r)ead, (u)pdate, (d)elete, (s)chema&quot;).strip().lower() if inputs in operations: if inputs == &quot;c&quot;: create() listMenu() if inputs == &quot;r&quot;: read() listMenu() if inputs == &quot;u&quot;: update() listMenu() if inputs == &quot;d&quot;: delete() listMenu() if inputs == &quot;s&quot;: schema() listMenu() if inputs not in operations and not KeyboardInterrupt: print(&quot;Invalid operation&quot;) if KeyboardInterrupt: break listMenu() . A new user record Looser has been created . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? Yes, as functions are used to hide the details of the implementation to be able hide complex details from the user making the operations simpler to use. | . | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. Yes, we see data abstraction through the use of the database to store the data within our database and then to be able to perform operations on the data within the database. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. Program was done in the OOP style. | . | . | . Reference... sqlite documentation . Notes . What is an abstraction? An abstraction is veiling something in order to make something simpler such as classes and functions. | . | What is SQL? SQL or Structured Query Language is a language used to communicate with databases. When using sql you are able to create, read, update, and delete data from a database. SQLAlchemy abstracts commands in SQL however as a result of this we cannot see the actual effects of what happens in SQL itself. | . | The most commonly used query in SQL is called select, they will look similar but the command in the middle will be different. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week26/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/week26/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . Debugging Flask Object . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Invalid date 6942-25-66 require YYYY-mm-dd, date defaulted to 03-14-2023 Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;LOl &#39;, &#39;uid&#39;: &#39;jerry&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;LOl &#39;, &#39;uid&#39;: &#39;jerry&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . We need routing and need to define attributes and methods for the flask app object | Creating the class defined the attributes we want in the user | Inheriting from the database model allows us to use the database methods | Init method instantiates the object | Having setters and getters allow you to change and receive data from the inside of teh an object, can change the initialized value | Need to have common methods such as create, read, update, delete to have basic functionality and manipulation with the database which help us - interact with the data in the object | Inside a class we can help solve problems a specific problem with your data | Inside an object you can see the data being populated | Sql Alchemy is an object relational model ORM that works with databases in python which we can use to query things from the database | Used to have checks such as those for a matching username and password | Important to run locally as you don&#39;t need all the stuff from others to run your code | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///computers.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Computers(db.Model): __tablename__ = &#39;computers&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=True, nullable=False) _graphics = db.Column(db.String(255), unique=False, nullable=False) _CPU = db.Column(db.String(255), unique=False, nullable=False) _price = db.Column(db.Integer, unique=False, nullable=False) _RAM = db.Column(db.Integer, unique=False, nullable=False) _storage = db.Column(db.Integer, unique=False, nullable=False) _OS = db.Column(db.String(255), unique=False, nullable=False) _brand = db.Column(db.String(255), unique=False, nullable=False) _year = db.Column(db.Integer, unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, graphics, CPU, price, RAM, storage, OS, brand, year): self._name = name # variables with self prefix become part of the object, self._graphics = graphics self._CPU = CPU self._price = price self._RAM = RAM self._storage = storage self._OS = OS self._brand = brand self._year = year # a name getter method, extracts name from object @property def name(self): return self._name # a name setter method, sets name in object @name.setter def name(self, name): self._name = name # a graphics getter method, extracts graphics from object @property def graphics(self): return self._graphics # a graphics setter method, sets graphics in object @graphics.setter def graphics(self, graphics): self._graphics = graphics # a CPU getter method, extracts CPU from object @property def CPU(self): return self._CPU # a CPU setter method, sets CPU in object @CPU.setter def CPU(self, CPU): self._CPU = CPU # a price getter method, extracts price from object @property def price(self): return self._price # a price setter method, sets price in object @price.setter def price(self, price): self._price = price # a RAM getter method, extracts RAM from object @property def RAM(self): return self._RAM # a RAM setter method, sets RAM in object @RAM.setter def RAM(self, RAM): self._RAM = RAM # a storage getter method, extracts storage from object @property def storage(self): return self._storage # a storage setter method, sets storage in object @storage.setter def storage(self, storage): self._storage = storage # a OS getter method, extracts OS from object @property def OS(self): return self._OS # a OS setter method, sets OS in object @OS.setter def OS(self, OS): self._OS = OS # a brand getter method, extracts brand from object @property def brand(self): return self._brand # a brand setter method, sets brand in object @brand.setter def brand(self, brand): self._brand = brand # a year getter method, extracts year from object @property def year(self): return self._year # a year setter method, sets year in object @year.setter def year(self, year): self._year = year # a method to return a dictionary of the object def to_dict(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;graphics&quot;: self.graphics, &quot;CPU&quot;: self.CPU, &quot;price&quot;: self.price, &quot;RAM&quot;: self.RAM, &quot;storage&quot;: self.storage, &quot;OS&quot;: self.OS, &quot;brand&quot;: self.brand, &quot;year&quot;: self.year, } # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None def check_price(self): if self.price &gt; 1000: return True else: return False # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;graphics&quot;: self.graphics, &quot;CPU&quot;: self.CPU, &quot;price&quot;: self.price, &quot;RAM&quot;: self.RAM, &quot;storage&quot;: self.storage, &quot;OS&quot;: self.OS, &quot;brand&quot;: self.brand, &quot;year&quot;: self.year, } # CRUD update: updates user name, password, phone # returns self def update(self, name, graphics, CPU, price, RAM, storage, OS, brand, year): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(graphics) &gt; 0: self.graphics = graphics if len(CPU) &gt; 0: self.CPU = CPU if price &gt; 0: self.price = price if RAM &gt; 0: self.RAM = RAM if storage &gt; 0: self.storage = storage if len(OS) &gt; 0: self.OS = OS if len(brand) &gt; 0: self.brand = brand if len(year) &gt; 0: self.year = year db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initComputers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; c1 = Computers(name=&#39;MacBook Pro&#39;, graphics=&#39;Intel Iris Plus Graphics 645&#39;, CPU=&#39;2.3GHz 8-core 9th-generation Intel Core i9 processor, Turbo Boost up to 4.8GHz&#39;, price=2799, RAM=32, storage=1024, OS=&#39;macOS Catalina&#39;, brand=&#39;Apple&#39;, year=&#39;2019&#39;) c2 = Computers(name=&quot;Dell XPS 13&quot;, graphics=&quot;Intel UHD Graphics 620&quot;, CPU=&quot;2.8GHz 8th Generation Intel Core i7-8565U Processor&quot;, price=1299, RAM=16, storage=512, OS=&quot;Windows 10 Home&quot;, brand=&quot;Dell&quot;, year=&quot;2019&quot;) c3 = Computers(name=&#39;Hp Dragonfly&#39;, graphics=&#39;Intel UHD Graphics&#39;, CPU=&#39;Intel i3-1215U&#39;, price=1039.00, RAM=16, storage=512, OS=&#39;Windows 10 Home&#39;, brand=&#39;Hp&#39;, year=&#39;2019&#39;) c4 = Computers(name=&#39;Gigabyte Aero 15 Oled 4k&#39;, graphics=&#39;3060&#39;, CPU=&#39;i7 11 gen&#39;, price =1440, RAM = 16, storage =512, OS = &#39;Windows 10&#39;,brand = &#39;Gigabyte&#39;, year = &#39;2020&#39;) c5 = Computers(name=&#39;MacBook Air&#39;, graphics=&#39;Intel UHD&#39;, CPU=&#39;intel i5&#39;, price =1220, RAM = 8, storage =256, OS = &#39;Mac OS&#39;,brand = &#39;Apple&#39;, year = &#39;2020&#39;) c6 = Computers(name=&#39;Lenovo Thinkpad X1 Extreme&#39;, graphics=&#39;Nvidia Quadro P2000&#39;, CPU=&#39;Intel Core i7-9750H&#39;, price =2000, RAM = 16, storage =512, OS = &#39;Windows 10&#39;,brand = &#39;Lenovo&#39;, year = &#39;2020&#39;) c7 = Computers(name=&quot;Acer Nitro 5&quot;, graphics=&quot;Nvidia GeForce RTX 3070ti&quot;, CPU=&quot;Intel Core i7-12700H&quot;, price=3, RAM=32, storage=2048, OS=&quot;Windows 11 Home&quot;, brand=&quot;Acer&quot;, year=&quot;2022&quot;) Comps = [c1, c2, c3, c4, c5, c6, c7] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for Computer in Comps: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = Computer.create() print(f&quot;Created new record {Computer.name}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {Computer.name}, or error.&quot;) initComputers() # SQLAlchemy extracts single user from database matching User ID def name(name): with app.app_context(): computer = Computers.query.filter_by(_name=name).first() return computer # returns user object . Created new record MacBook Pro Created new record Dell XPS 13 Created new record Hp Dragonfly Created new record Gigabyte Aero 15 Oled 4k Created new record MacBook Air Created new record Lenovo Thinkpad X1 Extreme Created new record Acer Nitro 5 . def create(): # optimize user time to see if uid exists name = input(&quot;Enter the name of your computer:&quot;) graphics = input(&quot;Enter the graphics of your computer:&quot;) CPU = input(&quot;Enter the CPU of your computer:&quot;) price = input(&quot;Enter the price of your computer (integer):&quot;) price = int(price) RAM = input(&quot;Enter the RAM of your computer (integer):&quot;) RAM = int(RAM) storage = input(&quot;Enter the storage of your computer (integer):&quot;) storage = int(storage) OS = input(&quot;Enter the OS of your computer:&quot;) brand = input(&quot;Enter the brand of your computer:&quot;) year = input(&quot;Enter the year of your computer:&quot;) # Initialize User object before date comp = Computers(name=name, graphics=graphics, CPU=CPU, price=price, RAM=RAM, storage=storage, OS=OS, brand=brand, year=year) # write object to database with app.app_context(): try: object = comp.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error occurred, or duplicate data.&quot;) create() . Created {&#39;id&#39;: 11, &#39;name&#39;: &#39;apple 2e&#39;, &#39;graphics&#39;: &#39;apple special&#39;, &#39;CPU&#39;: &#39;old&#39;, &#39;price&#39;: 1231342341, &#39;RAM&#39;: 12, &#39;storage&#39;: 12, &#39;OS&#39;: &#39;MacOs&#39;, &#39;brand&#39;: &#39;Apple&#39;, &#39;year&#39;: 1000} . def read(): with app.app_context(): table = Computers.query.all() json_ready = [computer.read() for computer in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 2, &#39;name&#39;: &#39;Dell XPS 13&#39;, &#39;graphics&#39;: &#39;Intel UHD Graphics 620&#39;, &#39;CPU&#39;: &#39;2.8GHz 8th Generation Intel Core i7-8565U Processor&#39;, &#39;price&#39;: 1299, &#39;RAM&#39;: 16, &#39;storage&#39;: 512, &#39;OS&#39;: &#39;Windows 10 Home&#39;, &#39;brand&#39;: &#39;Dell&#39;, &#39;year&#39;: 2019}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Hp Dragonfly&#39;, &#39;graphics&#39;: &#39;Intel UHD Graphics&#39;, &#39;CPU&#39;: &#39;Intel i3-1215U&#39;, &#39;price&#39;: 1039, &#39;RAM&#39;: 16, &#39;storage&#39;: 512, &#39;OS&#39;: &#39;Windows 10 Home&#39;, &#39;brand&#39;: &#39;Hp&#39;, &#39;year&#39;: 2019}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Gigabyte Aero 15 Oled 4k&#39;, &#39;graphics&#39;: &#39;3060&#39;, &#39;CPU&#39;: &#39;i7 11 gen&#39;, &#39;price&#39;: 1440, &#39;RAM&#39;: 16, &#39;storage&#39;: 512, &#39;OS&#39;: &#39;Windows 10&#39;, &#39;brand&#39;: &#39;Gigabyte&#39;, &#39;year&#39;: 2020}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;MacBook Air&#39;, &#39;graphics&#39;: &#39;Intel UHD&#39;, &#39;CPU&#39;: &#39;intel i5&#39;, &#39;price&#39;: 1220, &#39;RAM&#39;: 8, &#39;storage&#39;: 256, &#39;OS&#39;: &#39;Mac OS&#39;, &#39;brand&#39;: &#39;Apple&#39;, &#39;year&#39;: 2020}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Lenovo Thinkpad X1 Extreme&#39;, &#39;graphics&#39;: &#39;Nvidia Quadro P2000&#39;, &#39;CPU&#39;: &#39;Intel Core i7-9750H&#39;, &#39;price&#39;: 2000, &#39;RAM&#39;: 16, &#39;storage&#39;: 512, &#39;OS&#39;: &#39;Windows 10&#39;, &#39;brand&#39;: &#39;Lenovo&#39;, &#39;year&#39;: 2020}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Acer Nitro 5&#39;, &#39;graphics&#39;: &#39;Nvidia GeForce RTX 3070ti&#39;, &#39;CPU&#39;: &#39;Intel Core i7-12700H&#39;, &#39;price&#39;: 3, &#39;RAM&#39;: 32, &#39;storage&#39;: 2048, &#39;OS&#39;: &#39;Windows 11 Home&#39;, &#39;brand&#39;: &#39;Acer&#39;, &#39;year&#39;: 2022}, {&#39;id&#39;: 9, &#39;name&#39;: &#39;Acer Chromebook 516 GE&#39;, &#39;graphics&#39;: &#39;potato&#39;, &#39;CPU&#39;: &#39;potato&#39;, &#39;price&#39;: 1, &#39;RAM&#39;: 1, &#39;storage&#39;: 1, &#39;OS&#39;: &#39;worse&#39;, &#39;brand&#39;: &#39;asdf&#39;, &#39;year&#39;: 120}, {&#39;id&#39;: 10, &#39;name&#39;: &#39;MacBook Pro&#39;, &#39;graphics&#39;: &#39;Intel Iris Plus Graphics 645&#39;, &#39;CPU&#39;: &#39;2.3GHz 8-core 9th-generation Intel Core i9 processor, Turbo Boost up to 4.8GHz&#39;, &#39;price&#39;: 2799, &#39;RAM&#39;: 32, &#39;storage&#39;: 1024, &#39;OS&#39;: &#39;macOS Catalina&#39;, &#39;brand&#39;: &#39;Apple&#39;, &#39;year&#39;: 2019}, {&#39;id&#39;: 11, &#39;name&#39;: &#39;apple 2e&#39;, &#39;graphics&#39;: &#39;asdf&#39;, &#39;CPU&#39;: &#39;asdf&#39;, &#39;price&#39;: 14134, &#39;RAM&#39;: 3423, &#39;storage&#39;: 11234, &#39;OS&#39;: &#39;sdfads&#39;, &#39;brand&#39;: &#39;asdf&#39;, &#39;year&#39;: 124}] . def delete(): # Gets the ID DComp = input(&quot;Enter the computer id to be deleted:&quot;) with app.app_context(): # Gets the user through the ID ComputerDelete = Computers.query.get(DComp) if ComputerDelete: # Deletes the user according to its ID number ComputerDelete.delete() print(f&quot;Computer with id {DComp} deleted&quot;) else: # Error message if delete fails print(f&quot;Computer with id {DComp} not found&quot;) delete() . Computer with id 2 deleted . /tmp/ipykernel_2076/934772255.py:6: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9) ComputerDelete = Computers.query.get(DComp) . def update(): name = input(&quot;Enter the name of your computer:&quot;) graphics = input(&quot;Enter the graphics of your computer:&quot;) CPU = input(&quot;Enter the CPU of your computer:&quot;) price = int(input(&quot;Enter the price of your computer (integer):&quot;)) RAM = int(input(&quot;Enter the RAM of your computer (integer):&quot;)) storage = int(input(&quot;Enter the storage of your computer (integer):&quot;)) OS = input(&quot;Enter the OS of your computer:&quot;) brand = input(&quot;Enter the brand of your computer:&quot;) year = input(&quot;Enter the year of your computer:&quot;) if len(name) &lt;= 0: return {&quot;error&quot;: &quot;Name is required&quot;} if len(graphics) &lt;= 0: return {&quot;error&quot;: &quot;Graphics is required&quot;} if len(CPU) &lt;= 0: return {&quot;error&quot;: &quot;CPU is required&quot;} if price &lt;= 0: return {&quot;error&quot;: &quot;Price is required&quot;} if RAM &lt;= 0: return {&quot;error&quot;: &quot;RAM is required&quot;} if storage &lt;= 0: return {&quot;error&quot;: &quot;Storage is required&quot;} if len(OS) &lt;= 0: return {&quot;error&quot;: &quot;OS is required&quot;} if len(brand) &lt;= 0: return {&quot;error&quot;: &quot;Brand is required&quot;} if len(year) &lt;= 0: return {&quot;error&quot;: &quot;Year is required&quot;} with app.app_context(): # Gets the user through the ID ComputerUpdate = Computers.query.filter_by(_name=name).first() if ComputerUpdate: ComputerUpdate.update(name=name, graphics=graphics, CPU=CPU, price=price, RAM=RAM, storage=storage, OS=OS, brand=brand, year=year) print(f&quot;Computer with id {name} updated&quot;) else: # Error message if delete fails print(f&quot;Computer with id {name} not found&quot;) update() . Computer with id apple 2e updated . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Computer with id apple 2e updated .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week26/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/week26/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 696969696420], &quot;duration&quot;: [50, 40, 45, 12] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot; n-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 696969696420 12 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 696969696420 12 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot; n--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;-Duration Top 10&quot;) print(df.head(10)) print(&quot; n-Duration Bottom 10&quot;) print(df.tail(10)) . -Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 -Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests . def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() . # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths . fetch() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( . Hacks . Done as Group | . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/winequality-red.csv&#39;).sort_values(by=[&#39;density&#39;], ascending=False) # The values of the wines and their qaulites print(&quot;Quality Disribution of Wines&quot;) print(df[&#39;quality&#39;].value_counts()) # Average Quality of Wines print(&quot; nAverage Quality of Wines&quot;) print(df[&#39;quality&#39;].mean()) # Qaulity of Wines compared to their Alcohol Content print(&quot; n Quality of Wines compared to their Alcohol Content&quot;) print(df[[&#39;quality&#39;,&#39;alcohol&#39;]].groupby([&#39;quality&#39;]).mean()) . Quality Disribution of Wines 5 681 6 638 7 199 4 53 8 18 3 10 Name: quality, dtype: int64 Average Quality of Wines 5.6360225140712945 Quality of Wines compared to their Alcohol Content alcohol quality 3 9.955000 4 10.265094 5 9.899706 6 10.629519 7 11.465913 8 12.094444 . print(&quot; n Quality of Wines compared to their Ph Content&quot;) print(df[[&#39;quality&#39;,&#39;pH&#39;]].groupby([&#39;quality&#39;]).mean()) . Quality of Wines compared to their Ph Content pH quality 3 3.398000 4 3.381509 5 3.304949 6 3.318072 7 3.290754 8 3.267222 . import pandas as pd # Calculate averages for all attributes avg_quality = df[&#39;quality&#39;].mean() avg_ph = df[&#39;pH&#39;].mean() avg_alcohol = df[&#39;alcohol&#39;].mean() avg_density = df[&#39;density&#39;].mean() avg_fixed_acidity = df[&#39;fixed acidity&#39;].mean() avg_volatile_acidity = df[&#39;volatile acidity&#39;].mean() avg_citric_acid = df[&#39;citric acid&#39;].mean() avg_residual_sugar = df[&#39;residual sugar&#39;].mean() avg_chlorides = df[&#39;chlorides&#39;].mean() avg_free_sulfur_dioxide = df[&#39;free sulfur dioxide&#39;].mean() avg_total_sulfur_dioxide = df[&#39;total sulfur dioxide&#39;].mean() avg_sulphates = df[&#39;sulphates&#39;].mean() # Create a DataFrame from the averages df_avg = pd.DataFrame({ &#39;Attribute&#39;: [&#39;Quality&#39;, &#39;pH&#39;, &#39;Alcohol&#39;, &#39;Density&#39;, &#39;Fixed Acidity&#39;, &#39;Volatile Acidity&#39;, &#39;Citric Acid&#39;, &#39;Residual Sugar&#39;, &#39;Chlorides&#39;, &#39;Free Sulfur Dioxide&#39;, &#39;Total Sulfur Dioxide&#39;, &#39;Sulphates&#39;], &#39;Average Value&#39;: [avg_quality, avg_ph, avg_alcohol, avg_density, avg_fixed_acidity, avg_volatile_acidity, avg_citric_acid, avg_residual_sugar, avg_chlorides, avg_free_sulfur_dioxide, avg_total_sulfur_dioxide, avg_sulphates] }) average = df_avg.to_string(index=False) # Print the DataFrame print(&quot;Average Wine&quot;) print(average) . Average Wine Attribute Average Value Quality 5.636023 pH 3.311113 Alcohol 10.422983 Density 0.996747 Fixed Acidity 8.319637 Volatile Acidity 0.527821 Citric Acid 0.270976 Residual Sugar 2.538806 Chlorides 0.087467 Free Sulfur Dioxide 15.874922 Total Sulfur Dioxide 46.467792 Sulphates 0.658149 .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week25/2023/03/09/AP-unit2-3.html",
            "relUrl": "/week25/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": ". Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? Some commands that allow you to access files from the terminal are commands like, ls, cd, grep, and cat. With ls being the command that allows you to see the files in the directory that you are currently in. Cd is the command that allows you to change directories. Grep is the command that allows you to search for a specific word in a file. Cat is the command that allows you to see the contents of a file. | What are the command you use in Windows terminal to access files? Some commands like dir, cd, find, and type are used to access files in the windows terminal. Dir is the command that allows you to see the files in the directory that you are currently in. Cd is the command that allows you to change directories. Find is the command that allows you to search for a specific word in a file. Type is the command that allows you to see the contents of a file. | What are some of the major differences? The major differences are the names of the commands but their functionality is the same. | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? Path is a big deal when working with images because it is the way that the computer knows where to find the image. If the path is wrong, the computer will not be able to find the image and will not be able to display it. Also the different operating systems have different ways of writing the path, so if you are working on a mac and you try to run the code on a windows computer, it will not work because the path is written differently. | How does the meta data source and label relate to Unit 5 topics? The meta data is the data that associated with the image which can be used to identify the image. The source is the location of the image and the label is the name of the image. This relates to unit 5 as this data may be used for greater functionality such as knowing things like the location where it was taken, who took it, etc. | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? As it allows you to display images as the output of a cell. This is interesting as it allows you to view the changes being made to the image in real time. | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? Binary is a numbering system that uses only two digits, 0 and 1, to represent numbers. In computers, binary is used to represent data and instructions using electrical signals, where a &quot;0&quot; is represented by no electrical signal and a &quot;1&quot; is represented by an electrical signal. Hexadecimal is also a numbering system that uses 16 digits, 0 to 9 and A to F, to represent numbers. It is often used in computing as a shorthand for binary, as one hexadecimal digit can represent four binary digits. They are similar in the fact that they are both numbering systems. They are different in the fact that they use different digits to represent numbers. . Translate first 3 letters of your name to Base64. The first three letters of my name &quot;tir&quot; in hexadecimal is 746972 | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? I have been a consumer of buffering on large streaming platforms such as the likes of Youtube, Spotify, Amazon Prime, etc. This is because these platforms have a lot of data that needs to be sent to the user and it takes time for the data to be sent. | From your consumer experience, what effects have you experienced from buffering? The video will play in chunks with a pause in between each chunk as the platform is getting additional data. But this also allows for poor connection at times to not effect playback of the content. | How do these effects apply to images? The effects of buffering apply to images in the same way that they apply to videos. The image will be displayed in chunks with portions of the image loading in before others until the entire images can be displayed. | . text = &quot;tir&quot; hex_text = text.encode(&quot;utf-8&quot;).hex() print(hex_text) . 746972 . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? Yes the program appears as if there are some original steps such as resizing the image and then applying a series of steps then being able to shift the image from color to grey scale. | Describe Grey Scale algorithm in English or Pseudo code? This grayscale algorithm takes a color image represented as a numpy array where each pixel contains an RGB tuple (3 values per pixel) or an RGBA tuple (4 values per pixel), and converts it into a grayscale image. For each pixel, the algorithm takes the average of the three RGB values (or four values for RGBA) and sets each value in the tuple to that average value. This process results in a gray pixel value for each pixel, where the same gray pixel value is assigned to each of the RGB channels in the resulting grayscale image.Finally, the resulting grayscale image is converted to a PIL image and encoded as a base64 string, which can be displayed in a Jupyter Notebook or a web page. | Describe scale image? What is before and after on pixels in three images? The pixels between the original and the scaled image are the same with both images having a height scale of 1 and length of 340px. The scale image function keeps the height the same and then sets the length to 340px. | Is scale image a type of compression? If so, line it up with College Board terms described? No as no data is being compressed as there is no type of compression algorithm is being used. Such as changing between lossy and lossless image formats. The image is just being resized. | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . Hacks . Pixel Manipulation . import numpy as np from PIL import Image as pilImage import matplotlib.pyplot as plt # Load image file into numpy array image = pilImage.open(&#39;images/doggo.jpg&#39;) image_array = np.array(image) # Find all black pixels and set them to green black_pixels = np.where(np.all(image_array == [0, 0, 0], axis=-1)) # Find all black pixels image_array[black_pixels] = [0, 255, 0] # Set black pixels to green # Save the modified image to a new file modified_image = pilImage.fromarray(image_array) modified_image.save(&#39;images/newdoggo.jpg&#39;) # Create a figure with two subplots fig, axs = plt.subplots(1, 2) # Plot the original image in the first subplot axs[0].imshow(image) axs[0].set_title(&#39;Original Image&#39;) # Plot the modified image in the second subplot axs[1].imshow(image_array) axs[1].set_title(&#39;Modified Image&#39;) # Show the plot plt.show() . import numpy as np from PIL import Image import matplotlib.pyplot as plt # Load image file into numpy array doggo = Image.open(&#39;images/doggo.jpg&#39;) image_array = np.array(doggo) # Set the green and blue color channels to zero image_array[:, :, 1] = 0 # Set the green channel to zero image_array[:, :, 2] = 0 # Set the blue channel to zero # Save the red-scale image to a new file red_doggo = Image.fromarray(image_array) red_doggo.save(&#39;images/red_doggo.jpg&#39;) fig, axs = plt.subplots(1, 2) # Plot the original image in the first subplot axs[0].imshow(doggo) axs[0].set_title(&#39;Orginal Image&#39;) # Plot the modified image in the second subplot axs[1].imshow(image_array) axs[1].set_title(&#39;Redscale Image&#39;) # Show the plot for the comparison plt.show() . Ap Prep . Images that will result in lossy compression are file formats along the likes of jpg, and images that will not result in lossy compression are lossless file formats such as the likes png. Which would mean that images in the jpg file format will be smaller in size than the images in the png file format as data is lost during compression. | . . from PIL import Image import os from IPython.display import display from pathlib import Path lossy_size = os.path.getsize(&quot;images/image_compressed_lossy.jpg&quot;) lossless_size = os.path.getsize(&quot;images/image_compressed_lossless.png&quot;) # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Unit 2 Vocab&quot;, &#39;label&#39;: &quot;Lossy Compression&quot;, &#39;file&#39;: &quot;image_compressed_lossy.jpg&quot;}, {&#39;source&#39;: &quot;Unit 2 Vocab&quot;, &#39;label&#39;: &quot;Lossless Compression&quot;, &#39;file&#39;: &quot;image_compressed_lossless.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: # Print the label of the image print(f&quot;{image[&#39;source&#39;]} - {image[&#39;label&#39;]}&quot;) # Load the image file and display it img = Image.open(image[&#39;filename&#39;]) # Display the image display(img) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # printing the size of the images print(f&quot;Size of the lossy image: {lossy_size} bytes n&quot;) print(f&quot;Size of the lossless image: {lossless_size} bytes n&quot;) # display default images from image_data() default_images = image_data() image_display(default_images) . Size of the lossy image: 106523 bytes Size of the lossless image: 803895 bytes Unit 2 Vocab - Compressed . Unit 2 Vocab - Uncompressed . import os from PIL import Image as pilImage from matplotlib import pyplot as plt from pathlib import Path # Opens the image file same one as before with pilImage.open(&quot;/home/tirth/vscode/APCSP-Blog/images/Profile.jpg&quot;) as image: # Save the image using lossy JPEG compression image.save(&quot;images/image_compressed_very_lossy.jpg&quot;, &quot;JPEG&quot;, quality=1) # Save the image using lossless PNG compression image.save(&quot;images/image_compressed_lossless_2.png&quot;, &quot;PNG&quot;) # Prints the file sizes print(f&quot;Lossy image size: {lossy_size} bytes&quot;) print(f&quot;Lossless image size: {lossless_size} bytes&quot;) def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Unit 2 Vocab&quot;, &#39;label&#39;: &quot;Compressed&quot;, &#39;file&#39;: &quot;image_compressed_very_lossy.jpg&quot;}, {&#39;source&#39;: &quot;Unit 2 Vocab&quot;, &#39;label&#39;: &quot;Uncompressed&quot;, &#39;file&#39;: &quot;image_compressed_lossless_2.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: # Print the label of the image print(f&quot;{image[&#39;source&#39;]} - {image[&#39;label&#39;]}&quot;) # Load the image file and display it img = Image.open(image[&#39;filename&#39;]) # Display the image display(img) if __name__ == &quot;__main__&quot;: # Get the file sizes of the compressed images lossy_size = os.path.getsize(&quot;images/image_compressed_very_lossy.jpg&quot;) lossless_size = os.path.getsize(&quot;images/image_compressed_lossless_2.png&quot;) # display default images from image_data() default_images = image_data() image_display(default_images) . Lossy image size: 29631 bytes Lossless image size: 803895 bytes Unit 2 Vocab - Compressed . Unit 2 Vocab - Uncompressed . Programming Paradigm . from PIL import Image, ImageFilter # Load the image image = Image.open(&quot;images/Happy.png&quot;) # Apply the blur filter to the image three times for a stronger effect blurred_image = image.filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR).filter(ImageFilter.BLUR) # Display the original and blurred images side by side new_image = Image.new(&#39;RGB&#39;, (image.width * 2, image.height)) new_image.paste(image, (0, 0)) new_image.paste(blurred_image, (image.width, 0)) new_image.show() .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week25/2023/03/07/AP-unit2-2.html",
            "relUrl": "/week25/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Tri 2 Test Corrections",
            "content": "Score . | I had scored a total of 46/50 on this assessment getting a 92%. | . Incorrect Answer 1 . | I had gotten the incorrect answer that the program functioned correctly as not realizing that the program as it was initialized by the first value in the list would add up that element twice thus getting a wrong sum this was due to me not not realizing the program only worked as it began with zero and not an alternate value. This was due to not properly considering the problem and not thinking enough about the for loop. | . Incorrect Answer 2 . | I had gotten this problem incorrect by not properly understanding the nature of the algorithms used to control the robot and thus was unable to understand their exact function and then apply it to the grid. This was due to not properly understanding the problem and considering it with the attention it needed. | . Incorrect Answer 3 . | Through not understanding the logic begin not a or b and c being false. Along with other difficulty in understanding and remembering my boolean operators I was unable to correctly answer this question. This was due to a lack of understanding of the material and unfamiliarity with the content. | . Incorrect Answer 4 . | The reason I got this problem incorrect was that I misunderstood the answer choice thinking that it was one more time not considering that a loop of one would only run once. Thus even after understanding that the program would shift the robot one space up I was still unable to correctly answer the question. This was due to not properly paying attention to the question. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week25/2023/03/06/Tri2TestCorrections.html",
            "relUrl": "/week25/2023/03/06/Tri2TestCorrections.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "N@TM Reflection",
            "content": "N@TM Reflection . . Comp Sci . Trey Blalock - Made a character showcase for videogame with an email database and the ability to sign up for email promos after they have been sent to the database. With pictures of thier planned characters. . | Sarah, Vivian, Shreya, Giannnia - Car finding page, has a car filter page to filter by various parameters, specs page in a quiz format, wishlist to keep cars that are liked by the users. . | Pgk lang /dontavious/team jamal - account creation page, with a personality guide, gives a personality updates database with that data. Garbage collection and the use of a javascript framework. . | Qias, James, Krishiv, Caleb - rental house service, parameter to filter through saved houses, also showed geographical location of houses, can make a schedule of which houses they are viewing . | Justin, Vardaan, navan, sharuya - News based project, tells you what happened on that day and allows users to add data, sports data is also able to be accessed, education database with facts posted and could be updated, another news feature shows latest news. . | Ellie,Haeryn,Kaylee,Theo - Dog adoption page personality matches to a specific dog and finds you a compatible dog, with the ability to add the dog to the cart, blog about personal, dog health diagnosis utility. . | . 3d animation . Doughnuts lots of doughnuts, along with frustration on computers a reflection on modern day society. | . Photo . Images curated by students and pictures of lampposts, birds and a collection of the users custom interests. | . AP Studio Art . A reflection on the emotion and focus on custom art styles and features. In both and 2 and 3d. Level of detail and effort in creation is different and otherworldly from stunning paintings, to digital masterpieces, dogs, travel, a reflection on the way of modern society. | . Ceramics: . Collections of pots and animals, along with creative submissions from wizards, whales, decorative vases and flower pots. Along with spoon sets whatever seems to have been of interest. | . Drawing &amp; Painting . Petals, hand drawn sketches from snowmen to portraits a depiction of the artists emotions and ideas. From wildlife to stamps, posters, truly reflecting the ideas amd desires of students. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week23/2023/02/28/N@TM.html",
            "relUrl": "/week23/2023/02/28/N@TM.html",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "CPT Draft 2",
            "content": "3a CPT Video . 3ai Program Purpose . The purpose of this program is to be able to create a system where user scores are ranked and displayed in a sorted manner based on the user&#39;s score. | . 3aii . The video demonstrates the adding of a score to the scoreboard and then ordering the score to its corresponding location after creating the leader, only if the score is greater than 0. | . 3aiii . The inputs and outputs of this program are the following: Inputs: The user&#39;s name | The user&#39;s score | . | Outputs: Success message indicating creation or telling the user score is 0 | The user&#39;s score&#39;s location being sorted on the scoreboard | . | These metrics prevent the leaderboard from being cluttered with scores that are 0 and creates the corresponding score table for the games that have been played. | . | . 3b . 3bi . leader1 = Leader(username=&#39;sreeja&#39;, score=5) leader2 = Leader(username=&#39;ekam&#39;, score=4) leader3 = Leader(username=&#39;tirth&#39;, score=3) leader4 = Leader(username=&#39;mani&#39;, score=2) leader5 = Leader(username=&#39;user&#39;, score=1) leaders = [leader1, leader2, leader3, leader4, leader5] . 3bii . &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for leader in leaders: try: leader.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {leader.username}&quot;) . 3biii . The name of the list is called leaders which stores 5 Leader objects. The code snippet above shows the use of a for loop to iterate through the list and follow through the create method in the Leader class which adds the Leader to the Leaderboard SQL table. Which contributes the greater functionality of the program this allows for the creation of a database with data which is then used later in the program through the use of SQL alchemy functions to be able to sort the data in the database and thus generate the filtered leaderboard and be accessed via a get request. Along with the user of other functions such as endpoints to be able to access all the scores of a selected Leader via post request specifying the desired Leader. | . 3biv . The data in the list leaders represent the scores that will be added to the leaderboard and then be sorted by their highest scores. | . 3bv . If the list was not used it would make it so that there would for one not be data to sort and search for user scores as there would be no content in the database thus making it so that the inherent functionality of the program would not be able to be used. Along with the fact that if the list was not used the creation of Leader entries. | . 3c . 3ci . class _Score(Resource): def post(self): &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() username = body.get(&#39;username&#39;) score = body.get(&#39;score&#39;) user = User.query.filter((User._username == username)).first # this is checking for garbage data and stopping it if username == &#39;null&#39;: return {&#39;message&#39;: f&#39;error no login&#39;}, 210 if user is False: return {&#39;message&#39;: f&#39;error no user&#39;}, 210 if int(score) is False or int(score) &lt;= 0: return {&#39;message&#39;: f&#39;error no score&#39;}, 210 &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; leader = Leader(username=username, score=score) # create user in database user = leader.create() # success returns json of user if user: return jsonify(user.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {username}, either a format error or score {score} is negative or zero&#39;}, 210 . 3cii . // Get user ID from local storage const userId = localStorage.getItem(&quot;userid&quot;); // Define the endpoint URL const url = &quot;http://localhost:8086/api/leadersfiltered/score&quot;; // Define the request parameters as an object const data = { username: userId, score: matchCounter }; // Define the request options const options = { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify(data) }; // Send the request with fetch() fetch(url, options) .then(response =&gt; { if (!response.ok) { throw new Error(&quot;Network response was not ok&quot;); } return response.json(); }) .then(data =&gt; { console.log(data); }) .catch(error =&gt; { console.error(&quot;There was a problem with the fetch operation:&quot;, error); }); . 3ciii . The procedure is for creating the Leader object through a post request in which the data that is received is the value from the post request that is for the username and score values. Where goes through selection statements that validate is teh user is a valid user and that if the users score is greater than 0. After which it creates a Leader object and then runs the create method which adds the Leader to the Leaderboard SQL table. Here the values are for the values of UserId and that of the matchCounter representing the user&#39;s score these are then used in the call of the function via its api endpoint. | . 3civ . The procedure begins by taking the values from the body of the post request such as the username and score that is sent then the function checks if the user is a valid user and if the score meets the minimum threshold via the selection statements. After which the function creates a Leader object and then runs the create method which adds the Leader to the Leaderboard SQL table. . 3d . 3di . Call #1: . Call #2: . 3dii . What is being tested by the first call is the ability to validate if a user has a score and if not it is not possible for them to be able to send a score through the post endpoint as the users score is not allowed pass due to the selection statement giving an error 210 in the function. What is being tested in the second call is the ability to send a score if the user has a valid score and then showing the score being added to the table and then it is sorted and ranked by the highest score (this portion is a result of a another but related procedure). . 3diii . Output #1: Output #2: .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week24/2023/02/28/CPTV2.html",
            "relUrl": "/week24/2023/02/28/CPTV2.html",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Personal & Technical Achievements + Contributions",
            "content": "Personal Contributions . Created A database system that allowed for the addition of leaders to a leaderboard via sending post requests after the completion of the game to the server | Created an API with Crud endpoints and functionality to allow for the addition and sorting of users to the leaderboard and with garbage validation Scores of 0 cannot be inputted | Prevented Usernames from being inputted by user done automatically by the UI | Score also send automatically by the UI | Scores must exist to be able to get a response from the score search | . | Helped with creating post requests for the create User functionality of the Sign Up page | Created the login functionality for the project with allowing users in the user database only to login (backend for login was made by Sreeja) | Created a system where the user id is cached to local storage and is saved also saved logged in state to be able to change the UI for signed and not signed in users | Used this information to also be able to send the username automatically to the leaderboard when the user is logged in | Created Log Out functionality that resets the UserId and logged in status and allows other users to use the system | Created a Leaderboard table that refreshed automatically every 5 seconds to show the current leaderboard from the database with data formatted from the get request | Sorted the database by score and created multiple features leveraging the power of the SQl Alchemy ORM | . Technical Achievements . Learned complex topics like local storage and caching and the ability to use it to create a system where user data is saved until it is cleared by the user when the use log out | Learned how to use tools such as jquery and fetch to send post and get requests and reformat data into UI elements | Learned how to use the power of the SQL Alchemy ORM to create a database system that is able to sort and filter data and researched more complex features | Learned how to retrieve data from HTML Elements using Javascript | Learned how to increase my CSS knowledge and create the majority of the UI and styling for the project (everything other than the game itself) | Learned how to create and API and use a database system after hours and days of research and learning and struggles had to make over 3 systems before I was able to get one that worked | . Contributions to the Group . Commits to the Frontend Repo (I also made commits to branches that were not merged into the main branch so the number of commit is not fully accurate and the amount of code may also be slightly off): . | . Commits to the Backend Repo (Other Branches Not Present Same as Frontend): . | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week24/2023/02/27/Contributions.html",
            "relUrl": "/week24/2023/02/27/Contributions.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Safe Computing - 5.6",
            "content": "Personal Identifiable Information (PII) . PII is any information that can be used to identify, contact, or locate a single person, or to identify an individual in context. | PII can be made up of a variety of different kinds of data, including names, addresses, phone numbers, email addresses, social security numbers, and other identifiers. | PII can also include information about a person’s physical or mental health, financial information, or other information that can be used to identify a person. | The kind of PII that we&#39;ve seen in our personal projects is the storing of use data in a login system such as the user&#39;s information, uid, username, password, etc. This kind of information can tie an account to a person&#39;s identity. | We have also seen personal information when signing up for services that we use such as accounts for microsoft, google, github, etc. which store emails, phone numbers, often address and other information while setting up the tools that we use to create our projects. | . Feeling PII &amp; Personal Exposure . My feelings about PII is that they are needed for the creation for accounts and are the only way to create a way in a single person can be tied to a single account. My personal exposure to these concepts is through the creation of accounts for services that I use such as github, google, microsoft, youtube, etc. This will mean that if there is a data breach, my information will be exposed to the public and can be used to steal content such as my identity, my credit card information, my bank account information, etc. | . Good Vs. Bad Password . A good password is one that are random, complex, and long as it makes them harder to decrypt and social engineer and makes them harder to guess or trick out of you. Bad passwords are ones that are easy to guess, easy to social engineer, or easy to trick out of you such as your name, your birthday, your address, your phone number, pet&#39;s name, etc. | . Symmetric &amp; Asymmetric Encryption . Symmetric encryption is a type of encryption where the same key is used to encrypt and decrypt the data. This is the most common type of encryption that we see in our daily lives such as the encryption of our passwords. This means that there is a faster encryption and decryption process as the same key is used for both. Example Symmetric Encryption: AES, DES, 3DES, etc. . | Asymmetric encryption is a type of encryption where there are two keys, a public key and a private key. The public key is used to encrypt the data and the private key is used to decrypt the data. This is the type of encryption that we see in our daily lives when we use https websites such as google, github, etc. Example Asymmetric Encryption: RSA, ECC, etc. . | . AWS Deployment . We used private and public ssh keys while deploying our project to AWS we also created a .pem file that we used to ssh into our instance. We used some basic encryption in our AWS project. However, other than that I don&#39;t think we used any other encryption in our project as we were not knowledgeable enough to do so. | . How I got Phished . I was once sent an email by a group claiming to be Wells Fargo Customer Service. The email was sent to my personal email and was asking me to verify my account information. I was asked to click on a link and enter my information. However, considering the fact that I don&#39;t have a Wells Fargo account, I knew that this was a phishing email. However, had I been tricked I may have entered in sensitive information such as my social security number, my bank account information, etc. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week22/2023/02/08/Legal&EthicalConcerns.html",
            "relUrl": "/week22/2023/02/08/Legal&EthicalConcerns.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Licensing - 5.5",
            "content": "Licensing . Licenses are used to define the terms of use for a piece of software and how they allow the user to use or not use the software. There are different kinds of licenses that are used for different purposes. Creative Commons Zero v1.0 Universal (CC0) This license is used for software that is in the public domain. This means that the software is free to use and modify without any restrictions. | . | Open Source MIT License This license allows users to use code for any purpose, including commercial use. It also allows users to modify the code and distribute the modified code. Which would involve making the code closed source. User also needs to credit the original author of the code. | . | GNU General Public License v3.0 Allows users to use the code source for any purpose that they wish to similar to the Open Source MIT License. However, this code must be open source and cannot be closed source. | . | . | . Discussion &amp; Personal Discussion . Pros: Software can be accredited to the original author if their license requires it. | Software can be transformed and used in different ways if allowed | Software theft can be identified and prevented so the user can protect their work | Creators can profit from their work and use it for commercial gain | . | Cons: System can be abused to protect work that is not original | Freedom and use of content can be limited such as certain licenses not allowing commercial use | False flags of software theft can be used to prevent the use of software that is competing against their solution | . | . Conclusion &amp; Personal Conclusion . The License I used for my personal repository is the GNU License. I chose this license because I wanted to allow users to use my code for any purpose that they wish to. I also wanted to allow users to modify the code however I want to prevent them from being able to close source the code so it will always be available. This will allow my work to benefit the community and allow others to use it for their own purposes making my work more accessible and useful to others. In the same concept for our project Code-Crunch I also chose the same license with similar reasoning. | . Code-Crunch Backend . Code-Crunch Frontend .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week22/2023/02/02/Licensing.html",
            "relUrl": "/week22/2023/02/02/Licensing.html",
            "date": " • Feb 2, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Bias in Computing & Crowdsourcing",
            "content": "Bias In Computer Systems . Facebook Vs. Tiktok . Demographics . Facebook . 13-17 3.9% | 18% 18-24 | 23.7% 25-34 | 45-54 13.8% | 55-65 11.2% | 65+ 11.2% | . | TikTok . 10-19 25% | 20-29 22.4% | 30-39 21.7% | 40-49 20.5% | 50+ 11% | . | . | Reflection: . The information illustrates that mostly younger audiences are on TikTok with older audiences on Facebook. There is no purposeful exclusion but comes from the nature of the app but their content creates a divide that makes it so that certain audiences may begin to prefer slower paced vs faster paced content. . Virtual Assistants . | Female Voices? . Virtual Assistants occupy roles that traditionally fill the roles of what is regarded as female jobs. Along with more data being present regarding women and the fact that female voices are easier to hear and are easier to annunciate. | . | Is this purposeful? . Yes, however it appears to be combination of multiple factors such as bias towards who should fill these roles. Along with the aspect of their being greater data regarding female voices and that they are clearer to hear and annunciate better than male voices making them better for those how may have hearing disabilities. | . | . Algorithms &amp; Our Decisions . Algorithms in platforms such as Google and recommending paid searches which could promote malware and other content without filtration. Along with the ability for trends to spread on social media platforms that may promote activities such as bullying and other harmful activities. With also echo chambers being created on social media platforms that may promote harmful ideas and beliefs. | . Racism? . A reflection on bias being present in computer systems Hp Computers Are Racist? . Does the owner think it was intentional? . No, the owner doesn’t seem to assume the computer is racist as seen in his tone and approach to manner. When he declares that the computer is racist he seems to be joking and not serious. | . | Why did this occur? . Through the lack of adequate data in the creation of this feature and thus the image recognition software was poorly able to handle anything expect those of a European decent. | . | Corrections? . Yes, as these biases create systems that are not able to handle a diverse group of users that may be using the system. These unjust systems may cause greater issues such as unjust convictions or other extensions of the system that may cause extreme harm to the users of system. | . | . | . | . Crowd-Sourcing . Through crowd sourcing that case be used to that has less bias than traditional systems that are based only be a small group of creators. Tools like this such as Wikipedia has less bias than traditional publish like textbooks. Improvements? . Our Personal systems may be improved by using crowd sourcing as we may be able to create systems that have greater security and error handling by allowing users to able to support and create our systems. We could also use crowd-sourcing to create new features that we may never have though of. | . | Night at The Museum . Information such as their scores and personal information may make their experience more interesting this would allow them to see their improvement and see how they compare to others which may be impressive to teachers. | . | . | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week21/2023/02/01/ComputingBias.html",
            "relUrl": "/week21/2023/02/01/ComputingBias.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "MCQ2 Reflection",
            "content": "MCQ2 Reflection . Score . . I scored a 45/50 getting a 90% | . Mistakes . I made a series of mistakes mostly which were made due to lack of concentration and focus and not reading the questions carefully. This was a result of the last minute and late nature of its completion and the length of the test becoming a hinderance to my success. A solution would be to better manage my time and to take breaks at appropriate times. | . Question 12 . Solved the problem incorrectly as my answer of A “(onFloor1 AND callTo2) AND (onFloor2 AND callTo1)” would have been impossible as both conditions cannot be true at once as the elevator is not in a state of superposition between the two floors. Thus making my answer incorrect and the correct answer being B “(onFloor1 AND callTo2) OR (onFloor2 AND callTo1)”. This mistake was caused by not reading the solutions properly and this failing to notice this issue. | . Question 15 . I again misread the problem and attempted to find a pattern in which the robot would move to the indicated square however the question was asking for the option which would not move the robot onto the indicated square. Thus making my answer of C incorrect and the answer clearly being D. | . Question 17 . I didn’t fully read the instructions on the problem and did not select all the correct solutions as asked in the problem and thus only selected A one of the two correct answers making my solution incorrect. The correct answers were A and D. | . Question 22 . I misunderstood that both algorithms were functional as in algorithm 1 which indicated that the weight of a student would be replaced I thought that this was before they were added thus my answer that only B was correct was incorrect. Again caused by lack of focus and attentiveness. | . Question 49 . I selected the answer of of C “Every problem can be solved with an algorithm for all possible inputs, but some of these algorithms have not been discovered yet.” which was incorrect as there are problems which cannot be modeled given all the possible inputs to a situation and thus due to this scenario existing which I had not though possible. Thus the answer D is correct answer as “There exist problems that no algorithm will ever be able to solve for all possible inputs.” This was caused by a fault in my login by not understanding the limits of algorithms. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week21/2023/01/31/MCQ2Reflection.html",
            "relUrl": "/week21/2023/01/31/MCQ2Reflection.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Digital Divide & Equity",
            "content": "Investments in Digital Education Vs. Security . When considering the question how may investments into security affect technological education and wether they increase the digital divide. It would be crucially important to focus on the efforts made by institution public or private towards technological education and equity and the movements made to restrict such access based upon security concerns. Some program which wish to lessen the digital divide are programs such as the Affordable Connectivity Program from the FCC which wished to allow for the greater proliferation of broadband technologies to allow for lower income households to be able to be receive internet services at a reduced cost along with hardware such as personal computers, tablets, etc. Similar services from private institutions include projects such as Microsoft Airband which strives to provide internet access to areas where such access would otherwise be unavailable through satellite communications with a collaboration from Viasat and attempts to provide the best connectivity for that region. However how these programs designed to reduce the digital divide and increase equity through creating the opportunity for communities who are unable access such resources and these services allow for greater connectivity and allow for greater digital expression and create allow for greater upwards mobility in professions such as computer science a field where having access to a machine is otherwise impossible and support families to be able to partake in digital activities which we consider to be required for day to day task such as schoolwork or social interaction. These goals may be limited by fears of privacy and security as institutions government or otherwise may wish to prevent the spread of information or content that may be against their political goals in nations such as China where content that descents the CCP is unavailable in the country along with many services we are accustomed to. Further restrictions may come from group such as religious or educational bodies that may wish to restrict access to content that is believed to be against their rules/beliefs such as restrictions on communal machines at school restricting internet access or religious institutions blocking content related to sexual education and content that may lead their followers to challenge their faith in places like religious universities. These restrictions continue to increase the divide by preventing access to crucial information and resources that may be needed to be able to partake in the digital world. . | References: . https://www.fcc.gov/acp | https://www.microsoft.com/en-us/corporate-responsibility/airband-initiative | . | . Digital Empowerment . Some methods to increasing digital empowerment may be to one primarily increase the knowledge and digital literacy in groups such as the elderly to make them more in tune and more able to partake in the digital world through being less likely to fall victim to fraud and misleading results on questionable webpages and thus be more likely fall prey to misinformation. Other methods of digital empowerment could be the ability to be combat issues such as racial bias and prejudice through creating digital communities to counter such issues in a way otherwise impossible. Along with other methods available for individuals to empower themselves to for instance leak government wrongdoings in an anonymous manner along with creating tools for those in countries with goals of limiting the proliferation of knowledge with tools such as VPNs o be able to bypass these censors and be able to gain new knowledge and information. | . Helping the Unempowered . For instance helping a student who is digitally unempowered at Del Norte High School would most likely be to either if they were unfamiliar with the technology support them in able to learn and be able to express themselves through the technology and be able to better be able to accomplish tasks such as school work or create things that they may have wished to but otherwise would have been unable. If they didn&#39;t have access to the needed resources such as a functioning computer or internet access we can either use the help of existing programs and resources to be able to overcome these forms on inequity or we can create our own programs and fundraisers in order to rectify the issue. For a more general case the best way to allow to empower those digitally unempowered would be to create create programs and seminars or classes to increase technical literacy and digital literacy to greater empower those who need it by being less likely to fall prey to fraud and misinformation and be able to better partake in the digital world. Or to create and support programs that allow for greater access to the internet and technology to those who are unable to access it such as local charities and programs that support such causes or create our own if none exist. | . Red Tape? . Red tape or excessive bureaucracy would increase the digital divide as such restrictions would prevent needed access to resources in public institutions like schools and preventing the installation or use of needed programs and software preventing increasing the technical knowledge and success of students. Or the inability to create new systems in places like government such as new initiatives to provide the tools individuals need for success. Along with failing to properly adapt to the changing technological landscape through failing to allow access to new revolutionary technologies or preventing exploitation of individuals at risk such as the elderly or children.Such instances at Del Norte could be the inability to transfer files to and off school systems from external drives along with being unable to access programs on school machines thus making them unable to support students to the degree they otherwise would be able to, another limitation is the inability to install programs and remove them from school machines to accomplish goals for classes like computer science courses. To further add to the point of greater inabilities on school property would be internet restrictions on school wifi preventing access to important information or the ability access tools and files needed for school work as seen in the need for us to use a VPN to access all the material needed for this class. In other places similar restrictions would be the inability access resources due to aging systems that no longer are in tune with local technological landscape and are functionally obsolete and unable to be updated to be able to support the needs of the community. Other instances may include efforts by government bodies that serve to be functional due to taking too long to able to pass through cumbersome bureaucratic processes and thus are unable to be implemented in a timely manner and thus are unable to be able to serve the needs of the community as by the time they are implemented they are functionally obsolete or watered down due to opposing interests and in both scenarios are functionally useless to the community or otherwise. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week20/2023/01/29/DigitalEquity.html",
            "relUrl": "/week20/2023/01/29/DigitalEquity.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "CPT Draft Code-Crunch",
            "content": "Project . Purpose a Card matching game to test user’s pattern recognition skills under a time constraint | Leaderboard will be my main focus for the Collegeboard presentation and will be my slice of the main project | What will be present will be the leaderboard which displays the top 10 ranked scores across all users | Search functionality to be able to search for all scores by a certain user across all scores even those that are not displayed | Data will be stored in a database and will be updated every time a user plays the game | . CPT Video . Generation of a leaderboard result and the page updating in real time as result | Searching the database to be able to get user score data. | . Collegeboard Criteria . Program Purpose and Function Purpose: To sort and filter through user score data | Function: Ranks users by the highest score and then adds them to a database which the top 10 scores are displayed on the leaderboard and the others can be searched for. | . | Data Abstraction Lists will be used to filter data generated via the game in json format into another list ranking the users by highest score. Which will then be added to a database for permanent storage. Which can later then be accessed by the leaderboard and search functionality. | . | Managing Complexity Without lists sorting would be extremely difficult if not possible to sort while iterating through all the possible user scores. Along with a database not being present would make search next to impossible as the data would be impermanent and thus would be unable to be accessed to be displayed or searched through. | . | Procedural Abstraction Functions to be able to continually update the leaderboard along with algorithms to sort the user data that is generated then added to the database. Along with other functions that are needed to be able to sort the database to display the results that are in the database. | . | Testing Indicating live updating of the leaderboard and showcasing the changes made by playing the game and setting a score that is on the board. Using the search bar and searching for a users scores and data that is in the database while also displaying their respective positions. | . | . Work In Progress . Frontend code for when the user searches to display the scores associated with the searched user. | Api needed for leaderboard data to be sent and and received to the frontend for all features just not only leaderboard. | Database for user storage that will store user score data, along with other databases needed for high-scores, and user credentials. | Algorithms needed to sort user data through the use of lists and adding the filtered data to the database. Adding some tools to prevent users from overwhelming the system with requests if that happens to become an issue. . | Current Leaderboard Implementation. | . | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week20/2023/01/29/CPTDraft.html",
            "relUrl": "/week20/2023/01/29/CPTDraft.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Beneficial & Harmful Effects of Computing",
            "content": "Benefits and Harmful effects of Computing . Benefits . Automated systems and technologies have shaped the way we live and operate as individuals in society from the way we research and the way we communicate and interact with each other. . As a result of revolutionary services and products that have shaped the way we live such as search providers like Yahoo, Google, and Bing with have revolutionized the form in which we do research from having the information available to us from only those available in our local libraries and museums to having access to information from the entire human collective. . | Through the development of technologies such as that of social media such as the rise of early platforms such as MySpace and internet chat rooms that allowed for expression of individuals digitally from across the world to bond over communal interests and issues. These innovations led to the rise of more modern services that fulfill those interests today such as the likes of Twitter, Facebook, Instagram, etc. These platforms allowed repressed groups to share their experiences in a manner where they would otherwise have been unable championing the rise of movements such as the MeToo movement for sexual harassment or bring awareness to racial and police violence. . | Through the creation of services such as Tor which provide for users to have greater anonymity through the creation of a network of relays that allow for users to access the internet without having their IP address revealed. This has allowed for users to have greater freedom of speech and expression without fear of retribution from governments or other entities. Which allows for government whistleblowers to showcase corruption and other illegal activities at play without fear of retribution, and communications to media outlets from those being targeted by criminal groups or those with inside information on the matter allowing for those individuals to be protected from harm. . | . | . Harmful Effects . There may have been major changes to the way we live and operate within our day to day lives or the way the world as we know it can exist. These technologies created their own harmful effects from alternative methods of using these technologies. . Harmful effects of technologies such as that of Google Search, Bing, and other web tools has been the spread of misinformation through the inability to filter the mass volume of content being produced serving to misinform and mislead those who follow such outlets. Further issues present include the proliferation of malware ridden advertisements serving to mislead and harm vulnerable individuals through the focus on maximizing profits without properly filtering disingenuous actors. . | Harmful effects of social media platforms such as that of Twitter, Facebook, and Instagram have been the spread of misinformation and the spread of hate speech. These platforms have been used to spread misinformation and disinformation to the masses through the use of bots and other automated systems to spread propaganda and misinformation along with spreading hate speech and other forms of discrimination against marginalized groups. These issues have also been compounded with the algorithmic and profit driven structures present in these platforms serving to create echo chambers and filter out opposing views and opinions and creating systems that create unhealthy practices and trends. To further add to misuse of these platforms also serve as an anonymous way to spread illegal content circumventing the moderation on these services as seen in the scandal just a few years prior of child porn circulating on Twitter in such communities. . | Through the creation of such anonymizing systems such as the Tor Network and other such services even though the permit the greater expression of those who would otherwise be unable such services promote those with nefarious and illegitimate motives to allow the proliferation of illegal goods and services. Seen in the creation of services like the Silk Road which resulted in illegal trade of drugs and firearms. Such services can also be for spreading other illegal and unjust services such as child porn and other forms of illegal content. . | . | . Dopamine Issues and Technology . Through the creation of services and social media platforms such as the likes of TikTok and Snapchat which are extremely youth focused has resulted in the rise of those who are addicted to such service. As in goals to increase usage attempt to be as addictive as possible to be able sell advertisements and other services along with the nature of these services promoting individuals to be hyperactive online often to their detriment. | . Are domaine issues real? . First to cover what is Dopamine is neurotransmitter and is involved in the pleasure response of our body and serves to reward activity such as food, clothing, sexual interaction, etc. . | Dopamine issues via social media allows for over-consumption as it adapts a system created for survival against predators and the creation of human bonds and connections. Through social media platforms flooding the brain with dopamine and upon continuos suggesting of content tailored by algorithms specifically for the user, after this dopamine overdose three leads to a deficit in dopamine in the system as it the bodies dopamine levels are unnaturally elevated. Similar to how the body is flooded with extreme quantities of dopamine if one were to face something along the likes of a drug addiction. . | . Dopamine Issues at Del Norte High School . Similar issues are prevalent at Del Norte High School with it being commonplace for students to record and post their lives online on various social media platforms or use engage on several of those platforms. Causing symptoms such as dopamine over-stimulation and addiction to these platforms which may affect them in a myriad of situation such as school work or otherwise. | . My Experience . I personally have never been through such issues in a way where they impacted my life or my success in High School, however, I sympathize with those who have underwent such addictions and struggled to be able to work due to social media pressures or been unable to focus on or perform in school work or tasks. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week20/2023/01/29/Beneficial&HarmfullEffects.html",
            "relUrl": "/week20/2023/01/29/Beneficial&HarmfullEffects.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "College Board CPT Project",
            "content": "Submission 1 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | Shows the program running and shows the output for the program. Also showcases the purpose and function of the program. | . Data Abstraction | 0/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | Two different code segments and the list name RPS is correctly identified however the second segment doesn’t show data being accessed | . Managing Complexity | 0/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | List doesn’t manage complexity as it can be rewritten without the list being used. The alternative list-free program doesn’t have increased complexity than the one that uses the list. | . Procedural Abstraction | 0/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | There is a student-made function with 1 or more parameters however how the function contributes to the program is not properly explained | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | Has a student developed function that has iteration and selection also states how the algorithm works to the ability that anyone can recreate it. | . Testing | 1/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Describes two different function calls with different parameters and then the function also correctly described the conditions test and the results were properly identified. | . Submission 2 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | Shows the program running and shows the output for the program. Also showcases the purpose and function of the program. | . Data Abstraction | 1/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | Two different code segments and the list name letOfGuessWord is correctly identified and the data that is stored is also accurately identified | . Managing Complexity | 1/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | List is used to store data in order to manage complexity and how not using the list would be inefficient in order to achieve the program function | . Procedural Abstraction | 1/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | There is a student made function called GuessWords with 1+ parameters. Also properly describes what the purpose of the program is and how it contributes the overall program. | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | Has a student developed function that has iteration and selection also states how the algorithm works to the ability that anyone can recreate it. | . Testing | 1/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Describes two different function calls with different parameters and then the function also correctly described the conditions test and the results were properly identified. | . Submission 3 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | Shows the program running and shows the output for the program. Also showcases the purpose and function of the program. And the purpose and input are properly described | . Data Abstraction | 0/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | Data is incorrectly identified in the list StateList the name is correctly identified both snippets don’t show data collection. | . Managing Complexity | 0/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | Does not properly explain how the program could havve been written without a list and why it would have been more complex. | . Procedural Abstraction | 0/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | Function UpdataScreen has no parameters and the program is not properly explained in the manner in which functions and how it contributes the to overall function | . Algorithm Implementation | 0/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | Has a student developed function that has sequencing and selection however there is no iteration also there is little to no explanation of the function of the algorithm. | . Testing | 0/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | The function does not have a parameter and operations are described not the parameters. The response is not shown and is only described. | . Submission 4 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | Shows the program running and shows the output for the program. Also showcases the purpose and function of the program. | . Data Abstraction | 1/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | Two different code segments and the list name fishtypes is correctly identified and the data that is stored is also accurately identified | . Managing Complexity | 1/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | List is used to store data in order to manage complexity and how not using the list would be inefficient in order to achieve the program function | . Procedural Abstraction | 1/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | There is a student made function called “clone+movement+range” with 1+ parameters. Also properly describes what the purpose of the program is and how it contributes the overall program. | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | Has a student developed function that has iteration and selection also states how the algorithm works to the ability that anyone can recreate it. | . Testing | 0/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Specfic arguments are not described and the arguments that are passed through. The conditions tested are described however it doens’t correlate to the parameters in the function. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week19/2023/01/23/CollegeBoardPerfomanceTasks.html",
            "relUrl": "/week19/2023/01/23/CollegeBoardPerfomanceTasks.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "College Board CPT Project & Personal Contributions",
            "content": "College Board Create Performance Task (CPT) Examples . Submission 1 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 0/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | The function of the program is not properly identified and the input is also incorrect with it being the input to the prompt and then the output being whether or not the user was correct. | . Data Abstraction | 0/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | The lists mentioned are not used in the function of the programs and only one list is mentioned and the data within the list mention animallist is incorrectly identified to be both the images and the names of the animals while only being the names of the animals. | . Managing Complexity | 0/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | The code doesn&#39;t show how the list is being used to manage the complexity within the program along with explanations providing a poor job of explaining how the program could not be written otherwise. | . Procedural Abstraction | 0/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | There is a procedure that implements at least one parameter. There is a description of the program however the program fails to mention what purpose the procedure serves in the description of program`. | . Algorithm Implementation | 0/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | There is both selection iteration and selection however there seems to be a poor explanation that doesn’t explain the algorithm in detail. | . Testing | 1/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Two different function calls are shown one with a dog and mouse and then the outputs are also identified | . Submission 2 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | The program&#39;s purpose is properly described along with the program functionality and output being shown in the video and the functionality is explained in the written response along with the written output also being properly described by the student. | . Data Abstraction | 1/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | There seem to be two segments with data collection benign shown with the second being how the list nounList is used in the program. The list nounList is also correctly identified. The data is also correctly identified. | . Managing Complexity | 1/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | Explains how the list is used to store the user inputs and how the program would have to be written differently without the list. | . Procedural Abstraction | 1/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | Has a customized function with a procedure to allow them to create their program along with describing what the function does. | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | The student has made an algorithm which contains iteration, selection, and iteration in the completion of their function. The function of their algorithm is also explained in great detail to the extent where the program can be recreated. | . Testing | 1/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | There are two different function calls with conditions defined being clearly expressed and also and also properly explaining the result. | . Submission 3 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 . 0/1 . Correction: The purpose was missing and only the function was described in the program. . | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | There was an input shown in the video along with program function and output and purpose and function seemed to be clearly expressed. | . Data Abstraction | 1/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | Two code snippets are shown and data collection is also shown in these segments with data storage being shown in the shown list and then later it shows the data being used. The list name is shown (firstCharacterList). Data is also correctly identified. | . Managing Complexity | 1/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | A list is used to store ranking and an image url. Also there is a proper explanation of what would happen without list implementation that appears to be correct. | . Procedural Abstraction | 1/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | Has a function developed called findWinner and also describes how the function works with taking the list and comparing their rankings and displaying who won, tied or lost. | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | Created function with all needed elements. Als0 the function is properly explained with all parameters being properly explained as well. | . Testing | 1/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Two different calls are made with two different sets of superheroes. . Conditions that are tested are also explained and the final results are properly shown. . | . Submission 4 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | The purpose of the program is explained along with the inputs the user made and the outputs that were made and all this was also seen in the video that was shown. | . Data Abstraction | 0/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | The list data was not used in the program and the name was properly shown as guesses. | . Managing Complexity | 0/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | The list was not used in the program so it was not used to manage complexity and as there was no list used the description of how it could be written with no list was pointless. | . Procedural Abstraction | 1/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | Used a function with more than one parameter and described the function of the program and how it contributes to the program. | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | There was a function called is it correct which includes all the needed criteria. The explanation is extremely detailed and how each criteria is met. | . Testing | 0/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Showed the result and how the conditions were being tested but didn’t show the different calls in the assignment. | . Personal Updates &amp; Contributions . Added a login in system that validates user accounts and allows for successfull logins with valid accounts. Added a system that allows the page to dynamically toggle what it displays depending apon the logged in status of the user if not logged the user is only able to toggle between the login and registration pages. Added the needed Javascript for the registation page to be able to function however there is no clear way to test until the final api is written. Added log out functionality allowing the user to reset the logged in status and be sent back to the login page also layed down a framework where the users username can be cached and be able to be used in conjucntion with the game and used to send API data back to the backend when that is prepared. . Login Failed . . Login Success . . . User Id Saved When Not Logged In . . User Id Saved When Logged In . . Log Out Video . Log Out .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week18/2023/01/15/CollegeContributions&PersonalContributions.html",
            "relUrl": "/week18/2023/01/15/CollegeContributions&PersonalContributions.html",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$nTQ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$JPM...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$iHV...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$US0...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$2cC...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$nTQ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$JPM...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$2I7...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$US0...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$2cC...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$nTQxZ9alViZd3WOn$34c90a641520c96e3d91ac148340b8b07d3c0958249dfcfe4a3eb05e2621efef&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$JPMovUtCRid1pCTE$089368f59621e8878ea730e5328bd9fc442f1d63f40d99f52502c059f9921281&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2I7yhf1jQOPNu2YE$473f9f24b42cbbd52d6fd4effe03b73ba41ff31ea5532940480aadef56b3ce2d&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$US0fsfAaoQix8ido$5b6bac49c74a9fe08b18147a8d0f5c41d7805c42238a9d29dc2e8dbafff8324f&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$2cC6Hp5Z4WcmxpBK$df9ed2dbe43edee11d7dc5101057274b2c47be5db95d6610ab7e4fba2dbf6d17&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$nTQxZ9alViZd3WOn$34c90a641520c96e3d91ac148340b8b07d3c0958249dfcfe4a3eb05e2621efef&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$JPMovUtCRid1pCTE$089368f59621e8878ea730e5328bd9fc442f1d63f40d99f52502c059f9921281&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2I7yhf1jQOPNu2YE$473f9f24b42cbbd52d6fd4effe03b73ba41ff31ea5532940480aadef56b3ce2d&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$US0fsfAaoQix8ido$5b6bac49c74a9fe08b18147a8d0f5c41d7805c42238a9d29dc2e8dbafff8324f&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$2cC6Hp5Z4WcmxpBK$df9ed2dbe43edee11d7dc5101057274b2c47be5db95d6610ab7e4fba2dbf6d17&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2002, 12, 31) age = calculate_age(dob) print(age) . 20 . from datetime import date import json class Student: def __init__(self, name, dob, classOf): self.name = name self.dob = dob self.classOf = classOf self.age = self.calculate_age() def calculate_age(self): today = date.today() age = today.year - self.dob.year - ((today.month, today.day) &lt; (self.dob.month, self.dob.day)) self.age = age return age def get_dob(self): return self.dob def change_dob(self, new_dob): self.dob = new_dob self.age = self.calculate_age() return f&quot;Date of Birth changed to {self.dob}&quot; def get_age(self): return self.age def get_classOf(self): return self.classOf def change_classOf(self, new_classOf): self.classOf = new_classOf return f&quot;Class Of changed to {self.classOf}&quot; def student_data(self): # need to change date to string to send json Data send_dob = self.dob.strftime(&quot;%m/%d/%Y&quot;) student_information = { &quot;name&quot;: self.name, &quot;dob&quot;: send_dob, &quot;age&quot;: self.age, &quot;classOf&quot;: self.classOf } return json.dumps(student_information) def __str__(self): return f&quot;Name: {self.name}, Age: {self.age}, DOB: {self.dob}, Class Of: {self.classOf}&quot; # Defining Student Jermey = Student(&quot;Jermey&quot;, date(2002, 5, 14), 2023) # Printing Json Data and Student Information print(Jermey) print(Jermey.student_data()) # Getting Class Of print(f&quot; nJeremey is going to graduate in {Jermey.get_classOf()}&quot;) # Setting Class Of print(f&quot;{Jermey.change_classOf(2069)}&quot;) print(f&quot;Jeremey is now going to graduate in {Jermey.get_classOf()} n&quot;) # Getting Dob print(f&quot;Jeremy was born on {Jermey.get_dob()}&quot;) print(f&quot;Jeremy is {Jermey.get_age()} years old as of {date.today()} n&quot;) # Setting Dob print(Jermey.change_dob(date(1941, 12, 30))) print(f&quot;Jeremy is {Jermey.get_age()} years old as of {date.today()} n&quot;) # Printing Json Data and Student Information after updates print(f&quot;New Jermey is {Jermey}&quot;) print(Jermey.student_data()) . Name: Jermey, Age: 20, DOB: 2002-05-14, Class Of: 2023 {&#34;name&#34;: &#34;Jermey&#34;, &#34;dob&#34;: &#34;05/14/2002&#34;, &#34;age&#34;: 20, &#34;classOf&#34;: 2023} Jeremey is going to graduate in 2023 Class Of changed to 2069 Jeremey is now going to graduate in 2069 Jeremy was born on 2002-05-14 Jeremy is 20 years old as of 2023-01-15 Date of Birth changed to 1941-12-30 Jeremy is 81 years old as of 2023-01-15 New Jermey is Name: Jermey, Age: 81, DOB: 1941-12-30, Class Of: 2069 {&#34;name&#34;: &#34;Jermey&#34;, &#34;dob&#34;: &#34;12/30/1941&#34;, &#34;age&#34;: 81, &#34;classOf&#34;: 2069} . import json class Rectangle: def __init__(self, length, width, height): self.length = length self.width = width self.height = height self.sa = self.surface_area() self.vol = self.volume() def volume (self): volume = self.length * self.width * self.height return volume def surface_area(self): surface_area = 2 * (self.length * self.width + self.length * self.height + self.width * self.height) return surface_area def information(self): data = {&#39;length&#39;: self.length, &#39;width&#39;: self.width, &#39;height&#39;: self.height, &#39;volume&#39;: self.vol, &#39;surface_area&#39;: self.sa} return json.dumps(data) def __str__(self): return f&quot;Rectanglular Prism: {self.length} ft x {self.width} ft x {self.height} ft&quot; # Creating an instance of Recatangle rect = Rectangle(2,3,4) # Properties of the instance of Rectangle print(rect) print(rect.information()) # Calculating Volume and Surface Area print(f&quot;Volume: {rect.volume()} ft^3&quot;) print(f&quot;Surface Area: {rect.surface_area()} ft^2&quot;) . Rectanglular Prism: 2 ft x 3 ft x 4 ft {&#34;length&#34;: 2, &#34;width&#34;: 3, &#34;height&#34;: 4} Volume: 24 ft^3 Surface Area: 52 ft^2 .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week18/2023/01/10/PBL-model.html",
            "relUrl": "/week18/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "UX Design",
            "content": "User Exprecience Design . User Experience Design is the ability to make a friendly and easy to use interface for the user. | Through the use of CSS and SASS to be able to create a dynmaic interface | @media queries can be used to make the page more dynamic for mobile phones and users | Ux allows for greater reach and accesbility of the program | Important to begin first as it serves as a way to develop the back end of the program | . EX. Submission 1 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 0/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | The video showcases the program running with two different inputs and outputs. Then they are subsequently described in the write up along with a description of the program’s function but not the purpose. | . Data Abstraction | 1/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | List SideIndex then used to fulfill the function of the program and used to store data with the name correctly identified and the data the names of the triangles as a result of their side lengths is also correctly identified | . Managing Complexity | 0/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | The list SideIndex doesn’t not manage any complexity as it doesn&#39;t store data that could not be done in a way without the use of the list and the description of how the program couldn’t be written | . Procedural Abstraction | 1/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | Made the function ratioCalculate with three required parameters and function was properly described in the manner in which it functioned | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | Function has sequencing iteration and selection. Also described the program with enough detail that it was possible to remake. | . Testing | 1/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Describes the two different classes with different arguments. Then says what is being tested in the function calls. | . Submission 2 . Reporting Category Scoring Criteria Description . Program Function &amp; Purpose | 1/1 | Video . Input . | Program Functionality . | Output . | . Written . Purpose . | Function . | Input &amp; Output description . | . | Shows the program running and shows the output for the program. Also showcases the purpose and function of the program. | . Data Abstraction | 1/1 | 2 Code Snippets with data collection . | Name of list is correctly identified . | Data is correctly Identified . | . | Two different code segments and how they are state how the data is stored and the name of the list startGrid. Also says what data is being stored in the list. | . Managing Complexity | 1/1 | List being used to manage complexity . | Explains how program could be written differently without the use of the list . | . | Says how the list manages the complexity of being able to store the status of many items. Also described how it would not be able to be made without a list. | . Procedural Abstraction | 1/1 | Procedure with 1+ parameters . | Procedure Description + contribution . | . | There is a student made function with 2+ parameters and a description of the program functions and a description that falls in line with its purpose | . Algorithm Implementation | 1/1 | Code has student made algorithm showing iteration, selection, and iteration . | Explain how the algorithm works and to the detail that someone else could recreate it . | . | Has a student developed function that has iteration and selection also states how the algorithm works to the ability that anyone can recreate it. | . Testing | 1/1 | Two different Function calls . | Describes condition being tested . | Identified the result of the call . | . | Describes two different function calls with different parameters and then the function also correctly described the conditions test and the results were properly identified. | . Contributions . Created a login and Sign up page for the code crunch game with also beginning research into jquery to be able to parse the json data that will be created by the api. Also customized css and added a gradient background theme and some changes to the fonts. | . .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week17/2023/01/08/UserInterface.html",
            "relUrl": "/week17/2023/01/08/UserInterface.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "The Agile Methodology & Work Ethic",
            "content": "Agile . The ability to be able to adapt and be able to have smaller parts to build to a larger portion | Be able to keep in track of the needs of the program and be able to adapt to the needs of the program | Constantly save work and be inteligent with the needs of the program | . Issues . Issues should contain valuable information and updates regarding the project. | Test Functions are written in each issues so they can be connected to each other. | . CI/CD . Continues Integration and Continues Deployment | Part of continuous intergration and deployment is writing portions that would be able to be tested and be able to be deployed to the main branch of the project. | The CI/CD is able to be used to test the code and be able to be deployed to the main branch of the project without having major issues in program. | Helps us save time and be able to have quality programs. | . Caution . Keep track in quality of work no 404 errors, no errors with broken links, and images. | Qaulity of work is also important. | Have checklist that have custom made checklists and creativty. | . Create A Culture of Quality . Have a culture that promotes quality and contribution | Have the four main jobs Dev Ops, Frontend, Backend, and Srum Master | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week17/2023/01/04/AgileNotes.html",
            "relUrl": "/week17/2023/01/04/AgileNotes.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 3 Vocabulary",
            "content": "Word List . Storing &amp; Manipulating Data . Variables | Data Types | Assignment Operators | . Managing Complexity with Variables . Lists | 2D Lists | Dictionaries | Class Algorithms | Sequence | Selection | Iteration | . Logical Operations &amp; Decision Making . Expressions | Comparison Operators | Booleans Expressions and Selection | Booleans Expressions and Iteration | Truth Tables | . Strings &amp; String Operations . Characters | Strings | Length | Concatenation | Upper | Lower | Traversing Strings | . Conditional Statements . Python If | Elif | Else conditionals | Nested Selection Statements | . Loops &amp; Iteration . Python For, | While loops with Range, | List Combining loops with conditionals to Break | Continue | . Algorithms . Procedural Abstraction | Python Def procedures | Parameters | Return Values | . Variables . Category: Storing &amp; Manipulating Data | Definition: A variable is a named location used to store data in the memory. It is helpful to think of variables as containers that hold information. Its sole purpose is to label and store data in memory. This allows for better organization of the data, and allows the data to be accessed and modified by a reference to an identifier. Variables can also be changed during a program&#39;s execution. Variables can be used for storing data of different types, such as numbers, strings, lists, etc. Variables are created when you assign a value to it. The equal sign (=) is used to assign values to variables. The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. | . Variable Code Example . def rectangle_area(): width = int(input(&quot;Enter the width of the rectangle: &quot;)) height = int(input(&quot;Enter the height of the rectangle: &quot;)) unit = input(&quot;Enter the unit of measurement: &quot;) area = width * height print(f&quot;The area of the rectangle is: {area} square {unit}&quot;) rectangle_area() # Through assigning variables the program is able to store the # imputed values and use them in the calculation of the area. # The program is also able to print the result of the calculation. # Without variables the program would not be able to store the values # and would not be able to print the result of the calculation. . The area of the rectangle is: 288 square in . Data Types . Category: Storing &amp; Manipulating Data | Definition: Data types are the classification or categorization of data items. It represents the kind of value that tells what operations can be performed on a particular data. Python has various data types that are used to define the operations possible on them and the storage method for each of them. The data type specifies the size and type of values that can be stored in the variable. The data type of a variable is the type of data that variable can store. For example, a variable of type int can only store integer values. The data type of a variable can be changed during the execution of a program. Python has the following data types built-in by default, in these categories: Text Type: str | Numeric Types: int, float, complex | Sequence Types: list, tuple, range | Mapping Type: dict | Set Types: set, frozenset | Boolean Type: bool | Binary Types: bytes, bytearray, and memoryview. | . | However more the most common data types are Integers, Floats, Strings, Booleans, and Lists/Arrays. In some programming languages like C, C++, and Java, the data types are explicitly declared. In Python, the data type is automatically inferred from the value assigned to the variable. | . Data Types Code Example . Data = [1, 3.14, &quot;Hello&quot;, True, [1, 2, 3], (1, 2, 3), {1, 2, 3}, {&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3}] for datatype in Data: print(f&quot; n{datatype} is of {type(datatype)}&quot;) # This program showcases the different data types in Python. The program doesn&#39;t # contain all the data types in python but illustrates a few of the main ones. # BTW at index 6 in the list is the object is a set, not a dictionary. . 1 is of &lt;class &#39;int&#39;&gt; 3.14 is of &lt;class &#39;float&#39;&gt; Hello is of &lt;class &#39;str&#39;&gt; True is of &lt;class &#39;bool&#39;&gt; [1, 2, 3] is of &lt;class &#39;list&#39;&gt; (1, 2, 3) is of &lt;class &#39;tuple&#39;&gt; {1, 2, 3} is of &lt;class &#39;set&#39;&gt; {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3} is of &lt;class &#39;dict&#39;&gt; . Assignment Operators . Category: Storing &amp; Manipulating Data | Definition: An assignment statement creates new variables and gives them values. The equal sign (=) is used to assign values to variables. The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. The assignment operator (=) is used to assign values to variables. The value of the right-hand side of the expression is calculated first and then assigned to the variable on the left-hand side. The assignment operator can also be used to assign the result of any expression to a variable. Other assignment operators in python also include +=, -=, *=, /=, %=, //=, **=, &amp;=, |=, ^=, &gt;&gt;=, &lt;&lt;=, etc. Which are used for addition, subtraction, multiplication, division, modulus, floor division, exponent, bitwise AND, bitwise OR, bitwise XOR, bitwise right shift, bitwise left shift, respectively. | . Assignment Operators Code Example . import random def bubmler(): # Variable Declaration runs = 0 temp_itmes = 0 bundle = [] # Comedic Prints used to make the program more fun print(&quot;Oh no the Bubmbler has gotten hold of you your shopping is going to be bumbled!&quot;) # User input for the number of items the bumbler has gotten hold of to iterate through items = int(input(&quot;How many objects did the bumbler get hold of?&quot;)) # Prints the number of items the bumbler has gotten hold of print(f&quot;The Bumbler has gotten hold of {items} items beware they will be bumbled!&quot;) # The use of the = assignment operator is used to assign the value of items to temp_items temp_itmes = items # Uses the -= operator to decrement the value of temp_items by 1 # The while loop is used to iterate through the number of items the bumbler has gotten hold of # The input function is used to get the name of the object the bumbler has gotten hold of while temp_itmes &gt; 0: ToBeBumbled = input(&quot;What object did the bumbler get hold of?&quot;) bundle.append(ToBeBumbled) temp_itmes -= 1 # Tells the user what items the bumbler has gotten hold of print(&quot;The Bumbler has gotten hold of these items: &quot;) print(*bundle, sep=&quot;, &quot;) # Uses random.shuffle to shuffle the items the bumbler has gotten hold of # Uses random.randint to generate a random number between 0 and the number # of items the bumbler has gotten hold of and if the number is 3 then the # bumbler will take the item if the bumbler has taken an item then it # will be replaced with &quot;The bumblers price&quot; and tell the user they have been bumbled random.shuffle(bundle) for bumble in bundle: if random.randint(0, len(bundle)) == 3: location = bundle.index(bumble) bundle[location] = &quot;The bumblers price&quot; print(&quot;Your bubmbled items are: &quot;) print(*bundle, sep=&quot;, &quot;) if &quot;The bumblers price&quot; in bundle: print(&quot;You have been bumbled!&quot;) bubmler() . Oh no the Bubmbler has gotten hold of you your shopping is going to be bumbled! The Bumbler has gotten hold of 6 items beware they will be bumbled! The Bumbler has gotten hold of these items: 2 gallons of milk, bottled water, cheese sticks, wallet, car, watch Your bubmbled items are: The bumblers price, The bumblers price, 2 gallons of milk, watch, wallet, The bumblers price You have been bumbled! . Lists . Category: Managing Complexity with Variables | Definition: A list is a collection which is ordered and changeable. In Python lists are written with square brackets. Lists are one of the most versatile data types available in Python which can be written as a list of comma-separated values (items) between square brackets. Important thing about a list is that items do not have to be the same type. ex. list1 = [&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000]; list2 = [1, 2.00, &quot;butter&quot;, {1, 2, 3}, False ]; list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] | . Lists Code Example . def flowers(): # Variable Declaration flower = &quot;&quot; flower_list = [] # The while loop is used to iterate through the number of flowers the user has while flower != &quot;done&quot;: flower = input(&quot;Enter a flower (type done to finish): &quot;) if flower != &quot;done&quot;: flower_list.append(flower) # The for loop is used to iterate through the list of flowers and print them for flower in flower_list: print(f&quot; {flower} are blooming this year.&quot;) flowers() # Creates a list called flower_list then then the user is asked to enter a flower # until they type done. Then a for loop is used to iterate through the list of flowers # and print then print that they are blooming this year. This code could be adapted by # adding a more useful operation that could be done to the list. # To see an example that incorporates this see the bumbler program above. . violets are blooming this year. roses are blooming this year. poppies are blooming this year. . 2D Lists . Category: Managing Complexity with Variables | Definition: 2D Lists also referred to as matrixes are lists of lists. They are used to store data in a tabular form. For example, a list of lists can be used to store rows and columns of data. Complexity can be manged through the use of 2D lists by storing and being able to manipulate data in a more manageable way for instance it can be stored in a tabular form so for instance you could make it so that a coulum represents a field and a row represents a record. Using these types of lists data can also be categorized in a better manner as it allows you to store related data together. Or for algorithms that require you to stored in a grid like structure such as a maze or a game board, or image processing. | . 2D Lists Code Example . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] def printer(keyboard): rsp = input(&quot;Month: &quot;) rsp2 = input(&quot;Age: &quot;) solve_rsp = &quot;&quot; + str(rsp.upper().strip()) solve_rsp2 = &quot;&quot; + str(rsp2).strip().upper() print(&quot;Month Born:&quot;, end = &quot; &quot;) for letter in solve_rsp: if any(letter in row for row in keyboard): print(letter, end=&quot;&quot;) else: print(&quot;You have entered an invalid character&quot;) print(&quot; nAge:&quot;, end=&quot; &quot;) for letter in solve_rsp2: if any(letter in row for row in keyboard): print(letter, end=&quot;&quot;) else: print(&quot;You have entered an invalid character&quot;) printer(keyboard) # Here is an example of a program that uses a 2d list to store the charectors of the keyboard # The program then asks the user to enter a month and age and then prints the charectors of the # month and age if they are in the keyboard list so for instance if the charectors are not in # the keyboard list it will print not a valid charector. . Month Born: DECEMBER Age: 16 . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] def printer(keyboard): rsp = input(&quot;Month: &quot;) # Input סֶפּטֶמבֶּר rsp2 = input(&quot;Age: &quot;) # Input חמישים וחמש solve_rsp = &quot;&quot; + str(rsp.upper().strip()) solve_rsp2 = &quot;&quot; + str(rsp2).strip().upper() print(&quot;Month Born:&quot;, end = &quot; &quot;) for letter in solve_rsp: if any(letter in row for row in keyboard): print(letter, end=&quot;&quot;) else: print(&quot;You have entered an invalid character&quot;) print(&quot; nAge:&quot;, end=&quot; &quot;) for letter in solve_rsp2: if any(letter in row for row in keyboard): print(letter, end=&quot;&quot;) else: print(&quot;You have entered an invalid character&quot;) printer(keyboard) # According to google translate the month is September and the age is fifty and five in hebrew . Month Born: You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character Age: You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character You have entered an invalid character . Dictionaries . Category: Managing Complexity with Variables | Defintion: A dictionary stores (key, value) pairs, similar to a Map in Java or an object in Javascript. Dictionaries are optimized to retrieve values when the key is known. In Python, a dictionary is created by placing a sequence of elements within curly {} braces, separated by ‘comma’. Dictionary holds a pair of values, one being the Key and the other corresponding pair element being its Key:value. Values in a dictionary can be of any datatype and can be duplicated, whereas keys can’t be repeated and must be immutable. Dictionaries are optimized to retrieve values when the key is known. Python’s dictionaries are kind of hash table type. It consists of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object. This can be used to mangage complexity as through storing key and value pairs it can prevent the need for things like having a secondary list to store the values of a key. This can also be used to store data in a more organized manner as it can be used to store data in a way that is more easily accessible. For instance if you were to store a list of students and their grades you could use a dictionary to store the students name as the key and the grade as the value. This would allow you to easily access the grade of a student by simply using the students name as the key. | . Dictionaries Code Example . Q_Bank = { &quot;Dynamic code is code that has inputs and outputs that can change?&quot;:&quot;true&quot;, &quot;What is the keyword for defining a function in Python?&quot;: &quot;def&quot;, &quot;In Jupyter Notebooks the Input is in line with the Output&quot;: &quot;false&quot;, &quot;What is grouping often used commands called?&quot;: &quot;procedural abstraction&quot;, &quot;Is Mr.Mortenson them most handsome man on the planet?&quot;: &quot;true&quot;, } score = 0 for Q, ans in Q_Bank.items(): print(Q) rsp = input(Q) if rsp.lower().strip() == ans.lower().strip(): print(f&quot;Your answer {rsp} is the correct answer&quot;) score += 1 else: print(f&quot;Your answer {rsp} doesn&#39;t equal the correct answer/s which is {ans}&quot;) print(f&quot;Your score is {score} out of {len(Q_Bank)} points.&quot;) # Uses a dictionary to store the questions and answers and a value pair associated with each question # to store the answer to the question. Then a for loop is used to iterate through the dictionary and # then print the question and ask the user to enter the answer. If the answer matches the value in the dictionary # it informs the user that they were correct and then adds one to the score. If the answer is incorrect it informs # the user that they were incorrect and then prints the correct answer. Once the for loop has finished it prints # the users score out of the total number of questions. . Dynamic code is code that has inputs and outputs that can change? Your answer true is the correct answer What is the keyword for defining a function in Python? Your answer def is the correct answer In Jupyter Notebooks the Input is in line with the Output Your answer false is the correct answer What is grouping often used commands called? Your answer bundles doesn&#39;t equal the correct answer/s which is procedural abstraction Is Mr.Mortenson them most handsome man on the planet? Your answer true is the correct answer Your score is 4 out of 5 points. . Class Expressions . Category: Managing Complexity with Variables | Definition: Class expressions are not present within python, however, when they are present in Javascript where instead of a statement an expression is used. This allows a class to be used and then defined later, anonymous classses where they can be unnamed for a class that just needs to be used once, or allow it to be used in the same places that variables could be used in. | . Class Expressions Code Example . class Person { constructor(name, age) { this.name = name; this.age = age; } greeting() { return `Hello my name is ${this.name} and I am ${this.age} years old`; } } // Use of Class Expressions class Wagie extends Person { constructor(name, age, job) { super(name, age); this.job = job; } greeting() { return `Hello I work at ${this.job} and my name is ${this.name} and I am ${this.age} years old. My profression conusmes my life and I have no time for friends or family. I am a slave to foul beast known as capitalism.`; } } // Use of class expressions class Student extends Person { constructor(name, age, grade) { super(name, age); this.grade = grade; } greeting() { return `Hey my name is ${this.name} and I am ${this.age} years old and I am in grade ${this.grade}!!`; } } const Jhon = new Wagie(&quot;John&quot;, 25, &quot;Walmart&quot;); const Bob = new Student(&quot;Bob&quot;, 15, 10); const Joe = new Person(&quot;Joe&quot;, 36); console.log(`At ${Jhon.name}&#39;s job at ${Jhon.job}, they Jhon in a heated debate about the state of society Jhon said ${Jhon.greeting()}in sheer confusion Joe and his son Bob also began to say their greetings &quot;${Joe.greeting()}&quot; and &quot;${Bob.greeting()}&quot;`); . At John&#39;s job at Walmart, they Jhon in a heated debate about the state of society Jhon said Hello I work at Walmart and my name is John and I am 25 years old. My profression conusmes my life and I have no time for friends or family. I am a slave to foul beast known as capitalism.in sheer confusion Joe and his son Bob also began to say their greetings &#34;Hello my name is Joe and I am 36 years old&#34; and &#34;Hey my name is Bob and I am 15 years old and I am in grade 10!!&#34; . Sequences . Category: Managing Complexity with Variables | Definition: A sequence is an ordered collection of items where each item holds a relative position with respect to the others. Sequences are one of the most basic Python data types. There are four sequence types in Python: strings, lists, tuples, and range objects. Strings are immutable sequences of Unicode code points. Lists are mutable sequences, typically used to store collections of homogeneous items (where the precise degree of similarity will vary by application). Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the enumerate() built-in). Ranges are immutable sequences of numbers and are commonly used for looping a specific number of times in for loops. | . Sequences Code Example . Butters = [&quot;salted&quot;,&quot;unsalted&quot;,&quot;organic&quot;,&quot;peanut&quot;,&quot;almond&quot;,&quot;cashew&quot;] def Butter_Selecter(Butters): cost = 0 orders = [] print(&quot;We have these butters for sale:&quot;, end = &quot; &quot;) for butter in Butters: print(butter, end = &quot; &quot;) print() while True: rsp = input(&quot;What butter would you like to add to your order? (enter done when your are finished)&quot;) if rsp.lower().strip() in Butters: orders.append(rsp) elif rsp.lower().strip() == &quot;done&quot;: break else: print(&quot;Invalid choice. Please choose a butter from the list.&quot;) print(&quot;Your order is&quot;, end = &quot; &quot;) for order in orders: print(order, end = &quot; butter &quot;, sep = &quot; &quot;) cost += 26.33 # This is a gourmet butter price print(f&quot; nYour total cost is ${round(cost,2)}&quot;) Butter_Selecter(Butters) . We have these butters for sale: salted unsalted organic peanut almond cashew Invalid choice. Please choose a butter from the list. Your order is peanut butter almond butter salted butter unsalted butter organic butter Your total cost is $131.65 . Selection . Category: Managing Complexity with Variables | Definition: Selection is the ability to run certain blocks of code only after certain conditions are met this can be done through the use of conditional statements such as else, if, and elif in python or else if in other languges. Selection can be used to make decisions in a program. For instance if you were to make a program that would ask the user for their age and then print out a message based on their age. You could use selection to make it so that if the user is under 18 it would print out a message saying that they are not old enough to vote, if they are 18 or older it would print out a message saying that they are old enough to vote, and if they are 21 or older it would print out a message saying that they are old enough to drink. This can be used to make a program more interactive and allow it to be more dynamic. | . Selection Code Example . def LAN(): def guests(Type): amount = input(f&quot;How many {Type}s are at your LAN party?&quot;) if amount.strip().lower() == &quot;none&quot;: return 0 else: return int(amount) def names(Type, amount): names = [] for temp in range(amount): name = input(f&quot;What are the names of your {Type}s friends?&quot;) names.append(name) return names gamers = guests(&quot;gamer&quot;) non_gamers = guests(&quot;non gamer&quot;) party_goers = names(&quot;gamer&quot;, gamers) + names(&quot;non gamer&quot;, non_gamers) mountain_dew = 1.5 * gamers chips = 3*gamers + 0.25*non_gamers GT730 = non_gamers print(f&quot;You will need {mountain_dew} liters of Mountain Dew and {round(chips, 3)} kg of chips for your party along with {GT730} GT730 Gaming PCs&quot;) print(&quot;Your party goers are:&quot;, end = &quot; &quot;) print(*party_goers, sep = &quot;, &quot;) LAN() # Through the use of selction through the use of if and else statments the porgram is able to determine not prompt the user for their non-gamer/gamer # friends are present then display the amount of refreshments and special punishments (GT730s) need to be arranged for the party. . You will need 6.0 liters of Mountain Dew and 12.5 kg of chips for your party along with 2 GT730 Gaming PCs Your party goers are: Jhonno, Steve, Barry, Nansi Pelosi, Gary, Steve . def LAN(): def guests(Type): amount = input(f&quot;How many {Type}s are at your LAN party?&quot;) if amount.strip().lower() == &quot;none&quot;: return 0 else: return int(amount) def names(Type, amount): names = [] for temp in range(amount): name = input(f&quot;What are the names of your {Type}s friends?&quot;) names.append(name) return names gamers = guests(&quot;gamer&quot;) non_gamers = guests(&quot;non gamer&quot;) party_goers = names(&quot;gamer&quot;, gamers) + names(&quot;non gamer&quot;, non_gamers) mountain_dew = 1.5 * gamers chips = 3*gamers + 0.25*non_gamers GT730 = non_gamers print(f&quot;You will need {mountain_dew} liters of Mountain Dew and {round(chips, 3)} kg of chips for your party along with {GT730} GT730 Gaming PCs&quot;) print(&quot;Your party goers are:&quot;, end = &quot; &quot;) print(*party_goers, sep = &quot;, &quot;) LAN() # If there are no gamer friends at the LAN party . You will need 0.0 liters of Mountain Dew and 0.5 kg of chips for your party along with 2 GT730 Gaming PCs Your party goers are: berry, jerry . Iteration . Category: Managing Complexity with Variables | Definition: Iteration is the ability to run a block of code multiple times. This can be done through the use of loops. Loops are used to repeat a block of code. For instance if you were to make a program that would print out the numbers 1-10 you could use a loop to make it so that it would print out the numbers 1-10 without having to write out the print statement 10 times. This can be used to make a program more interactive and allow it to be more dynamic. | . Iteration Code Example . def On_The_Wall(): thing = input(&quot;What is on the wall?&quot;) amount = int(input(f&quot;How many {thing}s are on the wall?&quot;)) for item in range(amount, 0, -1): print(f&quot;{item} {thing}s on the wall, {item} {thing}s&quot;) print(f&quot;Take one down, pass it around, {item-1} {thing}s on the wall&quot;) On_The_Wall() # Through the use of iteration the program is able to print out the the # amount of items on the wall and then print out the amount of items on the wall # after one is taken down without having to print it manualy each time this allows # the program to simpler to write, read, and understand. . 5 cheeses on the wall, 5 cheeses Take one down, pass it around, 4 cheeses on the wall 4 cheeses on the wall, 4 cheeses Take one down, pass it around, 3 cheeses on the wall 3 cheeses on the wall, 3 cheeses Take one down, pass it around, 2 cheeses on the wall 2 cheeses on the wall, 2 cheeses Take one down, pass it around, 1 cheeses on the wall 1 cheeses on the wall, 1 cheeses Take one down, pass it around, 0 cheeses on the wall . Expresions . Category: Logical Operations &amp; Decision Making | Definition: An expression is a combination of values, variables, operators with can be evaluated to have different outcome occur. For instance if a certain number is greater than another number in a game the person that rolled the larger number would get a message saying that they won through the use of an expression. | . Expresions Code Example . import random def game(): num_rounds = int(input(&quot;Rounds: &quot;)) for i in range(num_rounds): player1_numbers = (random.randint(1, 6), random.randint(1, 6), random.randint(1, 6)) player2_numbers = (random.randint(1, 6), random.randint(1, 6), random.randint(1, 6)) if max(player1_numbers) &gt; max(player2_numbers): print(&quot;On round &quot;+ str(i+1) +&quot; Player 1 won with a score of &quot; + str(max(player1_numbers)) + &quot; compared to Player 2 with a score of &quot; + str(max(player2_numbers))) elif max(player1_numbers) &lt; max(player2_numbers): print(&quot;On round &quot;+ str(i+1) +&quot; Player 2 won with a score of &quot; + str(max(player2_numbers)) + &quot; compared to Player 1 with a score of &quot; + str(max(player1_numbers))) else: print(&quot;Both players tied with a score of &quot; + str(max(player1_numbers)) + &quot; on round &quot; + str(i)) game() # Through the use of expressions the program is abel to evaluate whether the # maximum value that the player rolled was larger or less thant the other # player then through that be able to print which player won the game # this would otherwise be impossible without the use of expressions. . On round 1 Player 1 won with a score of 4 compared to Player 2 with a score of 3 On round 2 Player 1 won with a score of 6 compared to Player 2 with a score of 4 . Comparsion Operators . Category: Logical Operations &amp; Decision Making | Definiton: Comparsion Operators are used to compare two or more values. Some of these operators in python include ==. !=, &gt;, &lt;, &gt;=, and &lt;=. Which are equal to, not equal to, greater than, less than, greater than or equal to, and less than or equal to respectively. | . Comparsion Operators Code Example . import random words = [&quot;abstraction&quot;, &quot;access&quot;, &quot;adapter&quot;, &quot;algorithm&quot;, &quot;analyst&quot;, &quot;anomaly&quot;, &quot;architecture&quot;, &quot;array&quot;, &quot;artificial&quot;, &quot;attribute&quot;, &quot;backend&quot;, &quot;bandwidth&quot;, &quot;benchmark&quot;, &quot;binary&quot;, &quot;blockchain&quot;, &quot;boolean&quot;, &quot;breadth&quot;, &quot;bug&quot;, &quot;byte&quot;, &quot;cache&quot;, &quot;calculator&quot;, &quot;capacity&quot;, &quot;cartesian&quot;, &quot;category&quot;, &quot;cipher&quot;, &quot;classification&quot;, &quot;client&quot;, &quot;client-server&quot;, &quot;closure&quot;, &quot;cluster&quot;, &quot;code&quot;, &quot;cognitive&quot;, &quot;cohesion&quot;, &quot;command&quot;, &quot;comment&quot;, &quot;communication&quot;, &quot;compiler&quot;, &quot;complexity&quot;, &quot;component&quot;, &quot;computation&quot;, &quot;concurrency&quot;, &quot;configuration&quot;, &quot;connectivity&quot;, &quot;consistency&quot;, &quot;constraint&quot;, &quot;container&quot;, &quot;context&quot;, &quot;contingency&quot;, &quot;continuous&quot;, &quot;control&quot;, &quot;converter&quot;, &quot;coordination&quot;, &quot;core&quot;, &quot;correlation&quot;, &quot;cursor&quot;, &quot;data&quot;, &quot;database&quot;, &quot;debugging&quot;, &quot;declaration&quot;, &quot;decrement&quot;, &quot;definition&quot;, &quot;degradation&quot;, &quot;delegation&quot;, &quot;delimiter&quot;, &quot;density&quot;, &quot;derivation&quot;, &quot;descendant&quot;, &quot;design&quot;, &quot;detection&quot;, &quot;dictionary&quot;, &quot;dimension&quot;, &quot;directive&quot;, &quot;discrete&quot;, &quot;dispatch&quot;, &quot;distributed&quot;, &quot;divergence&quot;, &quot;dynamic&quot;, &quot;echo&quot;, &quot;encoding&quot;, &quot;encryption&quot;, &quot;endpoint&quot;, &quot;enumeration&quot;, &quot;environment&quot;, &quot;equation&quot;, &quot;error&quot;, &quot;event&quot;, &quot;exception&quot;, &quot;execution&quot;, &quot;expression&quot;, &quot;extraction&quot;, &quot;failure&quot;, &quot;fault&quot;, &quot;fetch&quot;, &quot;flow&quot;, &quot;fragment&quot;, &quot;function&quot;, &quot;gateway&quot;, &quot;generic&quot;, &quot;granularity&quot;, &quot;graph&quot;, &quot;hashing&quot;, &quot;heap&quot;, &quot;heuristic&quot;, &quot;hierarchy&quot;, &quot;hyperlink&quot;, &quot;identity&quot;, &quot;implementation&quot;, &quot;inclusion&quot;, &quot;increment&quot;, &quot;index&quot;, &quot;inference&quot;, &quot;inheritance&quot;, &quot;initialization&quot;, &quot;input&quot;, &quot;instance&quot;, &quot;instruction&quot;, &quot;interface&quot;, &quot;interoperability&quot;, &quot;iteration&quot;, &quot;key&quot;, &quot;keyword&quot;, &quot;label&quot;, &quot;latency&quot;, &quot;library&quot;, &quot;lifecycle&quot;, &quot;link&quot;, &quot;load&quot;, &quot;localization&quot;, &quot;logic&quot;, &quot;loop&quot;, &quot;machine&quot;, &quot;management&quot;, &quot;manipulation&quot;, &quot;mapping&quot;, &quot;matrix&quot;, &quot;measurement&quot;, &quot;method&quot;, &quot;middleware&quot;, &quot;migration&quot;, &quot;model&quot;, &quot;modification&quot;, &quot;module&quot;, &quot;monitoring&quot;] def word_game(words): player1_word = random.choice(words) player2_word = random.choice(words) player1_score = len(player1_word) player2_score = len(player2_word) if player1_score &gt; player2_score: print(f&quot;Player 1 wins as thier word {player1_word} is longer than Player 2&#39;s word {player2_word} by {player1_score - player2_score} letters&quot;) elif player2_score &gt; player1_score: print(f&quot;Player 2 wins as thier word {player2_word} is longer than Player 1&#39;s word {player1_word} by {player2_score - player1_score} letters&quot;) else: print(f&quot;Both players had words which were the same in length with a length of {player1_score} letters player 1&#39;s word was {player1_word} and player 2&#39;s word was {player2_word}&quot;) word_game(words) # Through the use of a comparsion operator the program is able to determine which player has the longest word and then print out # which player one and by how much longer their word was in comparsion so the other player. . Player 1 wins as thier word compiler is longer than Player 2&#39;s word failure by 1 letters . Boolean Expressions &amp; Selection . Category: Logical Operations &amp; Decision Making | Definition: Boolean Expressions are used to evaluate expressions are either True or False and can be used with selection statments such as if, and elif to make exucute certain blocks of code. | . Boolean Expressions &amp; Selection Code Example . def Citzenship_Checker(): age = int(input(&quot;What is your age?&quot;)) citzenship = input(&quot;What country are you a citzen of?&quot;) if age &gt;= 18 and citzenship.strip().lower() == &quot;New Zealand&quot;.strip().lower(): print(f&quot;You are {age} so you are able to vote in New Zealand&quot;) elif age &lt;= 18 and citzenship.strip().lower() == &quot;New Zealand&quot;.strip().lower(): print(f&quot;You are {age} so you are a minor but a citizen of New Zealand&quot;) else: print(f&quot;You are not a citizen of New Zealand but {citzenship} and are {age} years old. Check the voting rules in {citzenship} to know if you can vote.&quot;) Citzenship_Checker() # Through the use of Boolean statements the program is able to determine if # the users age is greater than or equal to 18 is True # and if they are a citizen of New Zealand is also true # They are able to vote and otherwise informs of them of their # respective reason why the cannot vote in New Zealand. . You are not a citizen of New Zealand but Mexico and are 2 years old. Check the voting rules in Mexico to know if you can vote. . Booleans Expressions and Iteration . Category: Logical Operations &amp; Decision Making | Definition: Boolean Expressions can be used with iteration as they can be used as a loopoing condition so if the condition was true the loop would continue to run and if it was false the loop would stop running. Or you could make an infinite loop by making the condition always true. | . Booleans Expressions and Iteration Code Example . def pantry(): cookie_jar = int(input(&quot;How many cookies are in the pantry?&quot;)) end = int(input(&quot;How many cookies will you eat?&quot;)) limit = cookie_jar - end while cookie_jar &gt; limit: cookie_jar -= 1 print(f&quot;There are {cookie_jar} cookies left in the pantry after you ate {end} cookies and you gained {end*40} calories&quot;) pantry() . There are 33 cookies left in the pantry after you ate 2 cookies and you gained 80 calories . Truth Tables . Category: Logical Operations &amp; Decision Making | Definition: Truth tables show the results of combining boolean values to show the whether or not a condition can be true or false. For instance if you were to make a truth table for the condition of a person being able to vote you could make it so that the first column would be the age of the person and the second column would be whether or not they are a citizen. Then you could make it so that if the person is 18 or older and a citizen they can vote, if they are 18 or older and not a citizen they can not vote, if they are under 18 and a citizen they can not vote, and if they are under 18 and not a citizen they can not vote. This is an illustration of how truth tables can be used to make decisions in a program. However they can also be used when expressing other operations besides and such as or, not, and xor. | . Truth Tables Code Example . def Truth_Table(A, B): def Logic(A, B): AND = A and B OR = A or B NOT = not A XOR = A ^ B return AND, OR, NOT, XOR AND, OR, NOT, XOR = Logic(A, B) print(f&quot;{A} t{B} t{AND} t{OR} t{NOT} t{XOR}&quot;) print(&quot;A tB tAND tOR tNOT tXOR&quot;) Truth_Table(True, False) Truth_Table(False, True) Truth_Table(False, False) Truth_Table(True, True) # Through a Truth Table the program is able to # display the result of the logic gates AND, OR, NOT, # and XOR. Illustrating how each gate functions. . A B AND OR NOT XOR True False False True False True False True False True True True False False False False True False True True True True False False . Charectors . Category: Strings &amp; String Operations | Definition: A character is a symbol that represents a letter, number, or other character. They are used to represent all kinds of itmes including special charectors and spaces. Ex. !@#$%^&amp;*()_+{}|:&quot;&lt;&gt;?`~[] ;&#39;,./ are all charectors. Charectors can be stored in strings in python. | . Charectors Code Example . def charectors(): word = input(&quot;What is your word?&quot;) print(f&quot;Your word is {word}&quot;) for charector in word: print(f&quot;{charector} has the ASCII code {ord(charector)}&quot;) charectors() # This program showcases charectors stored in a string which it # then iterates through printing the ASCII code that each # charector correlates to. . Your word is butter b has the ASCII code 98 u has the ASCII code 117 t has the ASCII code 116 t has the ASCII code 116 e has the ASCII code 101 r has the ASCII code 114 . Strings . Category: Strings &amp; String Operations | Definition: Strings are a datatype that is used to store text in a program. For instance if you were to make a program that would ask the user for their name and then print out a message saying hello to them you could use a string to store the users name. | . Strings Code Example . Things = [1, 3.23, &quot;Cheese&quot;, True, 5, [1, 2 , 3]] def string_check(Things): for thing in Things: if isinstance(thing, str): print(f&quot;{thing} is a string&quot;) else: print(f&quot;{thing} is not a string&quot;) string_check(Things) . 1 is not a string 3.23 is not a string Cheese is a string True is not a string 5 is not a string [1, 2, 3] is not a string . Length . Category: Strings &amp; String Operations | Definition: Length is represented by the len() function in Python and can be used to find the lenth of a string, tuple, dictionary, list, or range. | . Length Code Example . words1 = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;durian&quot;, &quot;elderberry&quot;, &quot;fig&quot;, &quot;grape&quot;, &quot;huckleberry&quot;, &quot;iris&quot;, &quot;jujube&quot;] words2 = [&quot;kiwi&quot;, &quot;lemon&quot;, &quot;mango&quot;, &quot;nectarine&quot;, &quot;orange&quot;, &quot;pear&quot;, &quot;quince&quot;, &quot;raspberry&quot;, &quot;strawberry&quot;, &quot;tangerine&quot;, &quot;watermelon&quot;, &quot;xigua&quot;, &quot;yam&quot;, &quot;zucchini&quot;] def parser(words): if len(words) &lt;= 10: for word in words: print(f&quot;{word} has {len(word)} letters&quot;) else: print(&quot;ERROR: Too many words&quot;) parser(words2) parser(words1) . ERROR: Too many words apple has 5 letters banana has 6 letters cherry has 6 letters durian has 6 letters elderberry has 10 letters fig has 3 letters grape has 5 letters huckleberry has 11 letters iris has 4 letters jujube has 6 letters . Concatenation . Category: Strings &amp; String Operations | Definition: Concatenation is combining two or more strings into one larger string. | . Concatenation Code Example . def concatenator(): words = [] word = input(&quot;Enter a word or press enter to stop: &quot;) while word != &quot;&quot;: words.append(word) word = input(&quot;Enter a word or press enter to stop: &quot;) print(&quot;The words concatenated together are: &quot;, end = &quot;&quot;) print(&quot; &quot;.join(words)) concatenator() # Through the use of the join function the program is able to # take a list of words and then join them together into a string # through string concatenation. . The words concatenated together are: butter is butter I refuse to believe otherwise . Upper . Category: Strings &amp; String Operations | Definition: Upper is a function that can be used to make all the letters in a string uppercase. In python this is represented by the upper() function. | . Upper Code Example . def Yeller(): word = input(&quot;What do you want to Yell?&quot;) print(f&quot;Your orginal string was: {word}&quot;) print(f&quot;Your yelling string is: {word.upper()}!!!&quot;) Yeller() # The use of the upper function to make the # Input string all uppercase and then print . Your orginal string was: sh this is library Your yelling string is: SH THIS IS LIBRARY!!! . Lower . Category: Strings &amp; String Operations | Definition: Lower is a function that can be used to make all the letters in a string lowercase. In python this is represented by the lower() function. | . Lower Code Example . def Library(): word = input(&quot;What are you yelling about?&quot;) print(f&quot;Your orginal string was: {word}&quot;) print(f&quot;Your library friendly string is: {word.lower()}&quot;) Library() # The use of the lower function to make the # Input string all lowercase and then print . Your orginal string was: THERE ARE TOO MANY CHEESES IN THE CHEESE ISLE AT WALMART Your library friendly string is: there are too many cheeses in the cheese isle at walmart . Traversing Strings . Category: Strings &amp; String Operations | Definition: Traversing a string is the ability to access each individual charector in a string. As each charector is an iterable object in python you can use a for loop to access each individual charector in a string. | . Traversing Strings Code Example . def seperator(): word = input(&quot;What is your word?&quot;) print(f&quot;Your orginal string was: {word}&quot;) print(&quot;Your seperated string is: &quot;) for charector in word: print(charector) seperator() # Through using a for loop the program is able # to iterate through the string and print each # charector on a new line. . Your orginal string was: butter Your seperated string is: b u t t e r . Python If . Category: Conditional Statements | Definition: The If statment is a conditional statement that is used to create condition if met will execute a block of code. For instance if you were to make a program that would prompt the user for a certain word if it was of a certain length it would print out a message saying that the word was of the correct length. | . Python If Code Example . def word_guesser(word_bank, word): if word in word_bank: print(f&quot;Your word {word} was in the word bank&quot;) else: print(f&quot;Your word {word} was not in the word bank&quot;) words = [&quot;abstraction&quot;, &quot;access&quot;, &quot;adapter&quot;, &quot;algorithm&quot;, &quot;analyst&quot;, &quot;anomaly&quot;, &quot;architecture&quot;, &quot;array&quot;, &quot;artificial&quot;, &quot;attribute&quot;, &quot;backend&quot;, &quot;bandwidth&quot;, &quot;benchmark&quot;, &quot;binary&quot;, &quot;blockchain&quot;, &quot;boolean&quot;, &quot;breadth&quot;, &quot;bug&quot;, &quot;byte&quot;, &quot;cache&quot;, &quot;calculator&quot;, &quot;capacity&quot;, &quot;cartesian&quot;, &quot;category&quot;, &quot;cipher&quot;, &quot;classification&quot;, &quot;client&quot;, &quot;client-server&quot;, &quot;closure&quot;, &quot;cluster&quot;, &quot;code&quot;, &quot;cognitive&quot;, &quot;cohesion&quot;, &quot;command&quot;, &quot;comment&quot;, &quot;communication&quot;, &quot;compiler&quot;, &quot;complexity&quot;, &quot;component&quot;, &quot;computation&quot;, &quot;concurrency&quot;, &quot;configuration&quot;, &quot;connectivity&quot;, &quot;consistency&quot;, &quot;constraint&quot;, &quot;container&quot;, &quot;context&quot;, &quot;contingency&quot;, &quot;continuous&quot;, &quot;control&quot;, &quot;converter&quot;, &quot;coordination&quot;, &quot;core&quot;, &quot;correlation&quot;, &quot;cursor&quot;, &quot;data&quot;, &quot;database&quot;, &quot;debugging&quot;, &quot;declaration&quot;, &quot;decrement&quot;, &quot;definition&quot;, &quot;degradation&quot;, &quot;delegation&quot;, &quot;delimiter&quot;, &quot;density&quot;, &quot;derivation&quot;, &quot;descendant&quot;, &quot;design&quot;, &quot;detection&quot;, &quot;dictionary&quot;, &quot;dimension&quot;, &quot;directive&quot;, &quot;discrete&quot;, &quot;dispatch&quot;, &quot;distributed&quot;, &quot;divergence&quot;, &quot;dynamic&quot;, &quot;echo&quot;, &quot;encoding&quot;, &quot;encryption&quot;, &quot;endpoint&quot;, &quot;enumeration&quot;, &quot;environment&quot;, &quot;equation&quot;, &quot;error&quot;, &quot;event&quot;, &quot;exception&quot;, &quot;execution&quot;, &quot;expression&quot;, &quot;extraction&quot;, &quot;failure&quot;, &quot;fault&quot;, &quot;fetch&quot;, &quot;flow&quot;, &quot;fragment&quot;, &quot;function&quot;, &quot;gateway&quot;, &quot;generic&quot;, &quot;granularity&quot;, &quot;graph&quot;, &quot;hashing&quot;, &quot;heap&quot;, &quot;heuristic&quot;, &quot;hierarchy&quot;, &quot;hyperlink&quot;, &quot;identity&quot;, &quot;implementation&quot;, &quot;inclusion&quot;, &quot;increment&quot;, &quot;index&quot;, &quot;inference&quot;, &quot;inheritance&quot;, &quot;initialization&quot;, &quot;input&quot;, &quot;instance&quot;, &quot;instruction&quot;, &quot;interface&quot;, &quot;interoperability&quot;, &quot;iteration&quot;, &quot;key&quot;, &quot;keyword&quot;, &quot;label&quot;, &quot;latency&quot;, &quot;library&quot;, &quot;lifecycle&quot;, &quot;link&quot;, &quot;load&quot;, &quot;localization&quot;, &quot;logic&quot;, &quot;loop&quot;, &quot;machine&quot;, &quot;management&quot;, &quot;manipulation&quot;, &quot;mapping&quot;, &quot;matrix&quot;, &quot;measurement&quot;, &quot;method&quot;, &quot;middleware&quot;, &quot;migration&quot;, &quot;model&quot;, &quot;modification&quot;, &quot;module&quot;, &quot;monitoring&quot;] word = input(&quot;What word do you want to check?&quot;) word_guesser(words, word) # Through the use of the if statement the program is able to execute # a block of code informing the user that thier word is in their # word is in the word bank or not if the condition that the word is # in the word bank is met. If it is not met the else statemtent # executes and informs the user that the word is not in the word bank. . Your word blockchain was in the word bank . Elif . Category: Conditional Statements | Defintion: Elif or Else If is a conditional statement that is used to create a condition if met will execute a block of code. However it is used after an if statement and can be used to create multiple conditions. An example could be if there was a correct word and you had a game where the user had to guess a word of the same length if their word was too long or too short it would print out a message saying that the word was too long or too short. | . Elif Code Example . def word_guesser(word): while True: guess = input(&quot;What word do you want to check?&quot;) if len(guess) == len(word): print(f&quot;Your guess {guess} was the correct length&quot;) break elif len(guess) &gt; len(word): print(f&quot;Your guess {guess} was too long&quot;) else: print(f&quot;Your guess {guess} was too short&quot;) word = &quot;abstraction&quot; word_guesser(word) # Through the use of elif statment the porgram is able to # Excute a different block of code depending on if a # another condition is true other than just having an # else statment in this case it woud alows the program # to check if the guess is too long or too short not just # if it is the wrong length. . Your guess truffles was too short Your guess butter was too short Your guess gamer was too short Your guess butterscotch was too long Your guess abstraction was the correct length . Else Conditionals . Category: Conditional Statements | Definiton: Else is a conditional statement that will execute if the other condtion is not met so if the condition of an if statement is not met it will execute the other block of code. | . Else Conditionals Code Example . def addition_game(numbers): num1 = int(input(&quot;What is your first number?&quot;)) num2 = int(input(&quot;What is your second number?&quot;)) if num1 + num2 in numbers: print(f&quot;Your answer {num1 + num2} was in the list of numbers&quot;) else: print(f&quot;Your answer {num1 + num2} was not in the list of numbers&quot;) numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] addition_game(numbers) # Through the use of the else statment the program is able to able # print that the sum of the users two numbers is not in the list of # numbers as the if condition that the sum of the two numbers is in # the list of numbers is not met. . Your answer 53 was not in the list of numbers . Nested Selection Statement . Category: Conditional Statements | Definition: Nested selection statements are used to allow for more complicated logic in programs so to create a condition if another condition is also true. | . Nested Selection Statement Code Example . def number_compare(num1, num2): if num1 &gt; num2: print(f&quot;Your first number {num1} was greater than your second number {num2}&quot;) if num1 &gt;0: print(&quot;Your first number was also positive&quot;) else: print(&quot;Your first number was also negative&quot;) if num2 &gt; 0: print(&quot;Your second number was also positive&quot;) else: print(&quot;Your second number was also negative&quot;) elif num1 &lt; num2: print(f&quot;Your first number {num1} was less than your second number {num2}&quot;) if num2 &gt; 0: print(&quot;Your second number was also positive&quot;) else: print(&quot;Your second number was also negative&quot;) if num1 &gt;0: print(&quot;Your first number was also positive&quot;) else: print(&quot;Your first number was also negative&quot;) else: print(f&quot;Your first number {num1} was equal to your second number {num2}&quot;) if num1 &gt; 0: print(&quot;Your numbers were also positive&quot;) else: print(&quot;Your numbers were also negative&quot;) number_compare(-1,1) # Through the use of having mutliple nested # selection statements the program is able to # determine which number is larger of the two # along with the sign of the numbers. This is # possible as the program can have multiple # if statements within the selection statements # allowing multiple sub-conditions to be met. # . Your first number -1 was less than your second number 1 Your second number was also positive Your first number was also negative . Python For . Category: Loops &amp; Iteration | Definition: The For loop is a loop that is used to repeat a block of code a certain number of times. For instance you could write a program that would iterate through a list of numbers and print out each number in the list. | . Python For Code Example . wonders = [ (&quot;Great Pyramid of Giza&quot;, 29.9792, 31.1342), (&quot;Hanging Gardens of Babylon&quot;, 32.5350, 44.4270), (&quot;Temple of Artemis at Ephesus&quot;, 37.9279, 27.3506), (&quot;Statue of Zeus at Olympia&quot;, 37.6275, 21.6405), (&quot;Mausoleum of Halicarnassus&quot;, 37.0353, 27.4162), (&quot;Colossus of Rhodes&quot;, 36.4450, 28.2269), (&quot;Lighthouse of Alexandria&quot;, 31.2156, 29.9456)] def wonder_Location(wonders): for wonder in wonders: print(f&quot;{wonder[0]} is located at {wonder[1]}, {wonder[2]}&quot;) wonder_Location(wonders) # Through the use of a for loop the program is able to iterate through # the iterables in the list which are tuples and be able to print the # name of the wonder along with the latitude and longitude of the wonder. . Great Pyramid of Giza is located at 29.9792, 31.1342 Hanging Gardens of Babylon is located at 32.535, 44.427 Temple of Artemis at Ephesus is located at 37.9279, 27.3506 Statue of Zeus at Olympia is located at 37.6275, 21.6405 Mausoleum of Halicarnassus is located at 37.0353, 27.4162 Colossus of Rhodes is located at 36.445, 28.2269 Lighthouse of Alexandria is located at 31.2156, 29.9456 . While Loops With Range . Category: Loops &amp; Iteration | Definition: A while loops is a kind of loop that iterates while a condition is true this could be used with range in a way so you can iterate a certain number of times. For instance using this kind of loop you would be able to iterate only 5 times to only execute a certain block of code that amount of times such as a print statement. | . While Loops With Range Code Example . def printer(message): i = 0 while i &lt; 5: print(message) i += 1 printer(&quot;Hello World&quot;) # Through the use of a while loop # with range you are able to # print the message only 5 times . Hello World Hello World Hello World Hello World Hello World . List Combining Loops With Conditionals To Break . Category: Loops &amp; Iteration | Definition: You can combine loops with conditionals that could prematurly terminate that loop if it were to be iterating through a list if a certain condition was met. | . List Combining Loops With Conditionals To Break Code Example . words = [&quot;hello&quot;, &quot;world&quot;, &quot;spam&quot;, &quot;eggs&quot;] def word_search(words): loops = 0 for word in words: rsp = input(&quot;What word do you want to check?&quot;) if rsp.lower().strip() in words: print(f&quot;{rsp} was found after {loops} loops&quot;) break else: print(f&quot;{rsp} was not found after {loops} loops&quot;) loops += 1 word_search(words) # Through the use of a for loop which iterates # through the list of words and conditionals # within the program is able end the loop # once the word is found before the loop is done . gamer was not found after 0 loops butter was not found after 1 loops world was found after 2 loops . Continue . Category: Loops &amp; Iteration | Definition: Continue is a keyword which is used to skip the current iteration and move on to the next one. For instance if you were to make a program that would iterate through a list of numbers and print out all the even numbers you could use continue to skip the odd numbers. | . Continue Code Example . for i in range(10): if i % 2 ==0: continue print(i) # Through the use of the continue statement # the program is able to skip the even numbers # and only print the odd numbers . 1 3 5 7 9 . for i in range(10): if i % 2 == 0: print(i) # Without the use of the continue statement # The program only printed the even numbers # as without continue they were not skipped . 0 2 4 6 8 . Procedural Abstraction . Category: Algorythms | Definition: Procedural Abstraction is about creating a simplifed interface for a more complex operation. Which is done by breaking things up into smaller componenents and steps to be able to deal with complex problems more easily and also being able to resure code through spliting it up into smaller more managable functions. | . Procedural Abstraction Code Example . class numbers: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def number_adder(self): return self.num1 + self.num2 def number_subtractor(self): return self.num1 - self.num2 def number_multiplier(self): return self.num1 * self.num2 def number_divider(self): return round(self.num1 / self.num2, 2) def number_exponent(self): return self.num1 ** self.num2 def __str__(self): return f&quot;num1: {self.num1} and num2: {self.num2} are the numbers being used&quot; nums = numbers(3,7) print(nums) print(f&quot;The numbers added together is: {nums.number_adder()}&quot;) print(f&quot;The numbers subtracted together is: {nums.number_subtractor()}&quot;) print(f&quot;The numbers multiplied together is: {nums.number_multiplier()}&quot;) print(f&quot;The numbers divded from each other are: {nums.number_divider()}&quot;) print(f&quot;The num1 to the power of num2 is: {nums.number_exponent()}&quot;) # Through the use of procedural abstaction the more complex # functions are abstracted into smaller functions which are # easier to understand and read as well as being able to be # used by the user of the program. . num1: 3 and num2: 7 are the numbers being used The numbers added together is: 10 The numbers subtracted together is: -4 The numbers multiplied together is: 21 The numbers divded from each other are: 0.43 The num1 to the power of num2 is: 2187 . Python Def Procedures . Category: Algorythms | Definition: A def procedure is the way functions are defined in Python and are used to create blocks of code that perform certain actions which can be executed at a later date. For innstance you would be able to create a function using a def procedure that could add two numbers than call that function in other application during your program. | . Python Def Procedures Code Example . def hello_there(name): print(f&quot;Hello there {name}&quot;) def friend(): name = input(&quot;What is your name?&quot;) hello_there(name) friend() friend() # Through the use of a def procudure the # same block of code is able to be used # multiple times without having to rewrite # the same code over and over again. # Seen in the way both people could be # greeted with the same code. . Hello there Jhonny Silverstone Hello there Jhonny Appleseed . Parameters . Category: Algorythms | Definition: Parameters are variables that are used to pass information into a function. For instance if you were to make a function that would add two numbers the parameters of the function would be the two values. | . Parameters Code Example . def number_adder(num1, num2): print(f&quot;{num1} and {num2} added together is: {num1 + num2}&quot;) def number_subtractor(num1, num2): print(f&quot;{num1} subtracted by {num2} is: {num1 - num2}&quot;) number_adder(33,27) number_subtractor(69,420) # Through the adding and subtraction # functions it can be seen through # the use of parameters in the values # that are passed through the functions # that are able to be used in the functions # to be able to perform thier repective operations. . 33 and 27 added together is: 60 69 subtracted by 420 is: -351 . Return Values . Category: Algorythms | Definition: Return values are values that are returned from a function once it has completed exeuction. For instance if you were to create function which added two numbers together once the function had completed execution it would return the sum of the two numbers. In Python this is represented by the return keyword. | . Return Values Code Example . class Rectangle: def __init__(self, length, width, height): self.length = length self.width = width self.height = height def volume (self): volume = self.length * self.width * self.height return volume def surface_area(self): surface_area = 2 * (self.length * self.width + self.length * self.height + self.width * self.height) return surface_area def __str__(self): return f&quot;Rectanglular Prism: {self.length} ft x {self.width} ft x {self.height} ft&quot; rect = Rectangle(2,3,4) print(rect) print(f&quot;Volume: {rect.volume()} ft^3&quot;) print(f&quot;Surface Area: {rect.surface_area()} ft^2&quot;) # Through the use of return statmnts in the functions # the program is able to return the values of the # created for are and volume respectively after the # functions has completed executing. Which allows # the program to be able to print the values the # functions return. . Rectanglular Prism: 2 ft x 3 ft x 4 ft Volume: 24 ft^3 Surface Area: 52 ft^2 .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/chapter3/week16/vocab/2022/12/19/vocabunit3.html",
            "relUrl": "/chapter3/week16/vocab/2022/12/19/vocabunit3.html",
            "date": " • Dec 19, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 2 Vocabulary",
            "content": "Word List . Data Terms: . Bits | Bytes | Hexadecimal | Nibbles | . Binary Numbers: . Unsigned Integer | Signed Integer | Floating Point | . Binary Data Abstractions: . Boolean | ASCII | Unicode | RGB | . Data Compression: . Lossless | Lossy | . Bits . Category: Data Terms | Definition: A bit is the smallest unit of data in a computer. It can have one of two values: 0 or 1. Can store all types of data. | . Bits Code Example . def DecimalToBinary(n): binary_digits = [] while n &gt; 0: binary_digits.append(n % 2) n = n // 2 return &#39;&#39;.join(str(d) for d in reversed(binary_digits)) print(DecimalToBinary(10)) # Output: 1010 print(DecimalToBinary(100)) # Output: 1100100 print(DecimalToBinary(255)) # Output: 11111111 . 1010 1100100 11111111 . Bytes . Category: Data Terms | Defintion: A byte is a group of 8 bits. It is the smallest unit of data that can be directly addressed by a computer. | . Bytes Code Example . string = &quot;Hello, world!&quot; byte_object = bytes(string, &quot;utf-8&quot;) print(byte_object) # Output: b&#39;Hello, world!&#39; print(f&quot;Number of bytes: {len(byte_object)}&quot;) # Output: Number of bytes: 13 # Byte back to string string = byte_object.decode(&quot;utf-8&quot;) print(string) # Output: Hello, world! . b&#39;Hello, world!&#39; Number of bytes: 13 Hello, world! . Hexadecimal . Category: Data Terms | Definition: A hexadecimal number is a number expressed in base 16 similar to decimal which is expressed in base 10. This means that each place represents a power of 16. The letters A-F are used to reprsent the values which are greater than 0-9 so A = 10, B = 11, etc. It is a convenient way to represent a byte value. Each hexadecimal digit represents 4 bits. | . Hexadecimal Code Example . hex_string = input(&quot;Enter a hexadecimal number: &quot;) decimal_num = int(hex_string, 16) binary_num = bin(decimal_num) print(&quot;Hexadecimal number:&quot;, hex_string) print(&quot;Decimal equivalent:&quot;, decimal_num) print(&quot;Binary equivalent:&quot;, binary_num) # what this code does is that it takes an input # from the user of a hexadecimal string then # converts that code to a decimal number using # the bin and int functions as they are just # different methods of storing data . Hexadecimal number: 0xA5 Decimal equivalent: 165 Binary equivalent: 0b10100101 . Nibbles . Category: Data Terms | Definition: A nibble is a group of 4 bits. It is half of a byte. It is often used to represent a single digit in a hexadecimal number (as each hexadecimal digit represents 4 bits). A high nibble is the most significant 4 bits of a byte. A low nibble is the least significant 4 bits of a byte. | . Nibbles Code Example . byte = 0xA5 # Extract the high nibble (the four most significant bits) # uses the bitwise right shift operator so that is shifts # the most 4 most important bits(high nibble) to the right # discard the 4 less significant bits (low nibble) high_nibble = byte &gt;&gt; 4 # Extract the low nibble (the four least significant bits) # through the use of the bitwise and operator as the 0x0F # represents the last for bits thus through the program it # does the inverse of what the first portion does and extracts # the 4 least significant bits which would be the low nibble low_nibble = byte &amp; 0x0F # Convert the nibbles to hexadecimal strings high_nibble_hex = hex(high_nibble) low_nibble_hex = hex(low_nibble) # Print the results print(&quot;Byte:&quot;, byte) print(&quot;High nibble:&quot;, high_nibble_hex) print(&quot;Low nibble:&quot;, low_nibble_hex) . Byte: 165 High nibble: 0xa Low nibble: 0x5 . Unsigned Integer . Category: Binary Numbers | Definition: An unsigned integer is a number that can only be positive. It is represented in binary using the same number of bits as the number of bits in the computer&#39;s word size. For example, a 32-bit computer uses 32 bits to represent an unsigned integer. So an unsigned integer can only be used in situations where the number used cannot be negative so in senarios like a shopping list where the number of groceries you need to buy cannot be negative. The advantages to using an unsigned integer is that it is faster to compute than a signed integer and it is easier to store in memory. The disadvantages are that it can only be used in situations where the number cannot be negative and it can only represent positive numbers making it prone to overflow errors if the number is implemented incorrectly in situation where there can be negative numbers such as a subtraction problem. | . Unsigned Integer Code Example . FYI: Python doesn&#39;t have unsigned integers so the ctypes module needs to be imported. | . from ctypes import c_uint shopping_list = [] # Declares an unsigned integer to store the numbers in the shopping list this is done as the list cannot have negative numbers # Making it it better than a signed integer in this case as this case is more appropriate for a shopping list item_count = c_uint(0) # Function to add an item to the shopping list def add_item(item): global item_count shopping_list.append(item) item_count.value += 1 print(f&quot; n{item} added to shopping list.&quot;) # Function to remove an item from the shopping list this prevents an overflow error # From occuring as the check in the remove items function makes it so that if only if the # number of items in the shopping list is greater than 0 can an item be removed # this prevents the number of items in the shopping list from going below 0 # thus eleminating the possiblity of an overflow error occuring def remove_item(item): global item_count if item in shopping_list: shopping_list.remove(item) if item_count.value &gt; 0: item_count.value -= 1 else: item_count.value = 0 print(&quot; nItem count is set to 0 cannot have a negative number of items in the shopping list.&quot;) print(f&quot; n{item} removed from shopping list.&quot;) else: print(f&quot; n{item} not found in shopping list.&quot;) # Add some items to the shopping list add_item(&quot;Milk&quot;) add_item(&quot;Bread&quot;) add_item(&quot;Eggs&quot;) # Prints the current shopping list print(f&quot; nCurrent shopping list: {shopping_list}&quot;) # Remove an item from the shopping list remove_item(&quot;Bread&quot;) # Print the current shopping list print(f&quot; nCurrent shopping list: {shopping_list}&quot;) # Try to remove an item that is not in the shopping list remove_item(&quot;Sugar&quot;) . Milk added to shopping list. Bread added to shopping list. Eggs added to shopping list. Current shopping list: [&#39;Milk&#39;, &#39;Bread&#39;, &#39;Eggs&#39;] Bread removed from shopping list. Current shopping list: [&#39;Milk&#39;, &#39;Eggs&#39;] Sugar not found in shopping list. . Signed Integer . Category: Binary Numbers | Definition: A signed integer is a number that can be positive or negative. It is represented in binary using the same number of bits as the number of bits in the computer&#39;s word size. For example, a 32-bit computer uses 32 bits to represent a signed integer. So a signed integer can be used in situations where the number used can be negative so in senarios like a subtraction problem where the output can be either negative or postive where only integers are used. The advantages to using a signed integer is that it can be used in situations where the number can be negative and it can represent positive and negative numbers. The disadvantages are that it is slower to compute than an unsigned integer and it is more difficult to store in memory. Also compared to an unsigned integer, smaller numbers can be stored in the same amount of space but are more efficient than floating point numbers. | . Signed Integer Code Example . def subtractor(): num1 = int(input(&quot;Enter first number: &quot;)) num2 = int(input(&quot;Enter second number: &quot;)) print(f&quot;The difference between {num1} and {num2} is {num1 - num2}&quot;) subtractor() # As illustrated it can be seen as through the use of a # signed integer the program is able to store and dispaly # negative values as well as positive values # if an unsigned integer would have been used # in this senario the program would have had an overflow error . The difference between 21 and 69 is -48 . Floating Point . Category: Binary Numbers | Definition: A floating point number is a number that can be positive or negative and can have a decimal point. It is represented in binary using the same number of bits as the number of bits in the computer&#39;s word size. For example, a 32-bit computer uses 32 bits to represent a floating point number. So a floating point number can be used in situations where the number used can be negative and can have a decimal point so in senarios like a temperature where the temperature can be negative and can have a decimal point. The advantages to using a floating point number is that it can be used in situations where the number can be negative and can have a decimal point and it can represent positive and negative numbers. The disadvantages are that it is slower to compute than an unsigned and signed integer and it is more difficult to store in memory. Also compared to an unsigned and signed integer, smaller numbers can be stored in the same amount of space. | . Floating Point Code Example . def convertFahrenheit(temperature): celsius = temperature - 32 celsius = celsius * 5/9 print(f&quot; nThe temperature outside is {round(celsius, 7)} degrees celsius&quot;) outsideTemp = input(&quot;Enter temperature in celsius&quot;) outsideTemp = float(outsideTemp) print(f&quot; nThe tempreature outside is {outsideTemp} degrees farenheit&quot;) convertFahrenheit(outsideTemp) # As seen the program can handle both postive and negative numbers # Along with decimals as well as whole numbers # This is due to the fact that the program is using a floating number # This is best when there is divsion involved such as the tempreature # conversion as it allows the program to be able to display # information with more precision than if an integer was used . The tempreature outside is 21.21 degrees farenheit The temperature outside is -5.9944444 degrees celsius . Boolean . Category: Binary Data Abstractions | Definition: A boolean is a data type that can only have two values: True or False. So it can be used in programs such as conditional statments to determine if a certain condition is true or false it can excute a certain actions. There are many procedures that output a boolean value. | . Boolean Code Example . things = [1, 2.0, &quot;snowflake&quot;, True, 4, 5.0, &quot;butterfly&quot;, False, 7, 8.0, &quot;pumpernickle toast&quot;, True, 10, 11.0, &quot;rainbow&quot;, False] def thingchecker(things): for thing in things: # Had to add this portion as it seems that booleans and # integers are both considered integers in python for some reason # as it turns out that is because booleans are a subclass of integers if isinstance(thing, int) and not isinstance(thing, bool): print(f&quot;{thing} is an integer&quot;) elif isinstance(thing, float): print(f&quot;{thing} is a float&quot;) elif isinstance(thing, str): print(f&quot;{thing} is a string&quot;) elif isinstance(thing, bool): print(f&quot;{thing} is a boolean&quot;) else: print(&quot;The input is something else&quot;) thingchecker(things) . 1 is an integer 2.0 is a float snowflake is a string True is a boolean 4 is an integer 5.0 is a float butterfly is a string False is a boolean 7 is an integer 8.0 is a float pumpernickle toast is a string True is a boolean 10 is an integer 11.0 is a float rainbow is a string False is a boolean . ASCII . Category: Binary Data Abstractions | Definition: ASCII stands for American Standard Code for Information Interchange. It is a character encoding standard for electronic communication. It uses 7 bits to represent 128 different characters. It is the most common character encoding standard. It is used to represent text in computers and other devices. It is a subset of the Unicode character encoding standard. And is used for things such as data trasmission, to format files, is the base of languages such as C, C++, Java, and Python, and is used to represent text in HTML and XML documents, along with many more uses. | . ASCII Code Example . Coded = input(&quot;Enter a string to be coded: &quot;) print(f&#39;Your string was {Coded} which in ASCII codes is:&#39;) def ASCII_Coder(Coded): for letter in Coded: print(ord(letter), end = &quot; &quot;) ASCII_Coder(Coded) # The ord function is used to convert # a character into its ASCII code which # is then printed out to the user this # would also do genereal Unicode as well . Your string was butter which in ASCII codes is: 98 117 116 116 101 114 . Unicode . Category: Binary Data Abstractions | Definition: Unicode is a character encoding standard for electronic communication. It uses 16 bits to represent 65,536 different characters. It is the most common character encoding standard. It is used to represent text in computers and other devices. It is a superset of the ASCII character encoding standard. Representing the standard that encodes most of the worlds languages. | . Unicode Code Example . Coded = input(&quot;Enter a string to be coded: &quot;) print(f&#39;Your string was {Coded} which in ASCII codes is:&#39;) def Uni_Coder(Coded): for letter in Coded: print(ord(letter), end = &quot; &quot;) Uni_Coder(Coded) # According to google trasnlate that should be Hello World in Chinese Simplified # The program is able to convert the string into its Unicode code pointers # Which is the same code as the ASCII code as the ASCII code is a subset of the Unicode code # and the ord() function is able to convert the string into its Unicode code pointers . Your string was 你好世界 which in ASCII codes is: 20320 22909 19990 30028 . RGB . Category: Binary Data Abstractions | Definition: RGB stands for Red, Green, Blue. It is a color model that uses 3 bytes to represent 16,777,216 different colors. It is used to represent colors in computers and other devices. It is used to represent colors in images, videos, and other media. It is used to represent colors in HTML and CSS documents. | . RGB Code Example . BTW here is the picture the values are from: . from PIL import Image # Opens the image file doughnut = Image.open(&quot;/home/tirth/vscode/APCSP-Blog/images/Profile.jpg&quot;) # Get the width and height of the image width, height = doughnut.size center_x = width // 2 quarter_y = height // 4 # Get the color of the pixel at the center of the image # and a quarter of the way down from the top of the image r, g, b = doughnut.getpixel((center_x, quarter_y)) # gets the color of the pixel print(f&quot;Red: {r}&quot;) print(f&quot;Green: {g}&quot;) print(f&quot;Blue: {b}&quot;) . Red: 255 Green: 139 Blue: 184 . Lossless . Category: Data Compression | Definition: A lossless data compression algorithm is an algorithm that compresses data without losing any information as it can be reconstructed exactly from its compressed form. This type of compression is used for things like text files, certain image formats, and audo codecs such as FLAC (Free Lossless Audio Codec) ALAC (Apple Lossless Audio Codec) seen in the refrence to compression in audiofile communties where a small subset of people can audibly dicern the differences in compression as indicated in them preferring to listen to FLACs and other simlar types of files, along with data bases, and many more uses. | . Lossy . Category: Data Compression | Definition: A lossy data compression algorithm is an algorithm that compresses data by removing some information. It is not reversible and the original data cannot be reconstructed exactly from its compressed form. This is done to be able to compress the data more efficiently. This type of compression is used in things such as audio and video compression where some quaility is loss is able to be tolerated. Some may be able to dicern the differnece in compression see above for more info. | . Lossless and Lossy Compression Code Example . As seen, the lossy image is orders of magnitude smaller than the lossless image, around 7.55 times smaller in fact (see the code below). This is due to the fact that lossy compression is able to remove some of the data from the image to achieve more efficient compression, unlike lossless compression, which is able to compress the image without removing any data. This is why the use of lossy compression, when possible, can save costs in commercial applications. As seen in the implementation of lossy compression in software such as Apple Music and Spotify, where lossy compression is used for most songs and non-premium users. Can you tell the difference between the lossy and lossless image? . Orginal Image: . Lossy Compressed Image: . Lossless Compressed Image: . import os from PIL import Image # Opens the image file same one as before with Image.open(&quot;/home/tirth/vscode/APCSP-Blog/images/Profile.jpg&quot;) as image: # Save the image using lossy JPEG compression image.save(&quot;image_compressed_lossy.jpg&quot;, &quot;JPEG&quot;, quality=75) # Save the image using lossless PNG compression image.save(&quot;image_compressed_lossless.png&quot;, &quot;PNG&quot;) # Get the file sizes of the compressed images lossy_size = os.path.getsize(&quot;image_compressed_lossy.jpg&quot;) lossless_size = os.path.getsize(&quot;image_compressed_lossless.png&quot;) # Prints the file sizes print(f&quot;Lossy image size: {lossy_size} bytes&quot;) print(f&quot;Lossless image size: {lossless_size} bytes&quot;) . Lossy image size: 106523 bytes Lossless image size: 803895 bytes .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/chapter2/week16/vocab/2022/12/18/vocabunit2.html",
            "relUrl": "/chapter2/week16/vocab/2022/12/18/vocabunit2.html",
            "date": " • Dec 18, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 3 Sections 17-18",
            "content": "3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . The way you would approach solving the travelling merchant problem is to view each as separate problems and then combine them together as in you should try and visualize the shortest routes you can take to get to each city from your starting point and then do the same approach to each of the cities you visit and then combine them together to get the shortest route possible or at least you get a very close approximation to the shortest route possible. | . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltChecker. | HaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of &quot;never&quot;. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is &quot;halts&quot;. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of &quot;never&quot;. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . An example of an undecidable program is the following: Such as the example of a store owner who wants to design a store that sells certain goods however there is not an algorithm that can determine how it should be done as it cannot predict the flow of customers the demand for certain products and the amount of money that will be made. This is an undecidable problem because there is no way to predict the best store layout or the different factors that will affect the store making it an undecidable problem. . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 1 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 1 loops in 0 microseconds Your number was found at 0 . . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 1 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 13 loops in 3 microseconds . 0 . . Reflecton . As illustrated in the graphs is appears that the second function appears to be that the first graph appears to have smaller slop when a linear regression is created based on their data when comparing larger values for their inputs. If the function do not scale with linear time complexity there may be errors in my results however it seems that second funtion is more effiecint than the first function as the values get larger and can produce an output in less time however the first function is more effiecint when the input is smaller as it can produce an output in less time. . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. . numlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] def oddOrEven(numbers): output = [] for i in range(len(numbers)): number = numbers[i] if number % 2 == 0: output.append(f&quot;The number at position {i} is even ({number})&quot;) else: output.append(f&quot;The number at position {i} is odd ({number})&quot;) for position in output: print(position) oddOrEven(numlist) # This is a decidable provlem as it can be evaluted that any # number in the list either even or odd and then return its position in the list. # This was made to run forever by alterin the code so that it would only check if the inputed # number wass even if so it would return true for even and false for odd. # which was sent into a loop so that it would only have condition for an even input # and as the input was odd it would run forever. . The number at position 0 is odd (1) The number at position 1 is even (2) The number at position 2 is odd (3) The number at position 3 is even (4) The number at position 4 is odd (5) The number at position 5 is even (6) The number at position 6 is odd (7) The number at position 7 is even (8) The number at position 8 is odd (9) The number at position 9 is even (10) . def evenornot(number): if number % 2 == 0: return True else: return False infiniteloop = 33 while True: if evenornot(infiniteloop) == True: print(&quot;This number is even&quot;) break else: pass # This is an infinite loop as the condition is always true as 33 is not an even number as result this code will run forever . KeyboardInterrupt Traceback (most recent call last) Cell In[9], line 10 7 infiniteloop = 33 9 while True: &gt; 10 if evenornot(infiniteloop) == True: 11 print(&#34;This number is even&#34;) 12 break Cell In[9], line 2, in evenornot(number) 1 def evenornot(number): -&gt; 2 if number % 2 == 0: 3 return True 4 else: KeyboardInterrupt: .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/chapter3/week16/2022/12/14/lesson.html",
            "relUrl": "/chapter3/week16/2022/12/14/lesson.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Career Advice - Hosted by Women in STEM",
            "content": "Company Mission Statements &amp; Devlopment . Hp: Create technology that makes life better for everyone, everywhere. . Qualcomm: Inventing the tech that makes the world loves. . Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner and safer. . All companies strive to make the world a better place | All of them offer products or services and try to create products that everyone wants | Try to create a life changing generational impact on people and the world such as 99% of the world’s smartphones use Qualcomm’s technology | . Thermo Fisher Scientific . 100,000+ employees | 7,000+ R&amp;D scientists | $1.5 billion in R&amp;D spending | More than 40 Billion in revenue | . R&amp;D and Bring Tech To Market . Before a product is released, it goes through a process that evaluates if the market is right for the product work with the scrum master to bring the product to market | The ability to make a product that is marketable allows them to go to market with a product that ready to be adopted | . Dev Ops . Create controls to prevent denail of service attacks on company infraestructure | Manage the deployment of software on the internet | Working with virual servers while trying to data collection and automation | . Valuable Skills . Continous learning as boredom happens quickly | Take available courses | Try to teach your self new skills with avaiable online resources | Don’t be super concerned about the things that you read online | Endless number of unfilled positions that can be taken | Be adpative and be able to transition to new industries | Best technical people listen to the requirements and think how technology can solve the requirments and then translate into layman’s terms | . Agile Methodology . Differnet companies use different variations of the agile methodology | Large groups planned meetings for the qaurter no matter how big or large the project was a good way to coordinate with othee engineers | Working agile from a technnical project is important always do short sprints focus on one to three month sprints | Agility is a highly regarded skill in the industry | . Machine Learning . The ability to predict sales before sales happen | Predict harvest and bad harvests through weather predictions | To save costs when it comes to data storage and the hosting of repositories | . Biggest Challenges in Tech Industry . Aquistions in the tech industry results in the need to be adaptive and have continous learning | Interviews are series of timed ranodom questions is difficult | . Worklife Balance . Varies accross the industry you have the position to negotiate some companies are good some aren’t however can be personal preference | Could say during interviews that you want offers or you want time to be able to work on your self | . Formal Training . Reason as all tools are custom and all things need to be need to be taught | So training programs are created to teach the tools and the processes | Tools like fanagle are custom to companies like Twitter and build tools like a monorepo and need to be naviagble to do your job | . Benefits of Technical Skills ex. coding . Devlops a way of thinging and how to disect and build something creates critcal thinkging skills and how to problem solve | Interviewers are looking for people who can problem solve and explain why the reached the conclusion they did | Gives people the ability to think methodically | . What do you want to learn? . Web3 and blockchain technology | AWS and Google Cloud at a larger scale | . Coding and Finance? . Allows to understand algorythms and predictive analytics | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/stem/2022/12/13/career.html",
            "relUrl": "/stem/2022/12/13/career.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Section 16 Chapter 3",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . Example Simulations . An example of a simulation is like the part seen in the image below made in Autodesk Inventor. Which represents a simulation as simlar to the render in blender it simulates the way light bounces off of and interacts with the object to simulate the reflections it casts on surounding objects and surfaces. Along with the way the light interacts with the object itself and how it creates shadows an aspect not seen in the image is the hole beneath it but using similar simulations the it understands that there will be darker shawdows and lesss reflections in the hole. Also using simulations to handle the way the material appears based on its texture and color accounting for the different ways light interacts with the material specifically. . . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation . # Can do so for any number of runs the user wants/needs or the amount of coins import random def flipper(runs): output = [] coins = int(input(&quot;How many coins do you want to flip?&quot;)) for i in range(runs): result = &quot;&quot; for j in range(coins): if random.random() &lt; 0.5: result += &quot; Heads &quot; else: result += &quot; Tails &quot; output.append(result) return output desired_runs = int(input(&quot;How many times do you want to flip your coins?&quot;)) results = flipper(desired_runs) print(&quot;You flipped your coins &quot; + str(desired_runs) + &quot; times. Here are the results:&quot;) for result in results: print(result) . You flipped your coins 25 times. Here are the results: Tails Heads Tails Heads Tails Tails Heads Heads Heads Heads Heads Heads Tails Tails Heads Heads Heads Tails Tails Heads Tails Tails Heads Heads Tails Tails Tails Heads Tails Tails Heads Heads Tails Heads Heads Heads Tails Heads Heads Tails Heads Tails Heads Heads Tails Tails Heads Heads Tails Tails Tails Tails Tails Heads Tails Tails Tails Heads Heads Tails Heads Heads Heads Tails Heads Tails Heads Tails Tails Heads Heads Tails Heads Tails Heads Tails Tails Tails Heads Heads Heads Heads Tails Heads Tails Tails Tails Heads Tails Heads Tails Tails Heads Heads Heads Tails Heads Heads Tails Heads Tails Tails Heads Tails Heads Tails Tails Heads Heads Tails Heads Tails Heads Heads Tails Heads Heads Tails Tails Tails Tails Heads Tails Tails Tails Tails Tails Heads Tails Tails Tails Heads Tails Tails Tails Tails Heads Heads Heads Heads Tails Tails Heads Tails Heads Heads Heads Heads Heads Heads Heads Tails Heads Tails Tails Tails Heads Tails Tails Tails Heads Heads Tails Tails Tails Heads Tails Tails Heads Heads Heads Tails Heads Tails Heads Heads Tails Heads Heads Heads Tails Tails Tails Heads Heads Heads Heads Heads Tails Tails Heads Tails Tails Heads Heads Heads Heads Heads Heads Tails Tails Heads Heads Tails Heads Tails Tails Tails Heads Tails Tails Heads Tails Heads Tails Heads Heads Tails Tails Tails Heads Tails Heads Tails Heads Heads Tails Heads Tails Tails Tails Heads Tails Tails Heads Heads Heads Heads Heads Heads Heads Heads Heads Heads Heads Tails Heads Tails Tails Heads .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/chapter3/week16/2022/12/13/Simulations.html",
            "relUrl": "/chapter3/week16/2022/12/13/Simulations.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random # Fill in the blank def Dice(n): sum = 0 while n &gt; 0: sum = sum + random.randint(1,6) n -= 1 return sum Dice(5) # Will output the sum of the 5 dice rolls . 15 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | Modules . requests: Allows you to send HTTP requests to web servers and get responses back. Has built in functions for GET, POST, PUT, DELETE, etc. (the most common HTTP requests). Highly customizable allowing you to set headers, cookies, and other parameters. Which allows the module to be used for a wide variety of tasks such as web scraping, web automation, and API testing. . | emoji: Allows you to use emojis in your code. This is useful for when you want to add emojis to your code. Also allows you to convert emojis to text and text to emojis. Along with mutliple functions for working with emojis. An example of this would be the ability to get a list of all emojis or other emoji related antics. . | . import random numbers = [] def numsorter(n): print(&quot;Number of numbers is &quot; + str(n)) while n &gt; 0: numbers.append(random.randrange(n+1)) n -= 1 for number in numbers: if number%2 == 0: print(str(number) + &quot; is even.&quot;) else: print(str(number) + &quot; is odd.&quot;) num = int(input(&quot;Enter the amount of numbers.&quot;)) numsorter(num) . Number of numbers is 10 0 is even. 8 is even. 4 is even. 7 is odd. 3 is odd. 1 is odd. 1 is odd. 2 is even. 1 is odd. 1 is odd. . import numpy as np function = [2, 0, 0, -6, 24, 0] def derivitatetaker(polynomial): var = np.poly1d(polynomial) derivative = var.deriv() print(derivative) derivitatetaker(function) . 4 10 x - 12 x + 24 . import numpy as np function = [6.5, 0, 2, 0, 0] def derivitatetaker(polynomial,x): var = np.poly1d(polynomial) derivative = var.deriv() print(&quot;Your function&#39;s derivative is n&quot; + str(derivative) + &quot; when x = &quot; + str(x) + &quot; so f&#39;(&quot; + str(x) + &quot;) = &quot; + str(derivative(x))) derivitatetaker(function, 9) . Your function&#39;s derivative is 3 26 x + 4 x when x = 9 so f&#39;(9) = 18990.0 . import random dogscats = [&quot;dog&quot;] * 10 + [&quot;cat&quot;] * 10 def petjuggler(pets): random.shuffle(pets) for pet in pets: print(pet, end=&quot; &quot;) petjuggler(dogscats) . cat cat dog dog dog cat cat dog cat cat dog dog cat dog dog dog cat dog cat cat .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/chapter3/week16/2022/12/12/randomvalues.html",
            "relUrl": "/chapter3/week16/2022/12/12/randomvalues.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arugments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = temperature - 32 celsius = celsius * 5/9 return celsius outsideTemp = input(&quot;Enter temperature in celsius&quot;) outsideTemp = int(outsideTemp) convertFahrenheit(outsideTemp) . 0.5555555555555556 . Developing Procedures . Slide 8: . Picking a decriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . procedure goes here . currentGrade &lt;- currentPoints / 40 currentGrade &lt;- current Grade * 100 if currentGrade &gt; quizGrade quizGrade &lt;- currentGrade . def quiz_grader(): currentPoints = int(input(&quot;Amount of points scored:&quot;)) totalPoints = int((input(&quot;Amount of points possble&quot;))) grade = currentPoints/totalPoints * 100 print(str(grade)+&quot;% was the score this student recieved on this quiz they scored &quot; + str(currentPoints) + &quot; out of &quot; + str(totalPoints) + &quot; points.&quot;) quiz_grader() . 5.0% was the score this student recieved on this quiz they scored 2 out of 40 points. . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . import time def AssignmentTimer(x): print(&quot;You have &quot; + str(x) + &quot; minute/s to work on this assignment.&quot;) try: time.sleep(x*60) except KeyboardInterrupt: # allows the user to cancel the timer print(&quot;Timer cancelled.&quot;) else: print(&quot;Time is up! Take a break!&quot;) while True: minutes = int(input(&quot;Enter the number of minutes you would like to work on your assignment: &quot;)) AssignmentTimer(minutes) # Allows typos in the user&#39;s response if they want another timer while True: response = input(&quot;Do you want to start another timer? (yes/no)&quot;) if response.lower().strip() == &quot;no&quot;: print(&quot;Goodbye!&quot;) break elif response.lower().strip() == &quot;yes&quot;: break else: print(&quot;Invalid response. Please enter &#39;yes&#39; or &#39;no&#39;.&quot;) # Stops the loop if the user doesn&#39;t want another timer if response.lower().strip() == &quot;no&quot;: break # Demonstration of an algorithm that has a use case that could be useful for school in a way # that allows the user to input the number of minutes they want to work on their assignment # and then the program will start a timer for that amount of time and then the user can # cancel the timer if they want to stop working on their assignment or the timer will # automatically end after the amount of time the user inputted and if they don&#39;t want another timer. # Allows the user to manage thier time better and be more productive throug taking regular breaks # and manage the amount of time certain assignments take to complete. . You have 1 minute/s to work on this assignment. Time is up! Take a break! Invalid response. Please enter &#39;yes&#39; or &#39;no&#39;. You have 2 minute/s to work on this assignment. Time is up! Take a break! You have 69420 minute/s to work on this assignment. Timer cancelled. Goodbye! .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/chapter3/week15/2022/12/07/developing-procedures.html",
            "relUrl": "/chapter3/week15/2022/12/07/developing-procedures.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Algorithm Lesson",
            "content": "3.9 Part 1 . The lesson will start off with introducing what algorithms are and what they do, moreover, what their significance is. . 3.9 Lesson 1 has the objective to teach the student of the outcome of similar algorithmic concepts and similar algorithms. In this lesson, you will see different ways on how algorithms are developed. . Lesson 1 | Defining Algorithms . What is an algorithm? An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can your imagination and create whatever you wan with your own instructions! . Algorithms can be written in different ways and still accomplish the same tasks . | Algorithms that appear similar can yield different side effects or results. . | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) . | Different algorithms can be developed or use to solve the same problem. . | . Example 1 | What happens if we test the algorithm with different outputs? . The pseudocode above is translated to python for you. . Record what your outputs are when you enter 95 degrees F, does the algorithm yield the same result? . The conditional below is nested . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? # It will print that it is too cold to play outside . It is too cold outside! . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? # It will print that it is too hot to play outside . It&#39;s too hot outside! . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) elif (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? # It prints that is both too hot to be outside and that it&#39;ll play out side this could be corrected with the above changes # If 54 was inputted it would correctly print that it is too cold to play outside . It&#39;s too hot outside! Sure I will play outside! . NOW RECORD with another output . Record what your outputs are when you enter 54, does the algorithm yield the same result this time? . *Now use 95 as an input for the two code blocks above. . Even though an algorithm&#39;s code can look the same, you have to be careful, they can always yield different results. When constructing algorithms you want to make sure that your code corresponds with what you want as your output. You set the limit of your code and you decide what the code&#39;s output is. . Conditionals vs. Booleans . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Exercise . Learning how to utilize conditionals and booleans are important for developing algorithms. Use this exercise to help you. . Can either Boolean expression on the right replace the conditional on the left? Assume isWeekday and isHoliday are Boolean variables. . *NOTE = you can edit the variables to check the conditions needed! . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . Logically thinking about conditionals and booleans . Now the problem may seem confusing, but the best way to develop an algorithm is to think about all the possible results that can be potentially be outputted. . So if IsHoliday is set to true, then driveWork is automatically equal to false and it does not matter what value of isWeekday is. This must mean that one of the conditionals must be NOT IsHoliday. . In the case that lets say IsHoliday is set to false, then the variable for weekday needs to be checked. If it&#39;s true then driveWork is true, if it&#39;s false then driveWork is false. This must mean that the other conditional isWeekday. . Combining both conditionals, you get option 2, which is not IsHoliday and IsWeekday. This is why option 2 is right! . Example 3 | Conditionals vs Booleans . The following algorithms are intended to sum the odd numbers from 1-9. Which algorithms work as intended? . Below, I have translated the block code into python, import this to your jupyter notebook and record the result. What do you notice? . First block . sum = 1 counter = 3 #iteration var = 0 while (var &lt; 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 25 . Second block . sum = 0 counter = 9 #iteration while (counter &gt;= 1): sum = sum + counter counter = counter - 2 print(sum) . 25 . When we start our initializing left sum as 1 counter as 3 we had no iterations yet. Remember we&#39;re going to have to repeat this four times because the block code prompts us to repeat 4 times, so we iterate. So as we go through and follow what the block gives us. . So you see that the sum does work, it does sum up the odd numbers from 1-9 . Now lets look at the right block. . Sum is set to 0 Counter is set to 9 We must repeat until the counter &lt; 1 is true. . So we keep adding until -1, that is when the counter &lt; 1 is true, so we stop . So why is it important to understand that algorithms can be written in different ways and still accomplish the same task? . An algorithm is beautiful that way, just because you think of solving a problem differently, doesn&#39;t mean your wrong, . 3.9 Part 2 . Flowcharts . Flowcharts can help you visualize the functionality of an algorithm . | They are a good way to double check whether or not your algorithm is achieving its purpose . | . How To Set Up A Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) | . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement | . | determine a way to reach the end goal | Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes . Outcome 1: if the conditional statement is true, something will happen . | Outcome 2: if the conditional statement is false, something else will happen . | Ex: see example A . | . | . | Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied . Once the condition is satisfied, then an outcome is produced . | This can take the form of a for-loop, while-loop, and/or if-statement . | . | . | . Example A . Consider this situation: . You are shopping for your favorite food at your favorite supermarket . | You see that there is a sale on wheat products for 35% off . | There is another sale on produce for 20% off . | These sales are mutually exclusive . | Tax on all items is 8% . | . | Your TASK: . Create a flowchart for an algorithm that can be used to calculate the cost of your favorite item | . | . Example A Possible Solution (using Selection) . 3.9 Part 3 . For Algorithms How to combine and/or modify an existing algorithm. | . | . Benefits of combining algorithms can reduce development time, testing time, and simplify the identification of errors. | . | . Example in Class . Rules . step/rule 1: start with any positive integer | step/rule 2: if the preceding term is even; divide by 2 | step/rule 3: if the preceding term is odd; multiply by 3 and add 1 | step/rule 4: repeat steps until you arrive at 1 | fact: the sequence should ALWAYS end up at 1 if repeated. | . Algorithm to Start (Determining Whether a Number is Even or Odd) . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): print(&quot;the number is even&quot;) else: print(&quot;the number is odd&quot;) # Run this cell to see how it works . How can we modify this code to match our goal . Hint: uses arithmetic operations | Hint: look at the steps of the equation and try and modify it to fit them | Must display all numbers used in it | . Solution . Step 1 . steps/rules 2 &amp; 3. | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): varx == varx/2 # Change print to the function else: varx == varx * 3 + 1 # Change print to the function print(varx) . Step 2 . step/rule 4; here we add the loop | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) while varx != 1: if (varx %2 == 0): varx = varx/2 # Change print to the function else: varx = varx * 3 + 1 # Change print to the function print(varx) . Step 3 . Display all values throughout the algorithm | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx = varx/2 print(varx) # add Display else: varx = varx * 3 + 1 print(varx) # add Display print(varx) # Final # Should be 1 every time . choose value for x 22 11.0 34.0 17.0 52.0 26.0 13.0 40.0 20.0 10.0 5.0 16.0 8.0 4.0 2.0 1.0 1.0 . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Hacks . create another algorithm using a famous mathematical algorithm such as the &quot;collatz conjecture.&quot; and explain your steps in a post on a blog. | . 3.11 Binary Search . Goals/Objectives: . detirmine number of iterations required to find vlue in data set. | explain requirements for binary search | . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . About Binary Search: . Binary Search Algorithm starts in the middle of a data set of numbers and eliminates half the data. This process reapeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectivly and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . Think about how you would you would try to find a certain number in this set. . One way would be to line up the numbers and count them individually untill you find the desired value. . When working with large data sets with lots of numbers, methods like these wont work . Instead, a Binary Search would be more effective. | . Here we can see the numbers are set in an increasing order. Setting numbers in an increasing or decreasing is needed for a binary search . Binary search is started with the middle number first Middle number is found by taking the higest index number plus the lowest and divided by two | . | Binary Search can be represented using a tree as shown below | . . Heres an easy way to put it: . binary search fidns the desired element by continuously chopping the search area in half | say the element you are looking for is &#39;f&#39; | . [a b c d e f g h] . We would start in the middle at element &#39;d&#39; | becuase our target is greater than d we will eliminate everything left of &#39;d&#39; including &#39;d&#39; (chopping it in half) . [e f g h] is what now remains . again we would &#39;chop in half&#39; | say we iterate through &#39;g&#39; and &#39;h&#39;, our desired element is still not found so we would eliminate &#39;g; and &#39;h&#39; and continue the process | . [e f] . now we are down to 2 elements | &#39;chopping in half&#39; will give us our desired element | . [f] . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . We have created a function called binary_search() function which takes two arguments - a list to be sorted and a number to be searched. . | We have declared two variables to store the lowest and highest values in the list. The lowest is assigned initial value to 0, the highest to len(list1) 1 and mid as 0. . | Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest. The while loop will iterate if the number has not been found yet. . | In the while loop, we find the mid value and compare the index value to the number we are searching for. . | If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to the low. The search moves to the left side. . | Otherwise, if the value of mid index is larger than n, we decrease the mid value by 1 and assign it to the high. The search moves to the right side. . | If the n is equal to the mid value then return mid. . | This will happen until the low is equal and smaller than the high. . | If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function. . | . . Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | . def BinarySearcher(sortedlist, x): beginning = 0 mid = 0 end = len(sortedlist)-1 while beginning &lt;= end: mid = (beginning+end)//2 if sortedlist[mid] == x: return mid elif sortedlist[mid] &gt; x: end = mid - 1 else: beginning = mid + 1 return -1 x = int(input(&quot;Integer to search through&quot;)) sortedlist = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] result = BinarySearcher(sortedlist,x) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 18 . Homework Assignment (DUE FRIDAY 12/09 BY 5:00 PM) . Consider this situation: . You&#39;re playing a short game using a random number generator from 1 to 20 . On each turn, a player will generate 3 random numbers . | They get to keep the highest number that they generate as their score . | . | . | . Your TASK: . Create a flowchart that can be used to write an algorithm that calculates a player&#39;s score after a turn . NOTE: Don&#39;t forget the syntax for Flowcharts! (each shape represents an action) . | Try to implement selection and/or iteration in your algorithm . | Please do this using Google Drawing. It can be found in your Google Drive if you click New &gt; More &gt; Google Drawings . | . | Write the working algorithm in Python . Make sure to initialize / define any variables you may need . | Add comments to your code! . | . | How to submit: . Make a shareable link to your Flowchart with commenting access through Google Drive&#39;s &quot;Share&quot; feature . | Make a comment with the link at the top of the code block that holds your algorithm (use # for comments in Python) . | Submit a link to your algorithm (with the commented link to Flowchart) in the comment/issue found on the schedule . | Grading . DUE FRIDAY 12/09 BY 5:00 PM . | LATE PENALTY: -0.2 . | You will be graded based on: . how functional your algorithm is . | how well your Flowchart is organized Tirth Thakkar FlowChart . | . | . If something comes up, feel free to DM us on Slack . import random def game(): num_rounds = int(input(&quot;Rounds: &quot;)) player1_score = 0 player2_score = 0 for i in range(num_rounds): player1_numbers = (random.randint(1, 20), random.randint(1, 20), random.randint(1, 20)) player2_numbers = (random.randint(1, 20), random.randint(1, 20), random.randint(1, 20)) if max(player1_numbers) &gt; max(player2_numbers): print(&quot;On round &quot;+ str(i+1) +&quot; Player 1 won with a score of &quot; + str(max(player1_numbers)) + &quot; compared to Player 2 with a score of &quot; + str(max(player2_numbers))) elif max(player1_numbers) &lt; max(player2_numbers): print(&quot;On round &quot;+ str(i+1) +&quot; Player 2 won with a score of &quot; + str(max(player2_numbers)) + &quot; compared to Player 1 with a score of &quot; + str(max(player1_numbers))) else: print(&quot;Both players tied with a score of &quot; + str(max(player1_numbers)) + &quot; on round &quot; + str(i)) game() . On round 1 Player 1 won with a score of 17 compared to Player 2 with a score of 6 On round 2 Player 2 won with a score of 17 compared to Player 1 with a score of 9 On round 3 Player 1 won with a score of 18 compared to Player 2 with a score of 16 On round 4 Player 2 won with a score of 16 compared to Player 1 with a score of 14 On round 5 Player 1 won with a score of 20 compared to Player 2 with a score of 17 On round 6 Player 2 won with a score of 12 compared to Player 1 with a score of 9 On round 7 Player 2 won with a score of 19 compared to Player 1 with a score of 7 On round 8 Player 1 won with a score of 18 compared to Player 2 with a score of 16 On round 9 Player 2 won with a score of 20 compared to Player 1 with a score of 6 On round 10 Player 1 won with a score of 17 compared to Player 2 with a score of 8 On round 11 Player 2 won with a score of 17 compared to Player 1 with a score of 13 On round 12 Player 1 won with a score of 20 compared to Player 2 with a score of 19 On round 13 Player 2 won with a score of 17 compared to Player 1 with a score of 12 On round 14 Player 2 won with a score of 19 compared to Player 1 with a score of 16 On round 15 Player 1 won with a score of 20 compared to Player 2 with a score of 18 .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/chapter3/week15/2022/12/06/lessonComplete.html",
            "relUrl": "/chapter3/week15/2022/12/06/lessonComplete.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Lists and Iteration  Unit 3 Sections 8 and 10",
            "content": "Lists . What are lists? . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . List examples in Python, JavaScript, and Pseudocode. . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) . [&#39;apple&#39;, &#39;grape&#39;, &#39;strawberry&#39;] . const fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;]; . fruits ← [apple, grape, strawberry] . More list examples . brands = [&quot;nike&quot;, &quot;adidas&quot;, &quot;underarmour&quot;] #string numbers = [1, 2, 3, 4, 5] #integer truefalse = [True, False, True] #boolean . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.remove(&quot;soccer&quot;) sports.insert(1, &quot;hockey&quot;) print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list sports.insert(2, &quot;golf&quot;) print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;golf&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Try this . Determine the output of the code segment | . The psuedocode iterates through the list words so for each stirng in words. If the length of the word is equal to 3 than it will remove the word from the list. If the length of the string is not equal to three it will incrment the index variable. The program will print the words in the list that are not three letters ps images don&#39;t dispaly on wget and link doesn&#39;t seem to dierect to blog . Iteration . stuff . title:Iteration HW- toc: true | comments: true | categories: [iteration] | tags: [iteration] | . First, what not to do . Iteration is important for your time and sanity . print(&quot;alpha&quot;) print(&quot;bravo&quot;) print(&quot;charlie&quot;) print(&quot;delta&quot;) print(&quot;echo&quot;) print(&quot;foxtrot&quot;) print(&quot;golf&quot;) print(&quot;hotel&quot;) print(&quot;india&quot;) print(&quot;juliett&quot;) print(&quot;kilo&quot;) print(&quot;lima&quot;) print(&quot;mike&quot;) print(&quot;november&quot;) print(&quot;oscar&quot;) print(&quot;papa&quot;) print(&quot;quebec&quot;) print(&quot;romeo&quot;) print(&quot;sierra&quot;) print(&quot;tango&quot;) print(&quot;uniform&quot;) print(&quot;victor&quot;) print(&quot;whiskey&quot;) print(&quot;x-ray&quot;) print(&quot;yankee&quot;) print(&quot;zulu&quot;) #please help me . alpha bravo charlie delta echo foxtrot golf hotel india juliett kilo lima mike november oscar papa quebec romeo sierra tango uniform victor whiskey x-ray yankee zulu . Coding all of these individually takes a lot of unnecessary time, how can we shorten this time? . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate. . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration:definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . for variable in iterable: statement() . Iterator? Iterable? Iteration? . When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | Strings, lists, dictionaries, sets and tuples are all examples of iterable objects. | . a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Well, above is basically just printing them again, so how do we takes these iterators into something we can make use for? | Loops take essentially what we did above and automates it, here are some examples. | . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . Using the range() function . But wait, there&#39;s more . Need to save even more time? The above is useful for many occasions, but can get tedious fast, in this case, use range() | . x = range(5) for n in x: print(n) . 0 1 2 3 4 . Else, elif, and break . For when 1 statement isn&#39;t enough . Else:when the condition does not meet, do statement()- Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . HW Iteration . Use the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word Turn each letter in the response into the words that correspond with in the list Ex: . list -&gt; . lima india sierra tango . codes = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] def Nato(codes): phrases = [] rsp = input(&quot;Enter a word you want to convert into NATO code: &quot;) solve_rsp = rsp.lower().strip() for letter in solve_rsp: for code in codes: if code[0] == letter: phrases.append(code) for phrase in phrases: print(phrase) Nato(codes) . bravo uniform tango tango echo romeo . 2D Iteration . 2D Arrays . A 2D array is simply just a list of lists. The example below is technically correct but... . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Printing a 2D Array . We already know that we can&#39;t just print the matrix by calling it. We need to iterate through it to print it. . def print_matrix1(matrix): for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) print(matrix[i][j], end=&quot; &quot;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&quot; &quot; changes the end value to space, not a new line. print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through each &quot;row&quot; of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it&#39;s own list. in this syntax the list is stored in &quot;row&quot;. for col in row: # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in col. print(col, end=&quot; &quot;) # Same as 1 print() # Same as 1 print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . More Functions . Try to find another way to print the matrix. Only complete one of the two (unless you&#39;d like to do both). Below is a hint . fruit = [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;] print(fruit) print(*fruit) # Python built in function: &quot;*&quot;. Figure out what it does . [&#39;apples&#39;, &#39;bananas&#39;, &#39;grapes&#39;] apples bananas grapes . def print_matrix3(matrix): code = &quot;your code goes here&quot; # Don&#39;t have to do one . Alternatively, find a way to print the matrix using the iter() function you already learned. Or use both! . Homework . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix4(keypad): iterations = iter(keypad) while True: try: row = next(iterations) for column in row: print(column, end = &quot; &quot;) print() except StopIteration: break print_matrix4(keypad) . 1 2 3 4 5 6 7 8 9 0 . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] def printer(keyboard): rsp = input(&quot;Month: &quot;) rsp2 = input(&quot;Age: &quot;) solve_rsp = &quot;&quot; + str(rsp.upper().strip()) solve_rsp2 = &quot;&quot; + str(rsp2).strip().upper() for letter in solve_rsp: if any(letter in row for row in keyboard): print(letter) for row in keyboard: if letter in row == False: row[row.index(letter)] = &quot; &quot; for letter in solve_rsp2: if any(letter in row for row in keyboard): print(letter) for row in keyboard: if letter in row == False: row[row.index(letter)] = &quot; &quot; printer(keyboard) . D E C E M B E R 1 6 . Challenge also homework . Change all of the letters that you DIDN&#39;T print above to spaces, &quot; &quot;, and then print the full keyboard. (the things you did print should remain in the same spot) . Alternative Challenge: If you would prefer, animate it using some form of delay so it flashes one of your letters at a time on the board in order and repeats. (this one may be slightly more intuitive) . DO NOT HARD CODE THIS. Don&#39;t make it harder on yourself, iterate through, make it abstract so it can be used dynamically. You should be able to input any string and your code should work. . keyboard = [[&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] def printer(keyboard): rsp = input(&quot;Month: &quot;) rsp2 = input(&quot;Age: &quot;) solve_rsp = &quot;&quot; + str(rsp.upper().strip()) solve_rsp2 = &quot;&quot; + str(rsp2).strip().upper() for letter in solve_rsp: if any(letter in row for row in keyboard): # print(letter) for row in keyboard: if letter in row: row[row.index(letter)] = &quot; &quot; for letter in solve_rsp2: if any(letter in row for row in keyboard): # print(letter) for row in keyboard: if letter in row: row[row.index(letter)] = &quot; &quot; for row in keyboard: print(&quot; &quot;.join(row)) printer(keyboard) . ` 2 3 4 5 7 8 9 0 - = Q W T Y U I O P [ ] A S F G H J K L ; &#39; Z X V N , . / . If you get stuck you can just make a picture with an array and print it (I will grade based on how good it looks) . I do expect an attempt so write some code to show you tried the challenge. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/lesson4",
            "relUrl": "/lesson4",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Booleans and Conditionals Unit 3 Sections 5-7",
            "content": "Lesson Overview: 3.5 - Boolean Expressions . Here we will focus on: basics of Booleans | its relationship with binary | relational operators | Logical Operators | . | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . A few ways these operators could be used... | . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 grades = grade1 + grade2 + grade3 + grade4 + grade5 average = grades % 5 average &gt; 80 if average == 0: print(&quot;false&quot;) else: print(&quot;true&quot;) . false . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . Can also be seen as if else statements or if else-blocks . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 200 num2 = 200 sum = num1 + num2 print(str(sum) + &quot;You don&#39;t need a condtional for this&quot; ) . 400 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: | Example Psuedocode of Nested Conditional Statements | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . Psuedocode: Lives would print 4 as the result of the and &amp; or is false it would print 4 as it is the result of 4 - 1 which is the value for lives . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . Please come to retake up to a 90 next week at tutorial! . protein = 25 carbs = 36 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes! . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | # Here is a python template for you to use. class worker: def __init__(self, name, hours, wage, experienced): self.name = name self.hours = hours self.wage = wage self.experienced = experienced names = [ &quot;Jhonny&quot;, &quot;Steve&quot;, &quot;Billy Bob&quot;, &quot;Jhonny&quot; ] workers = [ worker(names[0], 2, 3, False), worker(names[1], 700, 1, True), worker(names[2], 8, 22, False), worker(names[3], 22, 3, True), ] for worker in workers: if worker.hours &gt;= 8: worker.experienced = True else: worker.experienced = False if worker.experienced == True: worker.wage = 90000 elif worker.experienced == False: worker.wage = 50000 print(str(worker.name) + &quot; - Experience = &quot; + str(worker.experienced) + &quot; Hours: &quot; + str(worker.hours) + &quot; Wage: $&quot; + str(worker.wage)) . Jhonny - Experience = False Hours: 2 Wage: $50000 Steve - Experience = True Hours: 700 Wage: $90000 Billy Bob - Experience = True Hours: 8 Wage: $90000 Jhonny - Experience = True Hours: 22 Wage: $90000 . Hacks Assignments: . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . class food: def __init__(self, name, expired, cost): self.name = name self.expired = expired self.cost = cost foods = [&quot;cookie&quot;,&quot;milk&quot;,&quot;bread&quot;,&quot;pizza&quot;,&quot;banana&quot;,&quot;apple&quot;,&quot;cake&quot;] boxes = [ food(foods[0], False, 26), food(foods[1], True, 300), food(foods[2], True, 2), food(foods[3], False, 15), food(foods[4], False, 72), food(foods[5], False, 32), food(foods[6], True, 3000) ] for food in boxes: if food.cost &lt; 25 and food.expired == True: print(str(food.name) + &quot;: this product is no good but it is cheap n&quot;) elif food.expired == True: print(str(food.name) + &quot;: this product is no good n&quot;) elif food.cost &gt;= 50: print(str(food.name) + &quot;: this product is too expensive n&quot;) elif food.cost &gt;= 25: print(str(food.name) + &quot;: this is a regular product n&quot;) # It wasn&#39;t clear that cheap foods applied to the rule so I added an extra critria to the list it may not be needed elif food.cost &lt; 25: print(str(food.name) + &quot;: this is a cheap product n&quot;) . cookie: this is a regular product milk: this product is no good bread: this product is no good but it is cheap pizza: this is a cheap product banana: this product is too expensive apple: this is a regular product cake: this product is no good . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . Hacks . The quiz below is the main quiz if it is not to your liking as in you do not like the options and the way it works there is a simpler version below . class question(object): def __init__(self, base, answer1): self.base = base self.answer1 = answer1 class singlequestion(question): def __init__(self, base, answer1): super().__init__(base, answer1) class multiquestion(question): def __init__(self, base, answer1, answer2): super().__init__(base, answer1) self.answer2 = answer2 Questions = [ &quot;What is 3*3*1 n (a) 3^2 n (b) 9 n (c) 22 n&quot;, &quot; nWhat is a Boolean n (a) A value that stores true or false n (b) gold/silver n (c) a fancy french pastry n&quot;, &quot; nIs the moon made of cheese? n (t) True n (f) False n&quot;, &quot; nIs Mr.Mortenson extremly handsome and attractive? n (a) Yes he is extremly handsome and attractive n (b) Yes n (c) No n&quot;, ] Questions = [ multiquestion(Questions[0], &quot;a&quot;, &quot;b&quot;), singlequestion(Questions[1], &quot;a&quot;), singlequestion(Questions[2], &quot;f&quot;), multiquestion(Questions[3], &quot;a&quot;, &quot;b&quot;), ] def quiz(Q_Bank): runs = 0 score = 0 for problems in Q_Bank: print(problems.base) if isinstance(Q_Bank[runs], multiquestion) == True: rsp1 = input(&quot;Answer 1: &quot; + str(problems.base)) rsp2 = input(&quot;Answer 2: &quot; + str(problems.base)) if rsp1.lower().strip() == problems.answer1 and rsp2.lower().strip() == problems.answer2: print(&quot;Your answers &quot; + rsp1 + &quot; and &quot; + rsp2 + &quot; matches the correct answers which were &quot; + str(problems.answer1) + &quot; and &quot; +str(problems.answer2)) score += 2 elif rsp1.lower().strip() == problems.answer1 or rsp2.lower().strip() == problems.answer2: print(&quot;Your answers &quot; + rsp1 + &quot; is &quot; + str(rsp1.lower().strip() == problems.answer1) + &quot; and &quot; + rsp2 + &quot; is &quot; + str(rsp2.lower().strip() == problems.answer2) +&quot; which matches only one of the two correct answers which were &quot; + str(problems.answer1) + &quot; and &quot; + str(problems.answer2)) score += 1 else: print(&quot;Your answers &quot; + rsp1 + &quot; and &quot; + rsp2 + &quot; doesn&#39;t match any of the correct answers which were &quot; + str(problems.answer1) + str(problems.answer2)) elif isinstance(Q_Bank[runs], singlequestion) == True: rsp = input(problems.base) if rsp.lower().strip() == problems.answer1: print(&quot;Your answer &quot; + rsp + &quot; matches the correct answer which was &quot; + str(problems.answer1)) score += 1 else: print(&quot;Your answer &quot; + rsp + &quot; doesn&#39;t match the correct answer which was &quot; + str(problems.answer1)) runs +=1 if score &gt;= 2: print (&quot; nYou got &quot; + str(score)+ &quot; out of 6 points. You passed this quiz by scoring a score of 2/6 or higher.&quot;) else: print(&quot; nYou got &quot; + str(score)+&quot; out of 6 points. You have failed this quiz by scoring a score of 2/6 or higher.&quot;) quiz(Questions) . What is 3*3*1 (a) 3^2 (b) 9 (c) 22 Your answers a is True and c is False matches only one of the two correct answers which were a and b What is a Boolean (a) A value that stores true or false (b) gold/silver (c) a fancy french pastry Your answer c doesn&#39;t match the correct answer which was a Is the moon made of cheese? (t) True (f) False Your answer t doesn&#39;t match the correct answer which was f Is Mr.Mortenson extremly handsome and attractive? (a) Yes he is extremly handsome and attractive (b) Yes (c) No Your answers a and b matches the correct answers which were a and b You got 3 out of 6 points. You passed this quiz by scoring a score of 2/6 or higher. . Back Up . Same quiz but simpler and without multiquestions . class question: def __init__(self, base, answer): self.base = base self.answer = answer Questions = [ &quot;Is 3*3 = 9? n (t) True n (f) False n&quot;, &quot;What are Booleans? n (a) A value that stores true or false n (b) gold/silver n (c) a fancy french pastry n&quot;, &quot;Is the moon made of cheese? n (t) True n (f) False n&quot;, &quot;Is Mr.Mortenson extremly handsome and attractive? n (a) Yes he is extremly handsome and attractive n (b) No he&#39;s not and I hate points. n (c) No n&quot;, ] Q_Bank = [ question(Questions[0], &quot;t&quot;), question(Questions[1], &quot;a&quot;), question(Questions[2], &quot;f&quot;), question(Questions[3], &quot;b&quot;), ] def quiz(Q_Bank): score = 0 for problem in Q_Bank: print(problem.base) rsp = input(problem.base) if rsp.lower().strip() == problem.answer: print(&quot; nYour answer &quot; + rsp + &quot; matches the correct answer which was &quot; + str(problem.answer)) score += 1 else: print(&quot; nYour answer &quot; + rsp + &quot; doesn&#39;t match the correct answer which was &quot; + str(problem.answer)) if score &gt;= 1: print(&quot;You got &quot; + str(score)+&quot; out of &quot; + str(len(Q_Bank)) + &quot; points so you have passed this test.&quot;) else: print(&quot;You got &quot; + str(score)+&quot; out of &quot; + str(len(Q_Bank)) + &quot; points so you have failed this test.&quot;) quiz(Q_Bank) . Is 3*3 = 9? (t) True (f) False Your answer f doesn&#39;t match the correct answer which was t What are Booleans? (a) A value that stores true or false (b) gold/silver (c) a fancy french pastry Your answer a matches the correct answer which was a Is the moon made of cheese? (t) True (f) False Your answer f matches the correct answer which was f Is Mr.Mortenson extremly handsome and attractive? (a) Yes he is extremly handsome and attractive (b) No he&#39;s not and I hate points. (c) No Your answer a doesn&#39;t match the correct answer which was b You got 2 out of 4 points so you have passed this test. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week14/chapter3/2022/12/02/conditionals.html",
            "relUrl": "/week14/chapter3/2022/12/02/conditionals.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Grades!!!",
            "content": "*graded by table group . Name Score for Flowchart + Participation Notes on Flowchart - Same grade and comment for the entire group. Score for Practice Problems Notes on Practice Problems Overall Score . Dhruva | 0.5/0.5 | This is pretty good for only one person working on it! Contains most of the key aspects of the flowchart. Iteration is correctly labeled (extra). But the steps are written in sentences instead of being written in symbols. Also, the “sum = 0” should be in a rectangle because it’s a process. You also should have set “count = 0,” but everything else looks good. | 0.3/0.5 | Good job on warm up hacks however the answers for the string concatenation problem were very incorrect you had numbers instead of flavors and an error in your other problem in regards to order printing. I would look at the posted solution and revise. Also no pseudocode predictions were made and result was not evaluated. | 0.8/1 | . Derek | 0.5/0.5 | Very Neat! Good job on correctly utilizing all of the shapes. All steps are fully complete, but the “start” and the “sum = 0” steps should be separated, and you’re missing the “stop” step at the end. | 0.2/0.5 | Good Job on your warm up problems. However there was no prediction on your string problems the yoda was no preserved for problem 1 and the raisin cookie order was also not preserved good job on your operators though. | 0.8/1 | . Martin | 0.5/0.5 | Very Neat! Good job on correctly utilizing all of the shapes. All steps are fully complete, but the “start” and the “sum = 0” steps should be separated, and you’re missing the “stop” step at the end. | /0.5 | | 0.5/1 | . Ethan | 0.5/0.5 | Very Neat! Good job on correctly utilizing all of the shapes. All steps are fully complete, but the “start” and the “sum = 0” steps should be separated, and you’re missing the “stop” step at the end. | /0.5 | | 0.5/1 | . Samit | 0.5/0.5 | Very Neat! Good job on correctly utilizing all of the shapes. All steps are fully complete, but the “start” and the “sum = 0” steps should be separated, and you’re missing the “stop” step at the end. | 0.3/0.5 | Very good job on your warm-up hacks and on your string problems, good predictions, however full predictions were not made and the yoda function was not preserved of the program. | 0.8/1 | . Jeffery | 0.5/0.5 | Really well organized! Good use of the shapes. The “sum = 0” and “input n” step should be separated. Didn’t add the “stop” step. | 0.3/0.5 | Very good job on warm up hacks all answers were correct. Very good job on string hacks however the order for problem 1 is incorrect it should be very handsome mr.mort is. Good job on the cookie problem as well. However there were no predictions on strings. | 0.8/1 | . Aiden | 0.5/0.5 | Really well organized! Good use of the shapes. The “sum = 0” and “input n” step should be separated. Didn’t add the “stop” step. | 0.3/0.5 | The knowledge of string operators/methods was very well executed in the code through knowing how to convert collegeboard into python. There was an issue with one line of your code however it should print “choclate vote 225 rasin vote 4” you had gotten the votes switched up. However, the value for the problems was not displayed properly before the code as part of the assignment was being able to solve the way you could on the ap exam which would not allow running of code. Overall good execution as the other assignments had the correct results. | 0.8/1 | . Luke | 0.5/0.5 | Really well organized! Good use of the shapes. The “sum = 0” and “input n” step should be separated. Didn’t add the “stop” step. | 0/0.5 | Didn’t do homework | 0.5/1 | . Jagger | 0.5/0.5 | Really well organized! Good use of the shapes. The “sum = 0” and “input n” step should be separated. Didn’t add the “stop” step. | 0/0.5 | Didn’t do homework | 0.5/1 | . James | 0.5/0.5 | Really well organized! Good use of the shapes. The “sum = 0” and “input n” step should be separated. Didn’t add the “stop” step. | 0.1/0.5 . Double check the third question of problem set 1 . | No completion on second hacks at all incomplete. Warm up hacks was also incorrectly completed. | 0.6/1 | . Trey | 0.6/0.5 | This is nearly perfect! The only thing that is missing is the start and stop steps. But everything else is perfectly done, all the steps are in the correct places in the correct formatting, so your group will receive extra credit for this :) | 0.2/0.5 . Nice job paying particular attention to the syntax of the output . | Good job on warm up questions and getting the predictions write for the warm up hacks. You had the wrong prediction for problem 1 and for problem 2 there was no prediction also string concatenation was not used like in the original problem. . Problem 2: The psuedocode will display Very handsome Mr.Mort is. . Noun = &quot;Mr.Mortenson&quot; . Adjective = &quot;handsome&quot; . Adjective2 = &quot;Very&quot; . Verb = &quot;is&quot; . abrev = Noun[0:6] . yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; . print(yoda) . | 0.8/1 | . Devon | 0.6/0.5 | This is nearly perfect! The only thing that is missing is the start and stop steps. But everything else is perfectly done, all the steps are in the correct places in the correct formatting, so your group will receive extra credit for this :) | 0.3/0.5 | https://dreamerblock.github.io/L/2022/11/28/Stings_hw_problem.html . Good job on your practice problems however there was an issue with the formatting on your first string the correct answer is Very handsome Mr.Mort is. Along with the fact that there are no predictions. . | 1/1 | . Jonathan | 0.6/0.5 | This is nearly perfect! The only thing that is missing is the start and stop steps. But everything else is perfectly done, all the steps are in the correct places in the correct formatting, so your group will receive extra credit for this :) | 0/0.5 | There is an issue with your fastpages. I am certain that you did all your work due to the dedication shown in your ticket, however, your fastpages is down and your blog post cannot be accessed and thus cannot be graded. Once this issue is resolved I am sure you will be able to appeal for a better score for now this is temporary. | 0.6/1 | . Abdullah | 0.6/0.5 | This is nearly perfect! The only thing that is missing is the start and stop steps. But everything else is perfectly done, all the steps are in the correct places in the correct formatting, so your group will receive extra credit for this :) | 0/0.5 | Did not do homework | 0.6/1 | . Jishnu | 0.5/0.5 | This is also nearly perfect! All you’re missing is the “stop” step and you shouldn’t have split the sum = sum + n and count += 1 steps up. They should be in the same step. | 0.3/0.5 | Very Good on the work on adding a prediction for problem 1 and good job with your conversion. There was no prediction for 2 as required. All other assignments are correct. | 0.8/1 | . Max | 0.5/0.5 | This is also nearly perfect! All you’re missing is the “stop” step and you shouldn’t have split the sum = sum + n and count += 1 steps up. They should be in the same step. | 0.3/0.5 . *Different answers but original code is also different. Answer matches with altered code* . | Good job on your warm up problems but there were no predictions for strings and the answer for problem 1 is incorrect based on translated code. The yoda feature is not preserved and the abreviation is not done in regards to the same way as the psuedocode not preserving the meaning. | 0.8/1 | . Evan | 0.5/0.5 | This is also nearly perfect! All you’re missing is the “stop” step and you shouldn’t have split the sum = sum + n and count += 1 steps up. They should be in the same step. | 0.5/0.5 | Very good job on very thorough comment and solutions. However in the concatenation the order for problem 1 was different and the spacing for 2 as well due to the concatenation. Very good job on warm up due to your comments you get a bonus making up for some mistakes. | 1/1 | . Soham | 0.5/0.5 | This is a pretty solid flowchart overall :) You have most of the steps correct. All you’re missing is the “stop” step at the end and you were meant to add the “sum = 0” and “count = 0” as a step in the actual flowchart instead of as a sticky to the side, same goes for the “if count &lt; 6” step. | 0.5/0.5 . One of your questions was incorrect, but we gave you a bonus for showing your work . | Very good on your conversion along with predictions for your warm up hacks however there was no prediction made for the string problems in psuedocode there will be no access to a computer during the ap exam so practice needs to be maintained for these skills | 1/1 | . Aniket | 0.5/0.5 | This is a pretty solid flowchart overall :) You have most of the steps correct. All you’re missing is the “stop” step at the end and you were meant to add the “sum = 0” and “count = 0” as a step in the actual flowchart instead of as a sticky to the side, same goes for the “if count &lt; 6” step. | 0.5/0.5 | Very good job solving the problems all answers were correct very good for correct my spelling and getting better answers than me. However you didn’t evaluate the pseudo code prior to solving as the instructions asked as on the ap exam you will need to solve it completely by hand and on paper so doing the conversion after the solution creates good practice for the final go. | 1/1 | . Yuri | 0.5/0.5 | This is a pretty solid flowchart overall :) You have most of the steps correct. All you’re missing is the “stop” step at the end and you were meant to add the “sum = 0” and “count = 0” as a step in the actual flowchart instead of as a sticky to the side, same goes for the “if count &lt; 6” step. | 0.3/0.5 . Great job paying attention to syntax of output. Also liked how you showed work – 0.1 bonus . | Good job on how you added predictions like was required good job on your warm up problems. However, the prediction for problem 2 on strings was wrong and string concatenations was not used to format the results not translating the concept. | 0.8/1 | . Tanay | 0.5/0.5 | This is a pretty solid flowchart overall :) You have most of the steps correct. All you’re missing is the “stop” step at the end and you were meant to add the “sum = 0” and “count = 0” as a step in the actual flowchart instead of as a sticky to the side, same goes for the “if count &lt; 6” step. | 0/0.5 | Didn’t do homework | 0.5/1 | . Akshat | 0.5/0.5 | Really nice, well organized flowchart! What can be fixed is having the “sum = 0” and “count = 0” (you’re missing this) in a rectangle (which indicates a process), not a parallelogram (which indicates an input or output). The “sum = sum +n” and “count += count” should be combined. Good job on including the “end” step, this is what almost everyone forgot! | 0.3/0.5 . *Different answers but original code is also different. Answer matches with altered code* . | Good job on warm up problems. However for strings there were not predictions for the pseudocode as required also the yoda was not preserved in the final output like it should have been on the final program. Here is the correct answer for that portion Problem 2: The psuedocode will display Very handsome Mr.Mort is. . Noun = &quot;Mr.Mortenson&quot; . Adjective = &quot;handsome&quot; . Adjective2 = &quot;Very&quot; . Verb = &quot;is&quot; . abrev = Noun[0:6] . yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; . print(yoda) . | 0.8/1 | . Azeem | 0.5/0.5 | Really nice, well organized flowchart! What can be fixed is having the “sum = 0” and “count = 0” (you’re missing this) in a rectangle (which indicates a process), not a parallelogram (which indicates an input or output). The “sum = sum +n” and “count += count” should be combined. Good job on including the “end” step, this is what almost everyone forgot! | 0.5/0.5 | Very good knowledge of string operators in python proper conversion of code however the display text was incorrect the flavors of the cookies should have been in the print so the correct answer for problem 2 would have been “choclate vote 225 rasin vote 4”. However, the value for the problems was not displayed properly before the code as part of the assignment was being able to solve the way you could on the ap exam which would not allow running of code. | 1/1 | . Ahad | 0.5/0.5 | Really nice, well organized flowchart! What can be fixed is having the “sum = 0” and “count = 0” (you’re missing this) in a rectangle (which indicates a process), not a parallelogram (which indicates an input or output). The “sum = sum +n” and “count += count” should be combined. Good job on including the “end” step, this is what almost everyone forgot! | 0/0.5 | Didn’t do homework | 0.5/1 | . Josh | 0.5/0.5 | Really nice, well organized flowchart! What can be fixed is having the “sum = 0” and “count = 0” (you’re missing this) in a rectangle (which indicates a process), not a parallelogram (which indicates an input or output). The “sum = sum +n” and “count += count” should be combined. Good job on including the “end” step, this is what almost everyone forgot! | 0/0.5 . *check your fastpages for commit or jekyll errors* . | There is an issue with your fastpages. I am certain that you did all your work due to the dedication shown in your ticket, however, your fastpages is down and your blog post cannot be accessed and thus cannot be graded. Once this issue is resolved I am sure you will be able to appeal for a better score for now this is temporary. | 0.5/1 | . Parker | 0.5/0.5 | Really nice, well organized flowchart! What can be fixed is having the “sum = 0” and “count = 0” (you’re missing this) in a rectangle (which indicates a process), not a parallelogram (which indicates an input or output). The “sum = sum +n” and “count += count” should be combined. Good job on including the “end” step, this is what almost everyone forgot! | 0/0.5 | Didn’t do homework | 0.5/1 | . Kalani | 0.5/0.5 | This is a good flowchart, all the steps are covered. The only stuff you could have done differently are splitting up the “start” step from “sum = 0 and count = 0”. Those should also be in a rectangle because they are a process, not a start or end. Forgot the “stop” step. | 0/0.5 | Didn’t do homework | 0.5/1 | . Dash | 0.5/0.5 | This is a good flowchart, all the steps are covered. The only stuff you could have done differently are splitting up the “start” step from “sum = 0 and count = 0”. Those should also be in a rectangle because they are a process, not a start or end. Forgot the “stop” step. | 0/0.5 | Didn’t do homework | 0.5/1 | . Toby | 0.5/0.5 | This is a good flowchart, all the steps are covered. The only stuff you could have done differently are splitting up the “start” step from “sum = 0 and count = 0”. Those should also be in a rectangle because they are a process, not a start or end. Forgot the “stop” step. | 0.6/0.5 | Fully complete all aspects were present full predictions, all the aspects of the entire program were met. The only student that actually completed the requirements as the instructions said. | 1/1 | . Gene | 0.5/0.5 | This is a good flowchart, all the steps are covered. The only stuff you could have done differently are splitting up the “start” step from “sum = 0 and count = 0”. Those should also be in a rectangle because they are a process, not a start or end. Forgot the “stop” step. | 0.3/0.5 | Your code was almost perfect! One mistake I saw was that you forgot to add vote1 and vote2 into str() in line 7 of your code for problem 2, which is necessary to turn the the contents of the variable votes into strings so that you can print them through string concatentation. There were also no predictions good job on warm up problems. | 0.8/0.5 | . Shreya | 0.5/0.5 | This is also very neat and well organized! Some things that can be fixed are that the “start” step should be in a oval, the “sum = 0 and count = 0” should be in a rectangle, the “sum + n = sum” and “count = count + 1” should be combined into one step, and add the “stop” step at the end. Also, something major is that you should only have one “if count &lt; 6” step and then connect the two different outcomes from there. Otherwise, your organization is spot on and it is very easy to follow. | 0/0.5 | Didn’t do homework | 0.5/1 | . Sarah | 0.5/0.5 | This is also very neat and well organized! Some things that can be fixed are that the “start” step should be in a oval, the “sum = 0 and count = 0” should be in a rectangle, the “sum + n = sum” and “count = count + 1” should be combined into one step, and add the “stop” step at the end. Also, something major is that you should only have one “if count &lt; 6” step and then connect the two different outcomes from there. Otherwise, your organization is spot on and it is very easy to follow. | 0/0.5 | Didn’t do homework | 0.5/1 | . Vivian | 0.5/0.5 | This is also very neat and well organized! Some things that can be fixed are that the “start” step should be in a oval, the “sum = 0 and count = 0” should be in a rectangle, the “sum + n = sum” and “count = count + 1” should be combined into one step, and add the “stop” step at the end. Also, something major is that you should only have one “if count &lt; 6” step and then connect the two different outcomes from there. Otherwise, your organization is spot on and it is very easy to follow. | 0.3/0.5 | The knowledge of string operators/methods was very well executed in the code through knowing how to convert collegeboard into python. There was one issue with your code that you didn’t have the line “Very handsome Mr.Mort is.” instead or this may be an issue with the difference in indices for college board and python this could be fixed by changing your slice to [0:7]. However, the value for the problems was not displayed properly before the code as part of the assignment was being able to solve the way you could on the ap exam which would not allow running of code. Overall good execution as the other assignments had the correct results. | 0.8/1 | . Giannina | 0.5/0.5 | This is also very neat and well organized! Some things that can be fixed are that the “start” step should be in a oval, the “sum = 0 and count = 0” should be in a rectangle, the “sum + n = sum” and “count = count + 1” should be combined into one step, and add the “stop” step at the end. Also, something major is that you should only have one “if count &lt; 6” step and then connect the two different outcomes from there. Otherwise, your organization is spot on and it is very easy to follow. | 0/0.5 | Didn’t do homework | 0.5/1 | . String problems key: . Problem 1: The psuedocode will display choclate vote 225 rasin vote 4 . cookie = “choclate” . cookie2 = “rasin” . len1 = len(cookie) / 2 . len2 = len(cookie2) * 45 . vote1 = (str(cookie) + “ vote “ + str(len2)) . vote2 = (str(cookie2) + “ vote “ + str(len1)) . votes = (str(vote1) + “ “ + str(vote2)) . print(votes) . Problem 2: The pseudocode will display Very handsome Mr.Mort is. . Noun = “Mr.Mortenson” . Adjective = “handsome” . Adjective2 = “Very” . Verb = “is” . abrev = Noun[:7] . yoda = Adjective2 + “ “ + Adjective + “ “ + abrev + “ “ + Verb + “.” . print(yoda) .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/2022/12/02/Grades!!!.html",
            "relUrl": "/2022/12/02/Grades!!!.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Variables Notes Section 1-2",
            "content": "Variables . Variables is an abtraction which holds a value | Organizes data by labeling with a name | Names help readibility and allow to understand what it represents | . Do&#39;s and Don&#39;ts . Keep them simple don&#39;t make them too complex | Seperare words with capital letters for readibility | Make them not too generic to allow understandabililty | No spaces | No dashes and numbers | . Types . Integer: Number | String: words/charectors | Boolean: True/False | List can also be stored in variables to allow values to be retrieved and changed easily | . Assignments . Used to change the values that are being represented by a variable . = Assigns value to the operand | += Adds right to left | -= Subtracts left from right | *= multiplies right with left | /= Divided left with right | **= Raised left to the right power | . num1 = 5 num2 = 9 num1 = num2 print(num1) print(num2) . 9 9 . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . 42 42 15 . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) . 42 84 4284 126 . Data Abstraction . Used to represent data usefully, takes away things that aren&#39;t usefull at the moment | Done through variables and lists (mostly) | Seperates abstract properties and concrete properties | . Lists and Strings . A list is a sequence of elements | An element is an individual value that is assignmed to a unique indec | An index is a way to reference elements in a list or string through natural numbers | A String is an ordered sequence of characters | Indexes start at 1, are whole numbers, and cannot be negative | . Mangaing Complexity . Data abstraction helps mangae complexity in programs by assigning a collection of data name without refrencing specific details of the represenation | Using data abrastraction can be used in a program that can be used to make a program that is easier to develop and maintain | . color1=&quot;green&quot; color2=&quot;red&quot; color3=&quot;pink&quot; color4=&quot;purple&quot; color5=&quot;blue&quot; color6=&quot;brown&quot; print(color1) print(color2) print(color3) print(color4) print(color5) print(color6) colors = [&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] for color in colors: print(color) . green red pink purple blue brown green red pink purple blue brown . Homework . Q_Bank = [ &quot;Dynamic code is code that has inputs and outputs that can change?&quot;, &quot;What is the keyword for defining a function in Python?&quot;, &quot;In Jupyter Notebooks the Input is in line with the Output&quot;, &quot;What is grouping often used commands called?&quot;, ] Ans = [ &quot;true&quot;, &quot;def()&quot;, &quot;false&quot;, &quot;procedural abstraction&quot;, ] n = len(Q_Bank) for question in Q_Bank: n = n-1 print(Q_Bank[n]) rsp = input(Q_Bank[n]) if rsp.strip().lower() == Ans[n]: print(&quot;Your answer &quot; + str(rsp)+&quot; is the correct correct&quot;) else: print(&quot;Your answer &quot; + str(rsp) + &quot; doesn&#39;t equal the correct answer/s which is &quot; + str(Ans[n])) . What is grouping often used commands called? Your answer false doesn&#39;t equal the correct answer/s which is procedural abstraction In Jupyter Notebooks the Input is in line with the Output Your answer false is the correct correct What is the keyword for defining a function in Python? Your answer flase doesn&#39;t equal the correct answer/s which is def() Dynamic code is code that has inputs and outputs that can change? Your answer false doesn&#39;t equal the correct answer/s which is true .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week14/chapter3/2022/11/28/StudentLesson1.html",
            "relUrl": "/week14/chapter3/2022/11/28/StudentLesson1.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Strings - 3.4",
            "content": "Strings . What is a string? . A string is a collection of charecters. What is a charector as charector can be anything from numbers, letters, spaces, special symbols, etc. | Certain procedures may be used with strings and they vary from progaramming language to language Python examples | len() to find the length of a string | lower() to converte to lowercase | etc. Psuedocode examples | len() returns the lengh of a string | concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 | substring() returns the charectors from the string beginning at the at the first position to the last so an example of this would be substring(&quot;abcdefghijk&quot;, 2, 5) would print bcde (puesdocode starts at 1) | Note: selections are conditional statements in collegeboard | . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string | concat() in pusedocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster | . Substings . What is a substring? . A substring is a part of and already existing string. | In psuedocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pusedocode starts at 1) | . Hacks . Complete the following examples by writing down the result. Then using python convert the psuedocode into working code. | . Example 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = subtring(Noun, 1, 7) yoda = concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) DISPLAY {yoda} . Example 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = &quot;cookie/2&quot; len2 = &quot;cookie2*45&quot; vote1 = (&quot;cookie&quot;, &quot;vote&quot;, &quot;len2&quot;) vote2 = (&quot;cookie2&quot;, &quot;vote&quot;, &quot;len1&quot;) votes = (concat(vote1, &quot; &quot;, vote2)) display {votes} . Disclaimer . Work in progress more hack problems for practice will be available on presentation day .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week14/chapter3/2022/11/18/Strings.html",
            "relUrl": "/week14/chapter3/2022/11/18/Strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Binary Logic and Abstraction",
            "content": "Notes . Abstraction hiding aspects of a program to make it more user friendly | Octal, Hexadecimal, decimal, binary, etc., talking about the number of symbols per digit | Have to approach things in a scientific manner - do research | Toggling binary digits of bits to represent different numbers | Does so through transistors that can get turned on and off in patterns can allow for a computer to count in patterns | Binary patterns came to be 20, 21, etc. similar to binary which is base 10 | To count higher the number of bits increases, the highest number that can be stored in three bits is 7 and it can increase to store more, usually 8 bits | Letters can also be stored as different values allowing other functions to be possible with a computer | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week13/2022/11/18/Binary.html",
            "relUrl": "/week13/2022/11/18/Binary.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Test Corrections",
            "content": "Score . . Questions + Corrections . . I had missed the until portion of the code as the function repeated till count was greater than the max not that the function printed the odd integers that were greater than the max. This was due to not reading the problem correctly. . . I had mistakenly used the value for after the function had executed getting 6, I had not taken into acount the sum of the value of all the integers between 0-5 which would set the value. The major reason for this issue was misunderstanding the question and not finding the value for result which was what the question had asked for. The best way to solve this issue would be to re-read the problem and to pay attention to all aspects not just what would be the first answer that would come to mind when looking at the problem. . . When solving the problem I had not taken into account that the &gt; while excluding 0 in the first portion of the conditional statement, however the else condition would be applicable to 0 making the value for count2 to not be 2 but 3 indicated in the correct answer. Pay more attention and be more careful when solving as there may be portions of problems that may require greater focus. . Reflection . Through taking the final assessment was that I wasn&#39;t the most dillgent when solving the problems resulting in missing portions or misreading them or all together misunderstanding mostly likely a result of trying to finish the test with haste. However, I also faced difficulty with problems such as those involving bis, and other data, along with binary questions requiring the most time and attention this was due to not properly studying these materials and thus resulting in unneeded confustion and time wastage, a solution would be to better prepare and to focus and take notes on collegeboard provided resources and content. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/Final",
            "relUrl": "/Final",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Night @ the Museum",
            "content": "API Final Projects . Throughout this Trimester many groups of students have worked hard to display the full course of their understading via there Night at the Museum Project, however, we as group throughout the development process may have focused on our project, we gained the ability to reflect based on the outstanding work that many groups have down also showcasing their learning. These are my personal notes on the that they presented at Night at the Museum. . Api Notes . Alan, Steven, Ederick, Noor, Liav - calendar that shows date and weather, can put in an event on any day and it saves, can search for any city weather . Luke - Has a variety of quizzes to choose from to use them to generate random questions, geography, math, and sat questions. About pages linkes to eveyone fastpages. . Paaras, Samarth, AJ, Haoxuan - An api that grabs some of the best of best motivational qoutes from the internet, and allows users to vote on the quality of the votes through hosting a number counter. Also are able to pulled to get a random qoutes. . Peacock Justin, James, Shruti, Joslyn - recreation of the classic game tetris, and through the use of astronomy api to create table based on the city name and gives location details longitude latitude and moon traits. . Advay, Krishiv, Shivansh, Dhruva, Prasith - Motivational qputes api to curate qoutes accross the internet, and heleaps pepple calculate goals and calories, BMI calculator, and fitness goals. . Jonathan, Martin, Abdulla, Leonard - Basketball stats of each NBA team, used an api to get the stats fpr each team and through thier website made it accesable to the user with ease. . Lyntax Aniket, Soham, Ryan, Lucas - One api with a dictionary hosted on a flask server that has words and definitions so users can imput it against a word. Which serves to play a hangman game. Which also eliminates letters and dynamically renders the charector. . Ananya, Sreeja, Aliya, Clair - Wordle game that uses thier custom api that imports and uses it randomly uses it to generate a game. Also checks if words are valid are not and informs the user if they are incorrect or not. . Raunak, Tanay, Yuri, Sachit, Harsha - Clock alarm and stopwatch, using a custom api to request data from a variety of time of timezones to display times. . Lily, Ekam, Ishi, Shreyas - Uses a custom dictionary api of different words and thier definitions to allow users to find them and a word of the day that changes. Along with a feedback to adapt the user experience. . Aiden ahad dash sabine - Innovative api that has games such as tetris, blackjack, cookie clicker, and a pokemon game with custom to log losses wins, correct answers wrong and other game data. . The fream team we make code with varalu azeem chubmag and colin, we made and acedemic organizer, with a custom api that fetches information predominantly wikipedia and stores the data to make an acedmic organizer . Devon, trent, drew, jager - Made custom api to conpare likes to dislikes to pull it as an alarm for a stopwatch is able to manage your workflow through several options, such as notifications, that can keep you on track, and set break intervals, and tasks . Keira, Zeen, Ellie, Giannina - Made custom custmoer survey along with a quiz that has three different quizzes for calculus, physics, and satstics, with soultion with randomized questions from a database. Along with a quiz summary and a customer service api that prompts users woth questions saving them to a data base. Along with an explanation to show how the problems you missed could be solved. . Reflections . In my opinion this showcases the vast strides many students inclusing myself have made this trimester, with coming from barely understanding any CS concepts prior to this class have been able to grow and develop to make a large variety of projects based apon their understanding of APIs, CSS, HTML, Fastpages, and Python. From creating projcts like ours via games, from Pokemon, Tetris, to other educational tools like quizzes on wide variety of topics or other tools like health trackers, and calanders everyone showcased an amount of growth one may not think possible in just one trimester. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/Night@TheMuseum",
            "relUrl": "/Night@TheMuseum",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Agile Methodology",
            "content": ".",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week11/2022/10/14/Agile.html",
            "relUrl": "/week11/2022/10/14/Agile.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "API",
            "content": "Go Back | Code Corrections | API Usage | . . API Usage . Through using the currency conversion API I can implement an ability for travelers to have a useful utility which is a big market for our game which will allow them to gain added functionality from our program. It may also server as an aid to the upcoming microtransaction and paid DLC we may wish to add to expand the project profitablity such as the possiblity of Minesweeper skins and a Minesweeper Battle Pass. However, this may not be implemented. . import requests url = &quot;https://exchangerate-api.p.rapidapi.com/rapid/latest/USD&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;ec6edae9b8msh021a4b906297b9bp13ff74jsn1b271e386f87&quot;, &quot;X-RapidAPI-Host&quot;: &quot;exchangerate-api.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;result&#34;:&#34;success&#34;,&#34;provider&#34;:&#34;https://www.exchangerate-api.com&#34;,&#34;documentation&#34;:&#34;https://www.exchangerate-api.com/docs/free&#34;,&#34;terms_of_use&#34;:&#34;https://www.exchangerate-api.com/terms&#34;,&#34;time_last_update_unix&#34;:1665619351,&#34;time_last_update_utc&#34;:&#34;Thu, 13 Oct 2022 00:02:31 +0000&#34;,&#34;time_next_update_unix&#34;:1665706301,&#34;time_next_update_utc&#34;:&#34;Fri, 14 Oct 2022 00:11:41 +0000&#34;,&#34;time_eol_unix&#34;:0,&#34;base_code&#34;:&#34;USD&#34;,&#34;rates&#34;:{&#34;USD&#34;:1,&#34;AED&#34;:3.6725,&#34;AFN&#34;:85.988912,&#34;ALL&#34;:120.058634,&#34;AMD&#34;:403.107789,&#34;ANG&#34;:1.79,&#34;AOA&#34;:440.197733,&#34;ARS&#34;:150.489451,&#34;AUD&#34;:1.594569,&#34;AWG&#34;:1.79,&#34;AZN&#34;:1.697347,&#34;BAM&#34;:2.016097,&#34;BBD&#34;:2,&#34;BDT&#34;:100.989353,&#34;BGN&#34;:2.015961,&#34;BHD&#34;:0.376,&#34;BIF&#34;:2052.598939,&#34;BMD&#34;:1,&#34;BND&#34;:1.435897,&#34;BOB&#34;:6.933153,&#34;BRL&#34;:5.295171,&#34;BSD&#34;:1,&#34;BTN&#34;:82.153286,&#34;BWP&#34;:13.473801,&#34;BYN&#34;:2.96985,&#34;BZD&#34;:2,&#34;CAD&#34;:1.380175,&#34;CDF&#34;:2044.903813,&#34;CHF&#34;:0.997287,&#34;CLP&#34;:927.579778,&#34;CNY&#34;:7.167708,&#34;COP&#34;:4604.069073,&#34;CRC&#34;:629.971394,&#34;CUP&#34;:24,&#34;CVE&#34;:113.662694,&#34;CZK&#34;:25.34595,&#34;DJF&#34;:177.721,&#34;DKK&#34;:7.690263,&#34;DOP&#34;:53.656444,&#34;DZD&#34;:140.592874,&#34;EGP&#34;:19.659645,&#34;ERN&#34;:15,&#34;ETB&#34;:52.861447,&#34;EUR&#34;:1.030819,&#34;FJD&#34;:2.320164,&#34;FKP&#34;:0.902492,&#34;FOK&#34;:7.690263,&#34;GBP&#34;:0.902498,&#34;GEL&#34;:2.78066,&#34;GGP&#34;:0.902492,&#34;GHS&#34;:10.894116,&#34;GIP&#34;:0.902492,&#34;GMD&#34;:57.931071,&#34;GNF&#34;:8624.625766,&#34;GTQ&#34;:7.874647,&#34;GYD&#34;:208.974653,&#34;HKD&#34;:7.852897,&#34;HNL&#34;:24.682595,&#34;HRK&#34;:7.766667,&#34;HTG&#34;:123.776187,&#34;HUF&#34;:444.407767,&#34;IDR&#34;:15301.349145,&#34;ILS&#34;:3.575309,&#34;IMP&#34;:0.902492,&#34;INR&#34;:82.154667,&#34;IQD&#34;:1457.576859,&#34;IRR&#34;:42004.32988,&#34;ISK&#34;:144.726377,&#34;JEP&#34;:0.902492,&#34;JMD&#34;:152.864278,&#34;JOD&#34;:0.709,&#34;JPY&#34;:146.624825,&#34;KES&#34;:121.217761,&#34;KGS&#34;:82.126786,&#34;KHR&#34;:4123.582427,&#34;KID&#34;:1.594565,&#34;KMF&#34;:507.127191,&#34;KRW&#34;:1425.625309,&#34;KWD&#34;:0.29963,&#34;KYD&#34;:0.833333,&#34;KZT&#34;:478.066864,&#34;LAK&#34;:16836.123653,&#34;LBP&#34;:1507.5,&#34;LKR&#34;:360.983813,&#34;LRD&#34;:153.639615,&#34;LSL&#34;:18.262263,&#34;LYD&#34;:5.035453,&#34;MAD&#34;:11.014855,&#34;MDL&#34;:19.423608,&#34;MGA&#34;:4224.776029,&#34;MKD&#34;:63.401293,&#34;MMK&#34;:2427.744572,&#34;MNT&#34;:3322.460624,&#34;MOP&#34;:8.088464,&#34;MRU&#34;:37.859426,&#34;MUR&#34;:43.645361,&#34;MVR&#34;:15.416106,&#34;MWK&#34;:1029.34203,&#34;MXN&#34;:20.014913,&#34;MYR&#34;:4.66801,&#34;MZN&#34;:64.230714,&#34;NAD&#34;:18.262263,&#34;NGN&#34;:434.043554,&#34;NIO&#34;:35.949001,&#34;NOK&#34;:10.763445,&#34;NPR&#34;:131.445258,&#34;NZD&#34;:1.78519,&#34;OMR&#34;:0.384497,&#34;PAB&#34;:1,&#34;PEN&#34;:3.97664,&#34;PGK&#34;:3.519378,&#34;PHP&#34;:58.871982,&#34;PKR&#34;:217.296861,&#34;PLN&#34;:4.989568,&#34;PYG&#34;:7114.571496,&#34;QAR&#34;:3.64,&#34;RON&#34;:5.088638,&#34;RSD&#34;:120.830365,&#34;RUB&#34;:63.883235,&#34;RWF&#34;:1070.436103,&#34;SAR&#34;:3.75,&#34;SBD&#34;:8.071319,&#34;SCR&#34;:13.296746,&#34;SDG&#34;:566.446626,&#34;SEK&#34;:11.340528,&#34;SGD&#34;:1.435905,&#34;SHP&#34;:0.902492,&#34;SLE&#34;:16.927655,&#34;SLL&#34;:16927.65531,&#34;SOS&#34;:567.848342,&#34;SRD&#34;:28.340853,&#34;SSP&#34;:619.602752,&#34;STN&#34;:25.25494,&#34;SYP&#34;:2501.187332,&#34;SZL&#34;:18.262263,&#34;THB&#34;:37.985137,&#34;TJS&#34;:10.232623,&#34;TMT&#34;:3.49717,&#34;TND&#34;:3.112674,&#34;TOP&#34;:2.437326,&#34;TRY&#34;:18.568816,&#34;TTD&#34;:6.764787,&#34;TVD&#34;:1.594565,&#34;TWD&#34;:31.759167,&#34;TZS&#34;:2326.298373,&#34;UAH&#34;:37.95754,&#34;UGX&#34;:3833.56489,&#34;UYU&#34;:41.056318,&#34;UZS&#34;:11120.341341,&#34;VES&#34;:8.2681,&#34;VND&#34;:23928.509049,&#34;VUV&#34;:121.950741,&#34;WST&#34;:2.808059,&#34;XAF&#34;:676.169587,&#34;XCD&#34;:2.7,&#34;XDR&#34;:0.784263,&#34;XOF&#34;:676.169587,&#34;XPF&#34;:123.009083,&#34;YER&#34;:249.984599,&#34;ZAR&#34;:18.262363,&#34;ZMW&#34;:15.871555,&#34;ZWL&#34;:625.954806}} .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/API",
            "relUrl": "/API",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "College Board Quizzes",
            "content": ". . . Difficulties . Issues with understanding the College Board Pseudocode and interpreting into a valid answer | Also had difficulty with understanding the word problems and being able to understand what they required | Had the main issues with understand the program purpose assignment and the problems with understand the question mostly stemming from the misunderstanding or misreading of the problem mostly when the entire question wasn&#39;t read multiple times due to aforementioned issues with understanding the college board Pseudocode | I also struggled with interpreting the questions in Program Design and Developments due to the strange wording present within the problems. | . Difficulties V2 . I misunderstood the interaction between the world wide web and the interenet choosing &quot;The World Wide Web is a protocol that is accessed using a data stream called the Internet.&quot; when in reality the correct answer was &quot;The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet.&quot; | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week06/2022/10/03/College-Board-Quiz.html",
            "relUrl": "/week06/2022/10/03/College-Board-Quiz.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Code Corrections",
            "content": "Go Back | Code Corrections | API | . . Part 1: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for letter in alphabet: alphabetList.append(letter) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 2 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 3 print(odds) . [0, 3, 6, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 3 == 0): odds.append(numbers[i]) print(odds) . [0, 3, 6, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Part 2 . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Total Order&quot;) runs = 0 desired_runs = int(input(&quot;# of Items&quot;)) while runs &lt; desired_runs: item = input(&quot;Please select an item from the menu&quot;) try: total += menu[item] print(item + &quot; $&quot; + str(menu[item])) runs+=1 except: print(&quot;Invalid&quot;) #code should add the price of the menu items selected by the user print(&quot;Your total order is $&quot;+str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 Total Order burger $3.99 drink $0.99 drink $0.99 drink $0.99 fries $1.99 Your total order is $8.950000000000001 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/code-corrections",
            "relUrl": "/code-corrections",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Ideas for Final Project",
            "content": "Ideas . Make a page that creates a quiz based on all the content we have learned for the trimester. | Make a quiz that also shows incorrect answers that functions in the same way as the current implementation in a way that is not affected by prior runs. | Add images that are interactive and can be manipulated for easter eggs or questions. | Add a system that shows a live score for incorrect and correct questions answered as they progress along the quiz. | Create a page that show cases images an text in a visually appealing format. | . Purpose And Function . To be able to showcase the understanding of the content learned in APCSP and to allow others to practice the same. And to be able to do so in a manner that is interactive and appealing to use as a study tool. | . Data Abstraction . Through creating a variable that measures the incorrect attempts and one that measures the correct events that are integers to be able to store the score the player gets and change based on answers given. | . Managing Complexity . To prevent the quiz from becoming too complicated I would reduce the amount of functions it would perform as in not becoming too sidetracked on adding flash cards. Or adding extra features that would be useless to accomplishing the final task or distracting. | . Procedural Abstraction . The code would make use of function to be able to run quizzes allowing operation such as starting to be done only once saving repeatedly used code. | Creating functions that would remove repeated events such as switching pages or other similar functions. | . Algorithm Implementation . Would use an algorithm for printing scores of correct and incorrect answers or pages visited through concatenation of strings from the data stored in the variables. | . Testing . Would run through the quiz will recording myself to showcase fixing issues that may develop from scoring to formatting, and being able to loop with in a way that the scores don&#39;t stack. | .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week03/2022/09/11/Ideas_Final.html",
            "relUrl": "/week03/2022/09/11/Ideas_Final.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "App Lab Quiz",
            "content": "Design . To create a quiz with a unified visual aesthetic with colors that look appealing when used in unison. | To create a quiz that can have a combination of both free response and multiple choice questions. | To create a quiz that can be replayed indefinitely and still have scoring function. | To create a quiz that can be added to have multiple modes. | . . Successes . Was able to make a quiz that could be looped through the use of functions to restart the quiz using functions to rerun the quiz to remove previous runs when replayed. | Was able to create an appealing visual design. | Was able to create multiple modes without losing functionality of any aspect. (Second Quiz is only present to show case the capability of running multiple quizzes in one project.) | Was able to have both free response questions and multiple choice, by using if else statements to check the answer of a free response question. | Was able to use functions to remove frequently used code (Data Abstraction). | . Discoveries/Challenges . Had issues with the first implementation of looping with the functions not working correctly on the first implementation. Allowed me to discover to make a function to allow for ending as the ending procedure wasn&#39;t present on all endings for the question both right and incorrect answer. | Had issues with creating a scoring system that was consistently functional, simplified the scoring mechanism by using a single variable as a way to measure the correctly answered questions. | Had issues with starting the quizzes the quiz looped around. Which allowed me to to discover a solution to run all quiz functions as soon as mouse movement was detected on starting page allowing all functionalities of all quizzes present to work. | . Link To Quiz . https://studio.code.org/projects/applab/aTaquZIk5sKMfBZVcUUP8UvuTu6kamc1SIQgFcscyRE .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week03/2022/09/11/App_Lab_Quiz.html",
            "relUrl": "/week03/2022/09/11/App_Lab_Quiz.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Theme Change",
            "content": ". Analysis . After changing to an unsupported theme from Jekyl, there seems to be a lack of options to toggle to tags and other features present to allow switching between pages. There also seems to be a difference in the formatting of images as the appear to be no longer the similar size. Along with further issues with titles not being correctly spaced and ordered in a way that correlated well with their title-card images. Along with the favicon being missing as well, however all other functions such as the post appear to be functioning. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week02/2022/09/05/Theme_Change.html",
            "relUrl": "/week02/2022/09/05/Theme_Change.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Information",
            "content": "Peers_Info = [] Peers_Info.append({ &quot;First_Name&quot;: &quot;Tirth&quot;, &quot;Middle_Name/Initial&quot;:&quot;S.&quot;, &quot;Last_Name&quot;: &quot;Thakkar&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;DOB&quot;: &quot;December 26, 2005&quot;, &quot;Grade&quot;: &quot;11th&quot;, &quot;Email&quot;: &quot;tirth1226@gmail.com&quot;, }) Peers_Info.append({ &quot;First_Name&quot;: &quot;Mirza&quot;, &quot;Middle_Name/Initial&quot;: &quot;Haseeb&quot;, &quot;Last_Name&quot;: &quot;Beg&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;DOB&quot;: &quot;December 6th, 2007&quot;, &quot;Grade&quot;: &quot;10th&quot;, &quot;Email&quot;: &quot;mirzahbeg123@gmail.com&quot;, }) print(Peers_Info) . [{&#39;First_Name&#39;: &#39;Tirth&#39;, &#39;Middle_Name/Initial&#39;: &#39;S.&#39;, &#39;Last_Name&#39;: &#39;Thakkar&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;DOB&#39;: &#39;December 26, 2005&#39;, &#39;Grade&#39;: &#39;11th&#39;, &#39;Email&#39;: &#39;tirth1226@gmail.com&#39;}, {&#39;First_Name&#39;: &#39;Mirza&#39;, &#39;Middle_Name/Initial&#39;: &#39;Haseeb&#39;, &#39;Last_Name&#39;: &#39;Beg&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;DOB&#39;: &#39;December 6th, 2007&#39;, &#39;Grade&#39;: &#39;10th&#39;, &#39;Email&#39;: &#39;mirzahbeg123@gmail.com&#39;}] . Formatting . Way to organize and format the data. . def formatting(d_rec): print(&quot; 033[1m&quot;, d_rec[&quot;First_Name&quot;], d_rec[&quot;Middle_Name/Initial&quot;], d_rec[&quot;Last_Name&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Grade:&quot;, d_rec[&quot;Grade&quot;], &quot; x1b[0m&quot;) print(&quot; 033[4m&quot;, &quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;], &quot; x1b[0m&quot;) print() def printing(): for index in Peers_Info: formatting(index) printing() . Tirth S. Thakkar Residence: San Diego Birth Day: December 26, 2005 Grade: 11th Email: tirth1226@gmail.com Mirza Haseeb Beg Residence: San Diego Birth Day: December 6th, 2007 Grade: 10th Email: mirzahbeg123@gmail.com . Reversal . Way to reverse the data. . Peers_Info.reverse() printing() . Mirza Haseeb Beg Residence: San Diego Birth Day: December 6th, 2007 Grade: 10th Email: mirzahbeg123@gmail.com Tirth S. Thakkar Residence: San Diego Birth Day: December 26, 2005 Grade: 11th Email: tirth1226@gmail.com .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week02/2022/09/02/Python_Dictionaries_&_Lists.html",
            "relUrl": "/week02/2022/09/02/Python_Dictionaries_&_Lists.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Python Quiz With Dictionary",
            "content": "Quiz . Dictionary being used to run the quiz. . Q_Bank = { &quot;Dynamic code is code that has inputs and outputs that can change?&quot;:&quot;true&quot;, &quot;What is the keyword for defining a function in Python?&quot;: &quot;def&quot;, &quot;In Jupyter Notebooks the Input is in line with the Output&quot;: &quot;false&quot;, &quot;What is grouping often used commands called?&quot;: &quot;procedural abstraction&quot;, } score = 0 for Q, ans in Q_Bank.items(): print(Q) rsp = input(Q) if rsp.lower().strip() == ans.lower().strip(): print(f&quot;Your answer {rsp} is the correct correct&quot;) score += 1 else: print(f&quot;Your answer {rsp} doesn&#39;t equal the correct answer/s which is {ans}&quot;) print(f&quot;Your score is {score} out of {len(Q_Bank)} points.&quot;) . Dynamic code is code that has inputs and outputs that can change? Your answer true is the correct correct What is the keyword for defining a function in Python? Your answer def is the correct correct In Jupyter Notebooks the Input is in line with the Output Your answer false is the correct correct What is grouping often used commands called? Your answer grouping doesn&#39;t equal the correct answer/s which is procedural abstraction Your score is 3 out of 4 points. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week02/2022/09/02/Dictionary_Quiz.html",
            "relUrl": "/week02/2022/09/02/Dictionary_Quiz.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Tirth Thakkar Measurements And Graphical Analysis Lab",
            "content": "Procedure: All 5 disks will be labeled, then have thier radius measured using a meter stick, after which they will be weighed on a digtal scale to collect data regarding their mass. Then their thickness was measured by using a meter stick. After the data regarding the radius and mass was put into a table, which was used to create graph 1 through sheets. After which the graph was linearlized by using r2 as the x value as it is the only value that isn’t constant to create graph2 after imputing it into sheets and creating a graph. . Purpose Statement: . Given “disks” of different radii, determine the relationship between the mass and radius of the disks through graphical method. . In using graphical method, we will learn about linearization and the use of it to create a mathematical model. . Equations: . p=m/v . | m=p*v . | V=a*h . | m=p*a*h . | m=p*pi*r^2*h . | Data Table: .   Height Radius (cm) Mass(g)   Radius^2 (cm^2) . Disk 1 | 0.14 mm | 2.38 | 0.08 |   | 5.66 | . Disk 2 |   | 3.15 | 0.14 |   | 9.92 | . Disk 3 |   | 3.80 | 0.24 |   | 14.44 | . Disk 4 |   | 5.40 | 0.38 |   | 29.16 | . Disk 5 |   | 6.85 | 0.71 |   | 46.92 | . Graph 1 . Graph 2 . . y = 0.0148x - 3.1*10-3 . Analysis Questions: . 1) What is the independent variable in your y = mx +b formula? The independent variable on the formula would be r2 it is the only constant variable across all the formulas. . As the density is equal to ⍴ = m/v and as density is constant m can be m = ⍴v, and as v = a*h, and expanded it would be v = π*r2*h, so when substituted into the equation for mass m = ⍴*π*r2*h, and as all three values density (all discs are aluminum), π (constant), h (all are the same thickness) are constant it would make r2 the only value that changes between all 5 discs making it the independent variable. . -——————————————————————————————————————– . 2) What does the slope represent in your y = mx +b formula? Show dimensionally that indeed that is what your slope represents and that the formula is valid dimensionally. . The slope represents ⍴πh. As the equation for density is ⍴ = m/v and as ⍴ is constant it allows for m = πv, which allows for it to be rewritten as m = ⍴*π*h*r2 and as m is the y value and r2 is the x value it can be further rewritten as y = ⍴*π*h*x making ⍴πh the slope. And the formula is m = ⍴*π*h*r2 is demensionally valid as . m = (m(πr2h)-1)(h)(r2) which is M = (M(L2L)-1)(L)(L2), M = M (L-3)(L3), M = M . -——————————————————————————————————————– . 3) Should the “b” in your y = mx + b formula be zero? Explain your answer. . Yes as the independent variable is r2 and as a disc with the radius of 0 should also have a mass of 0 (dependent variable). . -——————————————————————————————————————– . 4) Measure/estimate the “thickness” of your cylinders. Use that value to find the experimental density of your cylinders. Find a percent difference between your found density and the actual density. The actual material is aluminum. . The thickness value of the cylinders was 0.14 mm (0.014 cm), with a slope of 0.0148 (⍴*π*h), ⍴ = 0.0148/π*(0.014 cm), ⍴ = 0.336 g/cm3, compared to the real density of aluminum which is 2.3/cm3. | 0.336-2.3 | /2.3 *100, 85.39% error. | . -——————————————————————————————————————– . 5) errors. Make sure you explain why your number is bigger or smaller than (if positive or negative difference.) . My number is substantially smaller as when using the line of best fit the value for the y-intercept is not 0 i.e. when r2 = 0 the value for mass is not 0 which is not possible in real life meaning that that decrepency coupled with the fact that the measuring techniques through using a meter stick to estimate the thickness and radius of the disks would also be less accurate than proper electronic measurements in a lab. . -——————————————————————————————————————– . Synthesis Questions: . 1) In this experiment, if we had used disks with a greater thickness, would the slope . of your best fit line have been different? Would your experimental value for density be . the same? Explain. . If disks of greater thickness was used the value for slope would be different as previously mentioned when the expanded equation for mass which is m = ⍴*π*h*r2 . is rewritten would be y = ⍴*π*h(x), and which would make ⍴*π*h the slope and as h is a part of the slope value and if it were greater it would make the slope greater. However, the density would stay the same as the material would remain unchanged as if the height was greater it would also cause the mass to increase and it would cancel out when solving for the density. . -——————————————————————————————————————– . 2) How would your graph of m versus r2 be different if you had used disks of the same . thickness, but made out of steel? Draw a second line on your m versus r2 plot that . represents disks made of steel. . If you had used disks made of steel but of the same thickness, you would have disks of a greater density than that of the aluminum graph. Which would cause the graph mass vs r2 to be above that of the one made of aluminum. . . -——————————————————————————————————————– . 3) Another group of students has acquired data for the exact same experiment; . however, their disks are made of an unknown material that they are trying to . determine. The group’s m versus r2 data produced a line of best fit with slope equal to . 122 kg/m2. Each disk they measured had the same 0.5 cm thickness. Calculate the . density of the unknown material and use the table below to help determine what . material their disks are made of. . m = ⍴*π*h*r2, y = ⍴*π*h(x), 122kg/m2 = ⍴*π*0.005, 122/0.005π = ⍴, ⍴ = 7,766.76 kg/m3, 7,766.761kg/m3 * 1000g/kg = 7,766,761g/m3 * 1*106 cm3/m3 = 7,766,761g/1*106, 7.766761g/cm3 approx 7.8 = Iron . -——————————————————————————————————————– . Multiple Choice: . 1) &gt; - E . 1. &gt; m = ⍴ *π *h *r&lt;sup&gt;2&lt;/sup&gt;, C = 2πr, C/2π = r, m = ⍴ *π *h *(C/2π)&lt;sup&gt;2&lt;/sup&gt;, m = ⍴ *π *h *C&lt;sup&gt;2&lt;/sup&gt;/4π&lt;sup&gt;2&lt;/sup&gt;, ⍴ *h *C&lt;sup&gt;2&lt;/sup&gt;/4π, ⍴h/4π(x), . 2) &gt; - C . 1. &gt; ⍴ = m/v and as density is constant m can be m = ⍴v, and as v = 4/3πr&lt;sup&gt;3&lt;/sup&gt;, so when substituted into the equation for mass m = ⍴ *π *4/3πr&lt;sup&gt;3&lt;/sup&gt; and the only non constant is r&lt;sup&gt;3&lt;/sup&gt; making it the only value that would lineralize the graph . Graphs: Lab 1 Graphs .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/2022/08/28/Tirth-Thakkar-Measurements-and-Graphical-Analysis-Lab.html",
            "relUrl": "/2022/08/28/Tirth-Thakkar-Measurements-and-Graphical-Analysis-Lab.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Python Quiz",
            "content": "class question: def __init__(self, base, answer): self.base = base self.answer = answer question_base = [ &quot;Dynamic code is code that has inputs and outputs that can change? n (t) True n (f) False n n&quot;, &quot;What is the keyword for defining a function in Python? n (a) def() n (b) fun() n (c) proc() n n&quot;, &quot;In Jupyter Notebooks the Input is in line with the Output? n (t) True n (f) False n n&quot;, &quot;What is grouping often used commands called? n (a) Bundle n (b) Procedural Abstraction (c) Group n n&quot;, ] question_bank = [ question(question_base[0], &quot;t&quot;), question(question_base[1], &quot;a&quot;), question(question_base[2], &quot;f&quot;), question(question_base[3], &quot;b&quot;), ] def run_test(question_bank): score = 0 for question in question_bank: rsp = input(question.base) if rsp.lower().strip() == question.answer: score += 1 print(&quot;You got &quot; + str(score)+&quot; out of &quot; + str(len(question_bank)) + &quot; questions correct.&quot;) run_test(question_bank) . You got 0 out of 4 questions correct. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week01/2022/08/28/Quiz.html",
            "relUrl": "/week01/2022/08/28/Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Tool Check",
            "content": "Jupyter . %%bash jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/tirth/.local/share/jupyter/kernels/bash javascript /home/tirth/.local/share/jupyter/kernels/javascript python3 /home/tirth/anaconda3/share/jupyter/kernels/python3 . Python . %%bash python2 --version python --version . Python 2.7.18 . Python 3.9.12 . Conda . %%bash conda list . # packages in environment at /home/tirth/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . %%bash echo Conda test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not located&quot; fi . Conda jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week01/2022/08/28/Bash_Check.html",
            "relUrl": "/week01/2022/08/28/Bash_Check.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Printing Hello Jupyter Notebook Demo",
            "content": "print(&quot;hello&quot;) . hello .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week0/2022/08/26/Notebook1.html",
            "relUrl": "/week0/2022/08/26/Notebook1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Markdown Post",
            "content": "Hello First Markdown Blog Post . This is my first markdown post for APCSP. Which will improve in the future. .",
            "url": "https://tirth-thakkar.github.io/APCSP-Blog/week0/2022/08/26/MarkdownPostV1.html",
            "relUrl": "/week0/2022/08/26/MarkdownPostV1.html",
            "date": " • Aug 26, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "API Submenu",
          "content": "Go Back | Code Corrections | API Usage | . .",
          "url": "https://tirth-thakkar.github.io/APCSP-Blog/submenu/",
          "relUrl": "/submenu/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Folder on Student Lessons",
          "content": "Work | Sections 1-2 | Section 3-4 (Our Lesson) Strings Entire Lesson | Sections 5-7 | Sections 8-10 | Sections 9-11 | Sections 12-13 | Sections 14-15 | Section 16 | Sections 17-18 | . Grades | Grade 0.95/1 | Presenting Score: 1/1 Grades Page | Grade 1/1 | Grade 0.95/1 | Grade: 0.95/1 | Grade: 0.95/1 | Grade: 0.85/1 | Grade: 0.9/1 | Grade: 1/1 | . Vocabulary | Unit 2 | Unit 3 | . .",
          "url": "https://tirth-thakkar.github.io/APCSP-Blog/Folder/",
          "relUrl": "/Folder/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "Tirth Thakkar APCSP student at DNHS. This is the blog assignment for all future assignments. Tirth-Thakkar [^1]. . [^1] Github .",
          "url": "https://tirth-thakkar.github.io/APCSP-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tirth-thakkar.github.io/APCSP-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}